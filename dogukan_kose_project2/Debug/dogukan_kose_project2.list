
dogukan_kose_project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b6b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002244  0801b850  0801b850  0002b850  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801da94  0801da94  000302bc  2**0
                  CONTENTS
  4 .ARM          00000008  0801da94  0801da94  0002da94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801da9c  0801da9c  000302bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801da9c  0801da9c  0002da9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801daa4  0801daa4  0002daa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0801daa8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302bc  2**0
                  CONTENTS
 10 .bss          00004874  200002bc  200002bc  000302bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b30  20004b30  000302bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00109bc7  00000000  00000000  000302ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00010cf7  00000000  00000000  00139eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004e28  00000000  00000000  0014abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004bf0  00000000  00000000  0014f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003331a  00000000  00000000  001545c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00052ffd  00000000  00000000  001878e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018d83f  00000000  00000000  001da8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0036811e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00017340  00000000  00000000  00368170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002bc 	.word	0x200002bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b82c 	.word	0x0801b82c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c0 	.word	0x200002c0
 80001cc:	0801b82c 	.word	0x0801b82c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:
static float __Z_Scale = 1.0f;
//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f004 fd05 	bl	8005ad4 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f006 fcc1 	bl	8007a5a <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f006 fcba 	bl	8007a5a <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f004 fcf2 	bl	8005ad4 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	200002d8 	.word	0x200002d8

08001100 <_Z14LIS3DSH_ReadIOhPhh>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001120:	f004 fcd8 	bl	8005ad4 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	230a      	movs	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	4815      	ldr	r0, [pc, #84]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800112e:	f006 fc94 	bl	8007a5a <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800113e:	f006 fdc8 	bl	8007cd2 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8001142:	2201      	movs	r2, #1
 8001144:	2108      	movs	r1, #8
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001148:	f004 fcc4 	bl	8005ad4 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	429a      	cmp	r2, r3
 800115a:	da0c      	bge.n	8001176 <_Z14LIS3DSH_ReadIOhPhh+0x76>
	{
		dataR[i] = spiBuf[i];
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	440b      	add	r3, r1
 8001164:	3210      	adds	r2, #16
 8001166:	443a      	add	r2, r7
 8001168:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800116c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7ec      	b.n	8001150 <_Z14LIS3DSH_ReadIOhPhh+0x50>
	}
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	200002d8 	.word	0x200002d8

08001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:
//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001196:	2258      	movs	r2, #88	; 0x58
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4855      	ldr	r0, [pc, #340]	; (80012f0 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 800119c:	f019 f998 	bl	801a4d0 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f023 030f 	bic.w	r3, r3, #15
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	2020      	movs	r0, #32
 80011ce:	f7ff ff6d 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2024      	movs	r0, #36	; 0x24
 8001204:	f7ff ff52 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001210:	2388      	movs	r3, #136	; 0x88
 8001212:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	2023      	movs	r0, #35	; 0x23
 800121e:	f7ff ff45 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d858      	bhi.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012b5 	.word	0x080012b5
 8001234:	080012dd 	.word	0x080012dd
 8001238:	080012dd 	.word	0x080012dd
 800123c:	080012dd 	.word	0x080012dd
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012dd 	.word	0x080012dd
 8001248:	080012dd 	.word	0x080012dd
 800124c:	080012dd 	.word	0x080012dd
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012dd 	.word	0x080012dd
 8001258:	080012dd 	.word	0x080012dd
 800125c:	080012dd 	.word	0x080012dd
 8001260:	080012dd 	.word	0x080012dd
 8001264:	080012dd 	.word	0x080012dd
 8001268:	080012dd 	.word	0x080012dd
 800126c:	080012dd 	.word	0x080012dd
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012dd 	.word	0x080012dd
 8001278:	080012dd 	.word	0x080012dd
 800127c:	080012dd 	.word	0x080012dd
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	080012dd 	.word	0x080012dd
 8001298:	080012dd 	.word	0x080012dd
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012dd 	.word	0x080012dd
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	080012dd 	.word	0x080012dd
 80012b0:	080012d5 	.word	0x080012d5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 80012b8:	601a      	str	r2, [r3, #0]
			break;
 80012ba:	e00f      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e00b      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 80012c8:	601a      	str	r2, [r3, #0]
			break;
 80012ca:	e007      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 80012d0:	601a      	str	r2, [r3, #0]
			break;
 80012d2:	e003      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 80012d8:	601a      	str	r2, [r3, #0]
			break;
 80012da:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80012dc:	2201      	movs	r2, #1
 80012de:	2108      	movs	r1, #8
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 80012e2:	f004 fbf7 	bl	8005ad4 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002d8 	.word	0x200002d8
 80012f4:	20000000 	.word	0x20000000
 80012f8:	3d75c28f 	.word	0x3d75c28f
 80012fc:	3df5c28f 	.word	0x3df5c28f
 8001300:	3e3851ec 	.word	0x3e3851ec
 8001304:	3e75c28f 	.word	0x3e75c28f
 8001308:	3f3ae148 	.word	0x3f3ae148
 800130c:	40021000 	.word	0x40021000

08001310 <_Z18LIS3DSH_GetDataRawv>:

//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2202      	movs	r2, #2
 800131e:	4619      	mov	r1, r3
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff feed 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	801a      	strh	r2, [r3, #0]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2202      	movs	r2, #2
 8001342:	4619      	mov	r1, r3
 8001344:	202a      	movs	r0, #42	; 0x2a
 8001346:	f7ff fedb 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2202      	movs	r2, #2
 8001366:	4619      	mov	r1, r3
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff fec9 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29a      	uxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	809a      	strh	r2, [r3, #4]

	return tempDataRaw;
 8001384:	bf00      	nop

}
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_Z21LIS3DSH_GetDataScaledv>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffb8 	bl	8001310 <_Z18LIS3DSH_GetDataRawv>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80013a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <_Z21LIS3DSH_GetDataScaledv+0xe8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <_Z21LIS3DSH_GetDataScaledv+0xf0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80013d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <_Z21LIS3DSH_GetDataScaledv+0xf4>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <_Z21LIS3DSH_GetDataScaledv+0xf8>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800140c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <_Z21LIS3DSH_GetDataScaledv+0xfc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 8001430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <_Z21LIS3DSH_GetDataScaledv+0x100>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	ee06 1a90 	vmov	s13, r1
 800145a:	ee07 2a10 	vmov	s14, r2
 800145e:	ee07 3a90 	vmov	s15, r3
}
 8001462:	eeb0 0a66 	vmov.f32	s0, s13
 8001466:	eef0 0a47 	vmov.f32	s1, s14
 800146a:	eeb0 1a67 	vmov.f32	s2, s15
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004
 800147c:	00000000 	.word	0x00000000
 8001480:	20000330 	.word	0x20000330
 8001484:	20000008 	.word	0x20000008
 8001488:	20000334 	.word	0x20000334
 800148c:	2000000c 	.word	0x2000000c
 8001490:	20000338 	.word	0x20000338

08001494 <_Z19LIS3DSH_X_calibrateff>:

}
//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	ed87 0a01 	vstr	s0, [r7, #4]
 800149e:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80014a2:	ed97 7a00 	vldr	s14, [r7]
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <_Z19LIS3DSH_X_calibrateff+0x50>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80014bc:	ed97 7a00 	vldr	s14, [r7]
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014e8 <_Z19LIS3DSH_X_calibrateff+0x54>
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <_Z19LIS3DSH_X_calibrateff+0x58>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000330 	.word	0x20000330
 80014e8:	44fa0000 	.word	0x44fa0000
 80014ec:	20000004 	.word	0x20000004

080014f0 <_Z19LIS3DSH_Y_calibrateff>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014fa:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80014fe:	ed97 7a00 	vldr	s14, [r7]
 8001502:	edd7 7a01 	vldr	s15, [r7, #4]
 8001506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <_Z19LIS3DSH_Y_calibrateff+0x50>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001518:	ed97 7a00 	vldr	s14, [r7]
 800151c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001544 <_Z19LIS3DSH_Y_calibrateff+0x54>
 8001528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <_Z19LIS3DSH_Y_calibrateff+0x58>)
 800152e:	edc3 7a00 	vstr	s15, [r3]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000334 	.word	0x20000334
 8001544:	44fa0000 	.word	0x44fa0000
 8001548:	20000008 	.word	0x20000008

0800154c <_Z19LIS3DSH_Z_calibrateff>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
 8001556:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800155a:	ed97 7a00 	vldr	s14, [r7]
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <_Z19LIS3DSH_Z_calibrateff+0x50>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8001574:	ed97 7a00 	vldr	s14, [r7]
 8001578:	edd7 7a01 	vldr	s15, [r7, #4]
 800157c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001580:	eddf 6a07 	vldr	s13, [pc, #28]	; 80015a0 <_Z19LIS3DSH_Z_calibrateff+0x54>
 8001584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <_Z19LIS3DSH_Z_calibrateff+0x58>)
 800158a:	edc3 7a00 	vstr	s15, [r3]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000338 	.word	0x20000338
 80015a0:	44fa0000 	.word	0x44fa0000
 80015a4:	2000000c 	.word	0x2000000c

080015a8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80015de:	2137      	movs	r1, #55	; 0x37
 80015e0:	4817      	ldr	r0, [pc, #92]	; (8001640 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80015e2:	f018 feff 	bl	801a3e4 <__assert_func>

	if(align && size)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01f      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3301      	adds	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4413      	add	r3, r2
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f011 fd05 	bl	8013010 <_Z9ei_callocjj>
 8001606:	60f8      	str	r0, [r7, #12]

		if(p)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00e      	beq.n	800162c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	425b      	negs	r3, r3
 800161a:	4013      	ands	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad2      	subs	r2, r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3b02      	subs	r3, #2
 8001628:	b292      	uxth	r2, r2
 800162a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800162c:	697b      	ldr	r3, [r7, #20]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	0801b86c 	.word	0x0801b86c
 800163c:	0801b888 	.word	0x0801b888
 8001640:	0801b8c0 	.word	0x0801b8c0

08001644 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001656:	215a      	movs	r1, #90	; 0x5a
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800165a:	f018 fec3 	bl	801a3e4 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001664:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	425b      	negs	r3, r3
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f011 fcdb 	bl	801302c <_Z7ei_freePv>
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	0801b93c 	.word	0x0801b93c
 8001684:	0801b940 	.word	0x0801b940
 8001688:	0801b8c0 	.word	0x0801b8c0

0800168c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	4798      	blx	r3
    }
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf0c      	ite	eq
 800170a:	2301      	moveq	r3, #1
 800170c:	2300      	movne	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	731a      	strb	r2, [r3, #12]
 800173c:	e00e      	b.n	800175c <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	2101      	movs	r1, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f011 fc60 	bl	8013010 <_Z9ei_callocjj>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <_ZN2ei9ei_matrixD1Ev+0x22>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7b1b      	ldrb	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f011 fc4c 	bl	801302c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	731a      	strb	r2, [r3, #12]
 80017be:	e00d      	b.n	80017dc <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	2101      	movs	r1, #1
 80017ca:	4618      	mov	r0, r3
 80017cc:	f011 fc20 	bl	8013010 <_Z9ei_callocjj>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7b1b      	ldrb	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f011 fc0c 	bl	801302c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
 8001822:	e7fe      	b.n	8001822 <_ZSt25__throw_bad_function_callv+0x4>

08001824 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	ed87 0a01 	vstr	s0, [r7, #4]
 800182e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001832:	f017 fc53 	bl	80190dc <expf>
 8001836:	eef0 7a40 	vmov.f32	s15, s0
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	ed87 0a01 	vstr	s0, [r7, #4]
 800184e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001852:	f017 fbaf 	bl	8018fb4 <roundf>
 8001856:	eef0 7a40 	vmov.f32	s15, s0
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4619      	mov	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	461a      	mov	r2, r3
 800187c:	f000 f818 	bl	80018b0 <_ZN2ei5numpy9transposeEPfii>
 8001880:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	e00c      	b.n	80018a6 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001898:	893a      	ldrh	r2, [r7, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 800189e:	897a      	ldrh	r2, [r7, #10]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80018a4:	2300      	movs	r3, #0
    }
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b08f      	sub	sp, #60	; 0x3c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80018c4:	2300      	movs	r3, #0
 80018c6:	f7ff ff29 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x24>
 80018d0:	4c23      	ldr	r4, [pc, #140]	; (8001960 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80018d2:	e03b      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80018da:	4c21      	ldr	r4, [pc, #132]	; (8001960 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80018dc:	e036      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	da03      	bge.n	80018ee <_ZN2ei5numpy9transposeEPfii+0x3e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	db01      	blt.n	80018f2 <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 80018ee:	4c1d      	ldr	r4, [pc, #116]	; (8001964 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 80018f0:	e02c      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	83bb      	strh	r3, [r7, #28]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	83fb      	strh	r3, [r7, #30]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	b29b      	uxth	r3, r3
 8001906:	82bb      	strh	r3, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001910:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001912:	f107 0214 	add.w	r2, r7, #20
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f00a fa07 	bl	800bd30 <arm_mat_trans_f32>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001928:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001930:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001934:	e00a      	b.n	800194c <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	461a      	mov	r2, r3
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f018 fdc3 	bl	801a4d0 <memcpy>

        return EIDSP_OK;
 800194a:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 800194c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff0e 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
    }
 8001956:	4623      	mov	r3, r4
 8001958:	4618      	mov	r0, r3
 800195a:	373c      	adds	r7, #60	; 0x3c
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	fffffc16 	.word	0xfffffc16
 8001964:	fffffc0c 	.word	0xfffffc0c

08001968 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001974:	edd7 7a00 	vldr	s15, [r7]
 8001978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197c:	eef4 7a47 	vcmp.f32	s15, s14
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	d101      	bne.n	800198a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001986:	2300      	movs	r3, #0
 8001988:	e033      	b.n	80019f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001992:	d204      	bcs.n	800199e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199c:	d301      	bcc.n	80019a2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 80019a0:	e027      	b.n	80019f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	82bb      	strh	r3, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	82fb      	strh	r3, [r7, #22]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	81bb      	strh	r3, [r7, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	81fb      	strh	r3, [r7, #14]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 80019ce:	f107 020c 	add.w	r2, r7, #12
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4611      	mov	r1, r2
 80019d8:	ed97 0a00 	vldr	s0, [r7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f00a f971 	bl	800bcc4 <arm_mat_scale_f32>
 80019e2:	4603      	mov	r3, r0
 80019e4:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	e000      	b.n	80019f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 80019f0:	2300      	movs	r3, #0
    }
 80019f2:	4618      	mov	r0, r3
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	fffffc0c 	.word	0xfffffc0c

08001a00 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001a18:	e028      	b.n	8001a6c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d001      	beq.n	8001a26 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001a24:	e022      	b.n	8001a6c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d21a      	bcs.n	8001a6a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	18d0      	adds	r0, r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f107 0208 	add.w	r2, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f00a fa4e 	bl	800bef0 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e7df      	b.n	8001a2a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001a6a:	2300      	movs	r3, #0
    }
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	fffffc14 	.word	0xfffffc14

08001a78 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001a90:	e028      	b.n	8001ae4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001a9c:	e022      	b.n	8001ae4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d21a      	bcs.n	8001ae2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	18d0      	adds	r0, r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f107 0208 	add.w	r2, r7, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f00a f9ab 	bl	800be22 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e7df      	b.n	8001aa2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001ae2:	2300      	movs	r3, #0
    }
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	fffffc14 	.word	0xfffffc14

08001af0 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>:
    /**
     * Get the minimum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int min(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001b08:	e029      	b.n	8001b5e <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x78>)
 8001b14:	e023      	b.n	8001b5e <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d21b      	bcs.n	8001b5c <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float min;
            uint32_t ix;
            arm_min_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &min, &ix);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	6979      	ldr	r1, [r7, #20]
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	18d0      	adds	r0, r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	f107 0210 	add.w	r2, r7, #16
 8001b42:	f00a f99d 	bl	800be80 <arm_min_f32>
            output_matrix->buffer[row] = min;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e7de      	b.n	8001b1a <_ZN2ei5numpy3minEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = min;
#endif
        }

        return EIDSP_OK;
 8001b5c:	2300      	movs	r3, #0
    }
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	fffffc14 	.word	0xfffffc14

08001b6c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>:
    /**
     * Get the maximum value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int max(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001b84:	e029      	b.n	8001bda <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }
        if (output_matrix->cols != 1) {
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x78>)
 8001b90:	e023      	b.n	8001bda <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6e>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d21b      	bcs.n	8001bd8 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x6c>
#if EIDSP_USE_CMSIS_DSP
            float max;
            uint32_t ix;
            arm_max_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &max, &ix);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	6979      	ldr	r1, [r7, #20]
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	18d0      	adds	r0, r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6899      	ldr	r1, [r3, #8]
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	f107 0210 	add.w	r2, r7, #16
 8001bbe:	f00a f8f8 	bl	800bdb2 <arm_max_f32>
            output_matrix->buffer[row] = max;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e7de      	b.n	8001b96 <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = max;
#endif
        }

        return EIDSP_OK;
 8001bd8:	2300      	movs	r3, #0
    }
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	fffffc14 	.word	0xfffffc14

08001be8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    /**
     * Get the stdev value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001c00:	e043      	b.n	8001c8a <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }
        if (output_matrix->cols != 1) {
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001c0c:	e03d      	b.n	8001c8a <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d235      	bcs.n	8001c88 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa0>
#if EIDSP_USE_CMSIS_DSP
            float std;
            float var;
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	69f9      	ldr	r1, [r7, #28]
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	18d0      	adds	r0, r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	f000 f94e 	bl	8001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001c46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	db09      	blt.n	8001c68 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x80>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001c54:	ed97 0a06 	vldr	s0, [r7, #24]
 8001c58:	f017 faa4 	bl	80191a4 <sqrtf>
 8001c5c:	eef0 7a40 	vmov.f32	s15, s0
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001c66:	e004      	b.n	8001c72 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x8a>
    }
    else
    {
      *pOut = 0.0f;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001c70:	bf00      	nop
            output_matrix->buffer[row] = std;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e7c4      	b.n	8001c12 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sqrt(std / input_matrix->cols);
#endif
        }

        return EIDSP_OK;
 8001c88:	2300      	movs	r3, #0
    }
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	fffffc14 	.word	0xfffffc14

08001c98 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    /**
     * Get the skewness value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001cb0:	e087      	b.n	8001dc2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }
        if (output_matrix->cols != 1) {
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d001      	beq.n	8001cbe <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001cbc:	e081      	b.n	8001dc2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d279      	bcs.n	8001dc0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x128>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate the mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	69f9      	ldr	r1, [r7, #28]
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	18d0      	adds	r0, r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f107 0210 	add.w	r2, r7, #16
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f00a f89b 	bl	800be22 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	69f9      	ldr	r1, [r7, #28]
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	18d0      	adds	r0, r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f107 020c 	add.w	r2, r7, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	f000 f8e6 	bl	8001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_3
            float m_3;
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	69f9      	ldr	r1, [r7, #28]
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	18d0      	adds	r0, r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d26:	f107 0208 	add.w	r2, r7, #8
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f000 f9d0 	bl	80020d4 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>

            // Calculate (variance)^(3/2)
            arm_sqrt_f32(var * var * var, &var);
 8001d34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d48:	edc7 7a06 	vstr	s15, [r7, #24]
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001d52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	db09      	blt.n	8001d74 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xdc>
      *pOut = sqrtf(in);
 8001d60:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d64:	f017 fa1e 	bl	80191a4 <sqrtf>
 8001d68:	eef0 7a40 	vmov.f32	s15, s0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001d72:	e004      	b.n	8001d7e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xe6>
      *pOut = 0.0f;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d7c:	bf00      	nop

            // Calculate skew = (m_3) / (variance)^(3/2)
            if (var == 0.0f) {
 8001d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	d108      	bne.n	8001d9e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x106>
                output_matrix->buffer[row] = 0.0f;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e00c      	b.n	8001db8 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x120>
            } else {
                output_matrix->buffer[row] = m_3 / var;
 8001d9e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001da2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db4:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e780      	b.n	8001cc2 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x2a>
                output_matrix->buffer[row] = m_3 / m_2;
            }
#endif
        }

        return EIDSP_OK;
 8001dc0:	2300      	movs	r3, #0
    }
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	fffffc14 	.word	0xfffffc14

08001dd0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    /**
     * Get the kurtosis value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d001      	beq.n	8001dea <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001de8:	e06d      	b.n	8001ec6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }
        if (output_matrix->cols != 1) {
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001df4:	e067      	b.n	8001ec6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d25f      	bcs.n	8001ec4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf4>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	18d0      	adds	r0, r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f107 0210 	add.w	r2, r7, #16
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f009 ffff 	bl	800be22 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	6979      	ldr	r1, [r7, #20]
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	18d0      	adds	r0, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f107 020c 	add.w	r2, r7, #12
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f000 f84a 	bl	8001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_4
            float m_4;
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	18d0      	adds	r0, r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e5e:	f107 0208 	add.w	r2, r7, #8
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	4619      	mov	r1, r3
 8001e68:	f000 f9ef 	bl	800224a <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>

            // Calculate Fisher kurtosis = (m_4 / variance^2) - 3
            var = var * var;
 8001e6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	edc7 7a03 	vstr	s15, [r7, #12]
            if (var == 0.0f) {
 8001e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d107      	bne.n	8001e9a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xca>
                output_matrix->buffer[row] = -3.0f;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x104>)
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e010      	b.n	8001ebc <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xec>
            } else {
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 8001e9a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e79a      	b.n	8001dfa <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x2a>
                output_matrix->buffer[row] = (m_4 / variance) - 3.0f;
            }
#endif
        }

        return EIDSP_OK;
 8001ec4:	2300      	movs	r3, #0
    }
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	fffffc14 	.word	0xfffffc14
 8001ed4:	c0400000 	.word	0xc0400000

08001ed8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 8001ed8:	b480      	push	{r7}
 8001eda:	b08b      	sub	sp, #44	; 0x2c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d804      	bhi.n	8001f04 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
            return;
 8001f02:	e0e2      	b.n	80020ca <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d02f      	beq.n	8001f70 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1d1a      	adds	r2, r3, #4
 8001f14:	61ba      	str	r2, [r7, #24]
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f22:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	1d1a      	adds	r2, r3, #4
 8001f2a:	61ba      	str	r2, [r7, #24]
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1d1a      	adds	r2, r3, #4
 8001f40:	61ba      	str	r2, [r7, #24]
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	1d1a      	adds	r2, r3, #4
 8001f56:	61ba      	str	r2, [r7, #24]
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f64:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001f6e:	e7cc      	b.n	8001f0a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00e      	beq.n	8001f9c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1d1a      	adds	r2, r3, #4
 8001f82:	61ba      	str	r2, [r7, #24]
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f90:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	3b01      	subs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8001f9a:	e7ed      	b.n	8001f78 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fae:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d057      	beq.n	8002072 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	1d1a      	adds	r2, r3, #4
 8001fc6:	61ba      	str	r2, [r7, #24]
 8001fc8:	ed93 7a00 	vldr	s14, [r3]
 8001fcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd4:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8001fd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fe0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe8:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1d1a      	adds	r2, r3, #4
 8001ff0:	61ba      	str	r2, [r7, #24]
 8001ff2:	ed93 7a00 	vldr	s14, [r3]
 8001ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002002:	edd7 7a04 	vldr	s15, [r7, #16]
 8002006:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800200a:	ed97 7a07 	vldr	s14, [r7, #28]
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1d1a      	adds	r2, r3, #4
 800201a:	61ba      	str	r2, [r7, #24]
 800201c:	ed93 7a00 	vldr	s14, [r3]
 8002020:	edd7 7a05 	vldr	s15, [r7, #20]
 8002024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002028:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800202c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002030:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002034:	ed97 7a07 	vldr	s14, [r7, #28]
 8002038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203c:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	1d1a      	adds	r2, r3, #4
 8002044:	61ba      	str	r2, [r7, #24]
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	edd7 7a05 	vldr	s15, [r7, #20]
 800204e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002052:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002056:	edd7 7a04 	vldr	s15, [r7, #16]
 800205a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800205e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	3b01      	subs	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002070:	e7a4      	b.n	8001fbc <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	2b00      	cmp	r3, #0
 800207e:	d018      	beq.n	80020b2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	61ba      	str	r2, [r7, #24]
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	edd7 7a05 	vldr	s15, [r7, #20]
 800208e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002092:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002096:	edd7 7a04 	vldr	s15, [r7, #16]
 800209a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800209e:	ed97 7a07 	vldr	s14, [r7, #28]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	3b01      	subs	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80020b0:	e7e3      	b.n	800207a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80020c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	edc3 7a00 	vstr	s15, [r3]
    }
 80020ca:	372c      	adds	r7, #44	; 0x2c
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before cubing
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	ed87 0a01 	vstr	s0, [r7, #4]
 80020e2:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d06f      	beq.n	80021d6 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x102>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1d1a      	adds	r2, r3, #4
 80020fa:	60fa      	str	r2, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002100:	ed97 7a05 	vldr	s14, [r7, #20]
 8002104:	edd7 7a01 	vldr	s15, [r7, #4]
 8002108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800210c:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002110:	edd7 7a05 	vldr	s15, [r7, #20]
 8002114:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002118:	edd7 7a05 	vldr	s15, [r7, #20]
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	ed97 7a06 	vldr	s14, [r7, #24]
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	60fa      	str	r2, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002136:	ed97 7a05 	vldr	s14, [r7, #20]
 800213a:	edd7 7a01 	vldr	s15, [r7, #4]
 800213e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002142:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002146:	edd7 7a05 	vldr	s15, [r7, #20]
 800214a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800214e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	ed97 7a06 	vldr	s14, [r7, #24]
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1d1a      	adds	r2, r3, #4
 8002166:	60fa      	str	r2, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]
            in = in - mean;
 800216c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002170:	edd7 7a01 	vldr	s15, [r7, #4]
 8002174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002178:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 800217c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002180:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002184:	edd7 7a05 	vldr	s15, [r7, #20]
 8002188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1d1a      	adds	r2, r3, #4
 800219c:	60fa      	str	r2, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80021a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80021a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ae:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80021b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80021be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80021c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ca:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 80021d4:	e78c      	b.n	80020f0 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x1c>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01e      	beq.n	8002222 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x14e>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1d1a      	adds	r2, r3, #4
 80021e8:	60fa      	str	r2, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80021ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80021f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80021f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fa:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80021fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002202:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002206:	edd7 7a05 	vldr	s15, [r7, #20]
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002216:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b01      	subs	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8002220:	e7dd      	b.n	80021de <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x10a>
        }

        sum = sum / blockSize;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800222c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002234:	edc7 7a06 	vstr	s15, [r7, #24]
        /* Store result to destination */
        *pResult = sum;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	601a      	str	r2, [r3, #0]
    }
 800223e:	bf00      	nop
 8002240:	3724      	adds	r7, #36	; 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before calculating fourth power
     * @param      pResult    The fourth central moment of the input
     */
    static void cmsis_arm_fourth_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 800224a:	b480      	push	{r7}
 800224c:	b08b      	sub	sp, #44	; 0x2c
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	ed87 0a01 	vstr	s0, [r7, #4]
 8002258:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	2b00      	cmp	r3, #0
 800226a:	d077      	beq.n	800235c <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x112>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	60fa      	str	r2, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002276:	ed97 7a07 	vldr	s14, [r7, #28]
 800227a:	edd7 7a01 	vldr	s15, [r7, #4]
 800227e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002282:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8002286:	edd7 7a07 	vldr	s15, [r7, #28]
 800228a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800228e:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002292:	edd7 7a06 	vldr	s15, [r7, #24]
 8002296:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800229a:	ed97 7a08 	vldr	s14, [r7, #32]
 800229e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a2:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1d1a      	adds	r2, r3, #4
 80022aa:	60fa      	str	r2, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80022b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80022b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022bc:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 80022c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022c8:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 80022cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80022d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022dc:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1d1a      	adds	r2, r3, #4
 80022e4:	60fa      	str	r2, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80022ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80022ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 80022fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80022fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002302:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002306:	edd7 7a06 	vldr	s15, [r7, #24]
 800230a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800230e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002316:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1d1a      	adds	r2, r3, #4
 800231e:	60fa      	str	r2, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002324:	ed97 7a07 	vldr	s14, [r7, #28]
 8002328:	edd7 7a01 	vldr	s15, [r7, #4]
 800232c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002330:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002334:	edd7 7a07 	vldr	s15, [r7, #28]
 8002338:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800233c:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002340:	edd7 7a06 	vldr	s15, [r7, #24]
 8002344:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002348:	ed97 7a08 	vldr	s14, [r7, #32]
 800234c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002350:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	3b01      	subs	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 800235a:	e784      	b.n	8002266 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x1c>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	d020      	beq.n	80023ac <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x162>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1d1a      	adds	r2, r3, #4
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002374:	ed97 7a07 	vldr	s14, [r7, #28]
 8002378:	edd7 7a01 	vldr	s15, [r7, #4]
 800237c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002380:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 8002384:	edd7 7a07 	vldr	s15, [r7, #28]
 8002388:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800238c:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002390:	edd7 7a05 	vldr	s15, [r7, #20]
 8002394:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002398:	ed97 7a08 	vldr	s14, [r7, #32]
 800239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a0:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	3b01      	subs	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80023aa:	e7db      	b.n	8002364 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x11a>
        }

        sum = sum / blockSize;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	edc7 7a08 	vstr	s15, [r7, #32]
        /* Store result to destination */
        *pResult = sum;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	601a      	str	r2, [r3, #0]
    }
 80023c8:	bf00      	nop
 80023ca:	372c      	adds	r7, #44	; 0x2c
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff f978 	bl	80016d4 <_ZNSt14_Function_baseD1Ev>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 f872 	bl	80044e2 <_ZNSt8functionIFijjPfEEC1Ev>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZN2ei11ei_signal_tD1Ev>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ffde 	bl	80023d4 <_ZNSt8functionIFijjPfEED1Ev>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
}


__attribute__((unused)) int extract_flatten_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8002424:	b5b0      	push	{r4, r5, r7, lr}
 8002426:	b0b8      	sub	sp, #224	; 0xe0
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_flatten_t config = *((ei_dsp_config_flatten_t*)config_ptr);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 800243a:	461d      	mov	r5, r3
 800243c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800243e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002440:	682b      	ldr	r3, [r5, #0]
 8002442:	6023      	str	r3, [r4, #0]

    uint32_t expected_matrix_size = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.average) expected_matrix_size += config.axes;
 800244a:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
 8002452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002456:	461a      	mov	r2, r3
 8002458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800245c:	4413      	add	r3, r2
 800245e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.minimum) expected_matrix_size += config.axes;
 8002462:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x56>
 800246a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800246e:	461a      	mov	r2, r3
 8002470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002474:	4413      	add	r3, r2
 8002476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.maximum) expected_matrix_size += config.axes;
 800247a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6e>
 8002482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002486:	461a      	mov	r2, r3
 8002488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800248c:	4413      	add	r3, r2
 800248e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.rms) expected_matrix_size += config.axes;
 8002492:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x86>
 800249a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800249e:	461a      	mov	r2, r3
 80024a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024a4:	4413      	add	r3, r2
 80024a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.stdev) expected_matrix_size += config.axes;
 80024aa:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x9e>
 80024b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024b6:	461a      	mov	r2, r3
 80024b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024bc:	4413      	add	r3, r2
 80024be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.skewness) expected_matrix_size += config.axes;
 80024c2:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb6>
 80024ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ce:	461a      	mov	r2, r3
 80024d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024d4:	4413      	add	r3, r2
 80024d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (config.kurtosis) expected_matrix_size += config.axes;
 80024da:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xce>
 80024e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024e6:	461a      	mov	r2, r3
 80024e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ec:	4413      	add	r3, r2
 80024ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    if (output_matrix->rows * output_matrix->cols != expected_matrix_size) {
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	6892      	ldr	r2, [r2, #8]
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xe6>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002506:	4cc6      	ldr	r4, [pc, #792]	; (8002820 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3fc>)
 8002508:	e184      	b.n	8002814 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3f0>
    }

    int ret;

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002512:	fbb3 f1f2 	udiv	r1, r3, r2
 8002516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800251a:	461a      	mov	r2, r3
 800251c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002520:	2300      	movs	r3, #0
 8002522:	f7ff f8fb 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8002526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x10e>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800252e:	4cbd      	ldr	r4, [pc, #756]	; (8002824 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x400>)
 8002530:	e16b      	b.n	800280a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }
    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800253c:	2100      	movs	r1, #0
 800253e:	f001 ffa2 	bl	8004486 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    ret = numpy::scale(&input_matrix, config.scale_axes);
 8002542:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002546:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800254a:	eeb0 0a67 	vmov.f32	s0, s15
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fa0a 	bl	8001968 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8002554:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if (ret != EIDSP_OK) {
 8002558:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14c>
        ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 8002560:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002564:	48b0      	ldr	r0, [pc, #704]	; (8002828 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x404>)
 8002566:	f001 fc61 	bl	8003e2c <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800256a:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800256e:	e14c      	b.n	800280a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }

    // transpose the matrix so we have one row per axis (nifty!)
    ret = numpy::transpose(&input_matrix);
 8002570:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f975 	bl	8001864 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 800257a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if (ret != EIDSP_OK) {
 800257e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x172>
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 8002586:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800258a:	48a8      	ldr	r0, [pc, #672]	; (800282c <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x408>)
 800258c:	f001 fc4e 	bl	8003e2c <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8002590:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8002594:	e139      	b.n	800280a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e6>
    }

    size_t out_matrix_ix = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    for (size_t row = 0; row < input_matrix.rows; row++) {
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80025aa:	429a      	cmp	r2, r3
 80025ac:	f080 8121 	bcs.w	80027f2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3ce>
        matrix_t row_matrix(1, input_matrix.cols, input_matrix.buffer + (row * input_matrix.cols));
 80025b0:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80025b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025bc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 80025cc:	4622      	mov	r2, r4
 80025ce:	2101      	movs	r1, #1
 80025d0:	f7ff f8a4 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>

        if (config.average) {
 80025d4:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d021      	beq.n	8002620 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 80025dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025e0:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80025e4:	2201      	movs	r2, #1
 80025e6:	2101      	movs	r1, #1
 80025e8:	f7ff f898 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::mean(&row_matrix, &out_matrix);
 80025ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fa3e 	bl	8001a78 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80025fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002608:	1c58      	adds	r0, r3, #1
 800260a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002616:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f8a9 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.minimum) {
 8002620:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8002624:	2b00      	cmp	r3, #0
 8002626:	d020      	beq.n	800266a <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x246>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002628:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800262c:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002630:	2201      	movs	r2, #1
 8002632:	2101      	movs	r1, #1
 8002634:	f7ff f872 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::min(&row_matrix, &out_matrix);
 8002638:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800263c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fa54 	bl	8001af0 <_ZN2ei5numpy3minEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002648:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002652:	1c58      	adds	r0, r3, #1
 8002654:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002660:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f884 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.maximum) {
 800266a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x290>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002672:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002676:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800267a:	2201      	movs	r2, #1
 800267c:	2101      	movs	r1, #1
 800267e:	f7ff f84d 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::max(&row_matrix, &out_matrix);
 8002682:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fa6d 	bl	8001b6c <_ZN2ei5numpy3maxEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002692:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800269c:	1c58      	adds	r0, r3, #1
 800269e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80026aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f85f 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.rms) {
 80026b4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2da>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 80026bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026c0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80026c4:	2201      	movs	r2, #1
 80026c6:	2101      	movs	r1, #1
 80026c8:	f7ff f828 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::rms(&row_matrix, &out_matrix);
 80026cc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80026d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f992 	bl	8001a00 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80026dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026e6:	1c58      	adds	r0, r3, #1
 80026e8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80026f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f83a 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.stdev) {
 80026fe:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8002702:	2b00      	cmp	r3, #0
 8002704:	d020      	beq.n	8002748 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x324>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800270a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800270e:	2201      	movs	r2, #1
 8002710:	2101      	movs	r1, #1
 8002712:	f7ff f803 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::stdev(&row_matrix, &out_matrix);
 8002716:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800271a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fa61 	bl	8001be8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002730:	1c58      	adds	r0, r3, #1
 8002732:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 800273e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f815 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.skewness) {
 8002748:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36e>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 8002750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002754:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002758:	2201      	movs	r2, #1
 800275a:	2101      	movs	r1, #1
 800275c:	f7fe ffde 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::skew(&row_matrix, &out_matrix);
 8002760:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002764:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fa94 	bl	8001c98 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800277a:	1c58      	adds	r0, r3, #1
 800277c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 8002788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fff0 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        }

        if (config.kurtosis) {
 8002792:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002796:	2b00      	cmp	r3, #0
 8002798:	d020      	beq.n	80027dc <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3b8>
            float fbuffer;
            matrix_t out_matrix(1, 1, &fbuffer);
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	f107 0010 	add.w	r0, r7, #16
 80027a2:	2201      	movs	r2, #1
 80027a4:	2101      	movs	r1, #1
 80027a6:	f7fe ffb9 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            numpy::kurtosis(&row_matrix, &out_matrix);
 80027aa:	f107 0210 	add.w	r2, r7, #16
 80027ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fb0b 	bl	8001dd0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
            output_matrix->buffer[out_matrix_ix++] = out_matrix.buffer[0];
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6819      	ldr	r1, [r3, #0]
 80027c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027c4:	1c58      	adds	r0, r3, #1
 80027c6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	601a      	str	r2, [r3, #0]
            matrix_t out_matrix(1, 1, &fbuffer);
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ffcb 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
        matrix_t row_matrix(1, input_matrix.cols, input_matrix.buffer + (row * input_matrix.cols));
 80027dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe ffc6 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
    for (size_t row = 0; row < input_matrix.rows; row++) {
 80027e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ea:	3301      	adds	r3, #1
 80027ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027f0:	e6d7      	b.n	80025a2 <_ZN12_GLOBAL__N_124extract_flatten_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x17e>
        }
    }

    // flatten again
    output_matrix->cols = output_matrix->rows * output_matrix->cols;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	6892      	ldr	r2, [r2, #8]
 80027fa:	fb03 f202 	mul.w	r2, r3, r2
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2201      	movs	r2, #1
 8002806:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 8002808:	2400      	movs	r4, #0
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800280a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe ffaf 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
}
 8002814:	4623      	mov	r3, r4
 8002816:	4618      	mov	r0, r3
 8002818:	37e0      	adds	r7, #224	; 0xe0
 800281a:	46bd      	mov	sp, r7
 800281c:	bdb0      	pop	{r4, r5, r7, pc}
 800281e:	bf00      	nop
 8002820:	fffffc14 	.word	0xfffffc14
 8002824:	fffffc16 	.word	0xfffffc16
 8002828:	0801b96c 	.word	0x0801b96c
 800282c:	0801b990 	.word	0x0801b990

08002830 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	b098      	sub	sp, #96	; 0x60
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002846:	ca07      	ldmia	r2, {r0, r1, r2}
 8002848:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	4967      	ldr	r1, [pc, #412]	; (80029ec <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fd0d 	bl	8000270 <strcmp>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8002860:	2303      	movs	r3, #3
 8002862:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800286a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002876:	2300      	movs	r3, #0
 8002878:	65bb      	str	r3, [r7, #88]	; 0x58
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002880:	429a      	cmp	r2, r3
 8002882:	f080 80ac 	bcs.w	80029de <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288c:	d803      	bhi.n	8002896 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 800288e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	e001      	b.n	800289a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 8002896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289a:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	461a      	mov	r2, r3
 80028a0:	f107 0014 	add.w	r0, r7, #20
 80028a4:	2300      	movs	r3, #0
 80028a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80028a8:	f7fe ff38 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80028b2:	4d4f      	ldr	r5, [pc, #316]	; (80029f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 80028b4:	2400      	movs	r4, #0
 80028b6:	e086      	b.n	80029c6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80028c0:	f001 fde1 	bl	8004486 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80028c4:	2300      	movs	r3, #0
 80028c6:	657b      	str	r3, [r7, #84]	; 0x54
 80028c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d275      	bcs.n	80029bc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80028e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80029f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80028f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b2db      	uxtb	r3, r3
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800290e:	eddf 6a39 	vldr	s13, [pc, #228]	; 80029f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8002912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002916:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800291a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800291c:	b2db      	uxtb	r3, r3
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002926:	eddf 6a33 	vldr	s13, [pc, #204]	; 80029f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 800292a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800292e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8002932:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002936:	2b03      	cmp	r3, #3
 8002938:	d11b      	bne.n	8002972 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002940:	1c59      	adds	r1, r3, #1
 8002942:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800294a:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002952:	1c59      	adds	r1, r3, #1
 8002954:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800295c:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002964:	1c59      	adds	r1, r3, #1
 8002966:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e020      	b.n	80029b4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8002972:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002976:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80029f8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 800297a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800297e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002982:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80029fc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 8002986:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800298a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002992:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a00 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 8002996:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800299a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a8:	1c59      	adds	r1, r3, #1
 80029aa:	65f9      	str	r1, [r7, #92]	; 0x5c
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b2:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80029b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b6:	3301      	adds	r3, #1
 80029b8:	657b      	str	r3, [r7, #84]	; 0x54
 80029ba:	e785      	b.n	80028c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
 80029c4:	2401      	movs	r4, #1
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fed1 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 80029d0:	2c01      	cmp	r4, #1
 80029d2:	d105      	bne.n	80029e0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80029d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029da:	65bb      	str	r3, [r7, #88]	; 0x58
 80029dc:	e74d      	b.n	800287a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 80029de:	2500      	movs	r5, #0
}
 80029e0:	462b      	mov	r3, r5
 80029e2:	4618      	mov	r0, r3
 80029e4:	3760      	adds	r7, #96	; 0x60
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	0801bc18 	.word	0x0801bc18
 80029f0:	fffffc16 	.word	0xfffffc16
 80029f4:	437f0000 	.word	0x437f0000
 80029f8:	3e991687 	.word	0x3e991687
 80029fc:	3f1645a2 	.word	0x3f1645a2
 8002a00:	3de978d5 	.word	0x3de978d5

08002a04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b0a6      	sub	sp, #152	; 0x98
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6178      	str	r0, [r7, #20]
 8002a0c:	6139      	str	r1, [r7, #16]
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	49ab      	ldr	r1, [pc, #684]	; (8002cd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fc22 	bl	8000270 <strcmp>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 8002a36:	2303      	movs	r3, #3
 8002a38:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8002a42:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8002a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8002a4a:	f249 6345 	movw	r3, #38469	; 0x9645
 8002a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8002a50:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8002a54:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8002a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5a:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f080 821d 	bcs.w	8002eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7c:	d803      	bhi.n	8002a86 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 8002a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	e001      	b.n	8002a8a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 8002a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8a:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f107 0018 	add.w	r0, r7, #24
 8002a94:	2300      	movs	r3, #0
 8002a96:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002a98:	f7fe fe40 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002aa2:	4d8d      	ldr	r5, [pc, #564]	; (8002cd8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 8002aa4:	2400      	movs	r4, #0
 8002aa6:	e1f5      	b.n	8002e94 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8002aa8:	6938      	ldr	r0, [r7, #16]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ab2:	f001 fce8 	bl	8004486 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002abc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	f080 81e1 	bcs.w	8002e8a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ada:	ee17 3a90 	vmov	r3, s15
 8002ade:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 8002ae0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	f040 8105 	bne.w	8002cf4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002af0:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002cdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8002af4:	eef4 7a47 	vcmp.f32	s15, s14
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d160      	bne.n	8002bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b04:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002ce0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8002b08:	eef4 7a47 	vcmp.f32	s15, s14
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	d156      	bne.n	8002bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8002b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b44:	1c59      	adds	r1, r3, #1
 8002b46:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002b4a:	4413      	add	r3, r2
 8002b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b50:	edc7 7a00 	vstr	s15, [r7]
 8002b54:	783a      	ldrb	r2, [r7, #0]
 8002b56:	b252      	sxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 8002b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b76:	1c59      	adds	r1, r3, #1
 8002b78:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002b7c:	4413      	add	r3, r2
 8002b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b82:	edc7 7a00 	vstr	s15, [r7]
 8002b86:	783a      	ldrb	r2, [r7, #0]
 8002b88:	b252      	sxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8002b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ba8:	1c59      	adds	r1, r3, #1
 8002baa:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002bae:	4413      	add	r3, r2
 8002bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb4:	edc7 7a00 	vstr	s15, [r7]
 8002bb8:	783a      	ldrb	r2, [r7, #0]
 8002bba:	b252      	sxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e15e      	b.n	8002e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8002bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bce:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002be8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8002bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c00:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c08:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002c16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c1a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c1e:	f7fe fe11 	bl	8001844 <_ZSt5roundf>
 8002c22:	eeb0 7a40 	vmov.f32	s14, s0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c38:	1c59      	adds	r1, r3, #1
 8002c3a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002c3e:	4413      	add	r3, r2
 8002c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c44:	edc7 7a00 	vstr	s15, [r7]
 8002c48:	783a      	ldrb	r2, [r7, #0]
 8002c4a:	b252      	sxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c54:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c5c:	eeb0 0a66 	vmov.f32	s0, s13
 8002c60:	f7fe fdf0 	bl	8001844 <_ZSt5roundf>
 8002c64:	eeb0 7a40 	vmov.f32	s14, s0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002c80:	4413      	add	r3, r2
 8002c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c86:	edc7 7a00 	vstr	s15, [r7]
 8002c8a:	783a      	ldrb	r2, [r7, #0]
 8002c8c:	b252      	sxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002c96:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002ca2:	f7fe fdcf 	bl	8001844 <_ZSt5roundf>
 8002ca6:	eeb0 7a40 	vmov.f32	s14, s0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cbc:	1c59      	adds	r1, r3, #1
 8002cbe:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002cc2:	4413      	add	r3, r2
 8002cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc8:	edc7 7a00 	vstr	s15, [r7]
 8002ccc:	783a      	ldrb	r2, [r7, #0]
 8002cce:	b252      	sxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e0d4      	b.n	8002e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8002cd4:	0801bc18 	.word	0x0801bc18
 8002cd8:	fffffc16 	.word	0xfffffc16
 8002cdc:	3b808081 	.word	0x3b808081
 8002ce0:	c3000000 	.word	0xc3000000
 8002ce4:	437f0000 	.word	0x437f0000
 8002ce8:	3e991687 	.word	0x3e991687
 8002cec:	3f1645a2 	.word	0x3f1645a2
 8002cf0:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002cfa:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8002cdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8002cfe:	eef4 7a47 	vcmp.f32	s15, s14
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	d15b      	bne.n	8002dc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002d0e:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8002ce0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8002d12:	eef4 7a47 	vcmp.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	d151      	bne.n	8002dc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8002d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8002d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8002d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8002d32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d34:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8002d38:	fb03 f202 	mul.w	r2, r3, r2
 8002d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d3e:	f249 6145 	movw	r1, #38469	; 0x9645
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	441a      	add	r2, r3
 8002d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4a:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8002d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d5c:	141b      	asrs	r3, r3, #16
 8002d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8002d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d7c:	ee17 3a90 	vmov	r3, s15
 8002d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8002d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d88:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8002d8c:	da04      	bge.n	8002d98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8002d8e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d96:	e006      	b.n	8002da6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8002d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9e:	dd02      	ble.n	8002da6 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8002da0:	237f      	movs	r3, #127	; 0x7f
 8002da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dae:	1c59      	adds	r1, r3, #1
 8002db0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002db4:	4413      	add	r3, r2
 8002db6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002dba:	b252      	sxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e05e      	b.n	8002e7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8002dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dce:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8002dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002de8:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e00:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8002ce4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8002e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e08:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8002e0c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e10:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8002ce8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8002e14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e1c:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8002cec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8002e20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e28:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e2c:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8002cf0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8002e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e38:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002e42:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e4a:	eeb0 0a66 	vmov.f32	s0, s13
 8002e4e:	f7fe fcf9 	bl	8001844 <_ZSt5roundf>
 8002e52:	eeb0 7a40 	vmov.f32	s14, s0
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e68:	1c59      	adds	r1, r3, #1
 8002e6a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8002e6e:	4413      	add	r3, r2
 8002e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e74:	edc7 7a00 	vstr	s15, [r7]
 8002e78:	783a      	ldrb	r2, [r7, #0]
 8002e7a:	b252      	sxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8002e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e82:	3301      	adds	r3, #1
 8002e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e88:	e618      	b.n	8002abc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8002e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e92:	2401      	movs	r4, #1
 8002e94:	f107 0318 	add.w	r3, r7, #24
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fc6a 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 8002e9e:	2c01      	cmp	r4, #1
 8002ea0:	d107      	bne.n	8002eb2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8002ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eae:	e5db      	b.n	8002a68 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8002eb0:	2500      	movs	r5, #0
}
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3798      	adds	r7, #152	; 0x98
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}

08002ebc <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fa81 	bl	80023ee <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	f000 f832 	bl	8002f76 <_ZN14SignalWithAxes8get_dataEjjPf>
 8002f12:	4603      	mov	r3, r0
        };
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d102      	bne.n	8002f38 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	e01a      	b.n	8002f6e <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6892      	ldr	r2, [r2, #8]
 8002f4c:	fb03 f202 	mul.w	r2, r3, r2
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	621a      	str	r2, [r3, #32]
        };
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f103 0210 	add.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f001 fae9 	bl	800453c <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3310      	adds	r3, #16
    }
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b08a      	sub	sp, #40	; 0x28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	68d2      	ldr	r2, [r2, #12]
 8002f92:	6992      	ldr	r2, [r2, #24]
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	68d2      	ldr	r2, [r2, #12]
 8002fa8:	6992      	ldr	r2, [r2, #24]
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	623b      	str	r3, [r7, #32]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	6a3a      	ldr	r2, [r7, #32]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d22b      	bcs.n	800301c <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d21d      	bcs.n	800300e <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	18d1      	adds	r1, r2, r3
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	627a      	str	r2, [r7, #36]	; 0x24
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f001 fa46 	bl	8004486 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002ffa:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	e00b      	b.n	800301e <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3301      	adds	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e7dc      	b.n	8002fc8 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	6a3a      	ldr	r2, [r7, #32]
 8003016:	4413      	add	r3, r2
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	e7cd      	b.n	8002fb8 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 800301c:	2300      	movs	r3, #0
    }
 800301e:	4618      	mov	r0, r3
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8003034:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6178      	str	r0, [r7, #20]
 800304c:	6139      	str	r1, [r7, #16]
 800304e:	60fa      	str	r2, [r7, #12]
 8003050:	ed87 0a02 	vstr	s0, [r7, #8]
 8003054:	edc7 0a01 	vstr	s1, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800305a:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800305e:	4618      	mov	r0, r3
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6178      	str	r0, [r7, #20]
 8003074:	6139      	str	r1, [r7, #16]
 8003076:	60fa      	str	r2, [r7, #12]
 8003078:	ed87 0a02 	vstr	s0, [r7, #8]
 800307c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003080:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800308a:	461a      	mov	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4293      	cmp	r3, r2
 8003090:	d23f      	bcs.n	8003112 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	f993 3000 	ldrsb.w	r3, [r3]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80030a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80030b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b4:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d011      	beq.n	80030e2 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4813      	ldr	r0, [pc, #76]	; (800311c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 80030d0:	f000 feac 	bl	8003e2c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80030d4:	ed97 0a06 	vldr	s0, [r7, #24]
 80030d8:	f00f fe8a 	bl	8012df0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80030dc:	4810      	ldr	r0, [pc, #64]	; (8003120 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 80030de:	f000 fea5 	bl	8003e2c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	6819      	ldr	r1, [r3, #0]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	3201      	adds	r2, #1
 80030f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3301      	adds	r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	e7b9      	b.n	8003086 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	0801bc24 	.word	0x0801bc24
 8003120:	0801bc2c 	.word	0x0801bc2c

08003124 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800313a:	461a      	mov	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	4293      	cmp	r3, r2
 8003140:	d232      	bcs.n	80031a8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	613b      	str	r3, [r7, #16]

        if (debug) {
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d011      	beq.n	8003178 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	4813      	ldr	r0, [pc, #76]	; (80031b4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 8003166:	f000 fe61 	bl	8003e2c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800316a:	ed97 0a04 	vldr	s0, [r7, #16]
 800316e:	f00f fe3f 	bl	8012df0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8003172:	4811      	ldr	r0, [pc, #68]	; (80031b8 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 8003174:	f000 fe5a 	bl	8003e2c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	3201      	adds	r2, #1
 800318c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	3301      	adds	r3, #1
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e7c6      	b.n	8003136 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	0801bc24 	.word	0x0801bc24
 80031b8:	0801bc2c 	.word	0x0801bc2c

080031bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 80031ca:	f00f fdff 	bl	8012dcc <_Z16ei_read_timer_usv>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 80031d8:	486e      	ldr	r0, [pc, #440]	; (8003394 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 80031da:	f014 fdaf 	bl	8017d3c <_Z18trained_model_initPFPvjjE>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	4619      	mov	r1, r3
 80031ec:	486a      	ldr	r0, [pc, #424]	; (8003398 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 80031ee:	f000 fe1d 	bl	8003e2c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80031f2:	f06f 0305 	mvn.w	r3, #5
 80031f6:	e0c8      	b.n	800338a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fe:	2000      	movs	r0, #0
 8003200:	4798      	blx	r3
 8003202:	4602      	mov	r2, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	2000      	movs	r0, #0
 8003210:	4798      	blx	r3
 8003212:	4602      	mov	r2, r0
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800321e:	2b01      	cmp	r3, #1
 8003220:	d115      	bne.n	800324e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 800322e:	4610      	mov	r0, r2
 8003230:	4798      	blx	r3
 8003232:	4602      	mov	r2, r0
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8003244:	4610      	mov	r0, r2
 8003246:	4798      	blx	r3
 8003248:	4602      	mov	r2, r0
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 800324e:	4b53      	ldr	r3, [pc, #332]	; (800339c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8098 	beq.w	8003388 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003264:	429a      	cmp	r2, r3
 8003266:	d005      	beq.n	8003274 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8003268:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 800326a:	4a4e      	ldr	r2, [pc, #312]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800326c:	2159      	movs	r1, #89	; 0x59
 800326e:	484e      	ldr	r0, [pc, #312]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8003270:	f017 f8b8 	bl	801a3e4 <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003280:	429a      	cmp	r2, r3
 8003282:	d005      	beq.n	8003290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 8003284:	4b49      	ldr	r3, [pc, #292]	; (80033ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 8003286:	4a47      	ldr	r2, [pc, #284]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8003288:	215a      	movs	r1, #90	; 0x5a
 800328a:	4847      	ldr	r0, [pc, #284]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800328c:	f017 f8aa 	bl	801a3e4 <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8003296:	2b01      	cmp	r3, #1
 8003298:	d11b      	bne.n	80032d2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d005      	beq.n	80032b6 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 80032ac:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80032ae:	215c      	movs	r1, #92	; 0x5c
 80032b0:	483d      	ldr	r0, [pc, #244]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80032b2:	f017 f897 	bl	801a3e4 <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d005      	beq.n	80032d2 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 80032c8:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80032ca:	215d      	movs	r1, #93	; 0x5d
 80032cc:	4836      	ldr	r0, [pc, #216]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80032ce:	f017 f889 	bl	801a3e4 <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d026      	beq.n	800332a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80032ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	d005      	beq.n	8003300 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 80032f4:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 80032f6:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80032f8:	2160      	movs	r1, #96	; 0x60
 80032fa:	482b      	ldr	r0, [pc, #172]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80032fc:	f017 f872 	bl	801a3e4 <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003314:	eeb4 7a67 	vcmp.f32	s14, s15
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	d005      	beq.n	800332a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 800331e:	4b27      	ldr	r3, [pc, #156]	; (80033bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 8003320:	4a20      	ldr	r2, [pc, #128]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8003322:	2161      	movs	r1, #97	; 0x61
 8003324:	4820      	ldr	r0, [pc, #128]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8003326:	f017 f85d 	bl	801a3e4 <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003330:	2b00      	cmp	r3, #0
 8003332:	d026      	beq.n	8003382 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	ed93 7a03 	vldr	s14, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003342:	eeb4 7a67 	vcmp.f32	s14, s15
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	d005      	beq.n	8003358 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 800334e:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8003350:	2164      	movs	r1, #100	; 0x64
 8003352:	4815      	ldr	r0, [pc, #84]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8003354:	f017 f846 	bl	801a3e4 <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800336c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	d005      	beq.n	8003382 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800337a:	2165      	movs	r1, #101	; 0x65
 800337c:	480a      	ldr	r0, [pc, #40]	; (80033a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800337e:	f017 f831 	bl	801a3e4 <__assert_func>
        }
        tflite_first_run = false;
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	080015c1 	.word	0x080015c1
 8003398:	0801bc30 	.word	0x0801bc30
 800339c:	20000044 	.word	0x20000044
 80033a0:	0801bc64 	.word	0x0801bc64
 80033a4:	0801bc98 	.word	0x0801bc98
 80033a8:	0801bd34 	.word	0x0801bd34
 80033ac:	0801bdbc 	.word	0x0801bdbc
 80033b0:	0801bdf0 	.word	0x0801bdf0
 80033b4:	0801be2c 	.word	0x0801be2c
 80033b8:	0801be68 	.word	0x0801be68
 80033bc:	0801bea0 	.word	0x0801bea0
 80033c0:	0801bee0 	.word	0x0801bee0
 80033c4:	0801bf18 	.word	0x0801bf18

080033c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80033c8:	b5b0      	push	{r4, r5, r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80033d4:	f014 ff16 	bl	8018204 <_Z20trained_model_invokev>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 80033e8:	f06f 0302 	mvn.w	r3, #2
 80033ec:	e0ea      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80033ee:	f00f fced 	bl	8012dcc <_Z16ei_read_timer_usv>
 80033f2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80033f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fe:	1a84      	subs	r4, r0, r2
 8003400:	eb61 0503 	sbc.w	r5, r1, r3
 8003404:	4622      	mov	r2, r4
 8003406:	462b      	mov	r3, r5
 8003408:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800340a:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 800340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003410:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8003414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	f7fd fc3e 	bl	8000c9c <__aeabi_ldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003426:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 800342a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8003432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003438:	4619      	mov	r1, r3
 800343a:	4864      	ldr	r0, [pc, #400]	; (80035cc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 800343c:	f000 fcf6 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d072      	beq.n	8003536 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8003456:	3b01      	subs	r3, #1
 8003458:	2b04      	cmp	r3, #4
 800345a:	d862      	bhi.n	8003522 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	080034ef 	.word	0x080034ef
 8003468:	08003479 	.word	0x08003479
 800346c:	080034fb 	.word	0x080034fb
 8003470:	0800350f 	.word	0x0800350f
 8003474:	080034fb 	.word	0x080034fb
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b09      	cmp	r3, #9
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 8003486:	7dbb      	ldrb	r3, [r7, #22]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01e      	beq.n	80034ca <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	460b      	mov	r3, r1
 80034b2:	eef0 0a47 	vmov.f32	s1, s14
 80034b6:	eeb0 0a67 	vmov.f32	s0, s15
 80034ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff fdc1 	bl	8003044 <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 80034c8:	e063      	b.n	8003592 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	460b      	mov	r3, r1
 80034de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fda0 	bl	8003026 <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80034ec:	e051      	b.n	8003592 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 80034ee:	4838      	ldr	r0, [pc, #224]	; (80035d0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 80034f0:	f000 fc9c 	bl	8003e2c <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80034f4:	f06f 0309 	mvn.w	r3, #9
 80034f8:	e064      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 8003500:	4619      	mov	r1, r3
 8003502:	4834      	ldr	r0, [pc, #208]	; (80035d4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 8003504:	f000 fc92 	bl	8003e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8003508:	f06f 0309 	mvn.w	r3, #9
 800350c:	e05a      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 8003514:	4619      	mov	r1, r3
 8003516:	4830      	ldr	r0, [pc, #192]	; (80035d8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 8003518:	f000 fc88 	bl	8003e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800351c:	f06f 0309 	mvn.w	r3, #9
 8003520:	e050      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8003528:	4619      	mov	r1, r3
 800352a:	482c      	ldr	r0, [pc, #176]	; (80035dc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 800352c:	f000 fc7e 	bl	8003e2c <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8003530:	f06f 0309 	mvn.w	r3, #9
 8003534:	e046      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b09      	cmp	r3, #9
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d018      	beq.n	800357c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003560:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003564:	eef0 0a47 	vmov.f32	s1, s14
 8003568:	eeb0 0a67 	vmov.f32	s0, s15
 800356c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff fd7c 	bl	800306c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800357a:	e00a      	b.n	8003592 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003584:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff fdcc 	bl	8003124 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 8003592:	4813      	ldr	r0, [pc, #76]	; (80035e0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 8003594:	f014 fe6c 	bl	8018270 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8003598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 80035a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80035a4:	e00e      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80035a6:	f00f fc09 	bl	8012dbc <_Z29ei_run_impulse_check_canceledv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f113 0f02 	cmn.w	r3, #2
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 80035bc:	f06f 0301 	mvn.w	r3, #1
 80035c0:	e000      	b.n	80035c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3728      	adds	r7, #40	; 0x28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}
 80035cc:	0801bf5c 	.word	0x0801bf5c
 80035d0:	0801bf7c 	.word	0x0801bf7c
 80035d4:	0801bfd4 	.word	0x0801bfd4
 80035d8:	0801c024 	.word	0x0801c024
 80035dc:	0801c074 	.word	0x0801c074
 80035e0:	08001645 	.word	0x08001645

080035e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80035e4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80035e8:	b09e      	sub	sp, #120	; 0x78
 80035ea:	af06      	add	r7, sp, #24
 80035ec:	6178      	str	r0, [r7, #20]
 80035ee:	6139      	str	r1, [r7, #16]
 80035f0:	60fa      	str	r2, [r7, #12]
 80035f2:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80035f4:	f00f fbea 	bl	8012dcc <_Z16ei_read_timer_usv>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8003600:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003604:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003608:	f107 0318 	add.w	r3, r7, #24
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f000 feea 	bl	80043e8 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8003614:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003618:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800361c:	f107 0120 	add.w	r1, r7, #32
 8003620:	f107 0318 	add.w	r3, r7, #24
 8003624:	9302      	str	r3, [sp, #8]
 8003626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4603      	mov	r3, r0
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f7ff fdc1 	bl	80031bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8003640:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8003648:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800364c:	e0c5      	b.n	80037da <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 800364e:	f107 0318 	add.w	r3, r7, #24
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ff91 	bl	800457a <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8003658:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b09      	cmp	r3, #9
 8003660:	d022      	beq.n	80036a8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 8003662:	2b09      	cmp	r3, #9
 8003664:	f300 8083 	bgt.w	800376e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8003668:	2b01      	cmp	r3, #1
 800366a:	d002      	beq.n	8003672 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 800366c:	2b03      	cmp	r3, #3
 800366e:	d051      	beq.n	8003714 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8003670:	e07d      	b.n	800376e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003672:	2300      	movs	r3, #0
 8003674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	6892      	ldr	r2, [r2, #8]
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003684:	429a      	cmp	r2, r3
 8003686:	d27b      	bcs.n	8003780 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80036a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a2:	3301      	adds	r3, #1
 80036a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036a6:	e7e6      	b.n	8003676 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80036a8:	2300      	movs	r3, #0
 80036aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d262      	bcs.n	8003784 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80036d2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80036d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036da:	eeb0 0a66 	vmov.f32	s0, s13
 80036de:	f7fe f8b1 	bl	8001844 <_ZSt5roundf>
 80036e2:	eeb0 7a40 	vmov.f32	s14, s0
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fc:	4413      	add	r3, r2
 80036fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003702:	edc7 7a01 	vstr	s15, [r7, #4]
 8003706:	793a      	ldrb	r2, [r7, #4]
 8003708:	b252      	sxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800370c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800370e:	3301      	adds	r3, #1
 8003710:	65bb      	str	r3, [r7, #88]	; 0x58
 8003712:	e7cb      	b.n	80036ac <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003714:	2300      	movs	r3, #0
 8003716:	657b      	str	r3, [r7, #84]	; 0x54
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	6892      	ldr	r2, [r2, #8]
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003726:	429a      	cmp	r2, r3
 8003728:	d221      	bcs.n	800376e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800373e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8003742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800374c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003756:	4413      	add	r3, r2
 8003758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003760:	793a      	ldrb	r2, [r7, #4]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8003766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003768:	3301      	adds	r3, #1
 800376a:	657b      	str	r3, [r7, #84]	; 0x54
 800376c:	e7d4      	b.n	8003718 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	481f      	ldr	r0, [pc, #124]	; (80037f4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 8003776:	f000 fb59 	bl	8003e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 800377a:	f06f 040c 	mvn.w	r4, #12
 800377e:	e02c      	b.n	80037da <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 8003784:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 8003786:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 800378a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800378c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800378e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	9305      	str	r3, [sp, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379a:	9303      	str	r3, [sp, #12]
 800379c:	9602      	str	r6, [sp, #8]
 800379e:	9001      	str	r0, [sp, #4]
 80037a0:	9100      	str	r1, [sp, #0]
 80037a2:	465a      	mov	r2, fp
 80037a4:	4663      	mov	r3, ip
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f7ff fe0e 	bl	80033c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80037b2:	f00f fb0b 	bl	8012dcc <_Z16ei_read_timer_usv>
 80037b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ba:	1a84      	subs	r4, r0, r2
 80037bc:	eb61 0503 	sbc.w	r5, r1, r3
 80037c0:	4622      	mov	r2, r4
 80037c2:	462b      	mov	r3, r5
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 80037ca:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80037d2:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80037d6:	e000      	b.n	80037da <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 80037d8:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80037da:	f107 0318 	add.w	r3, r7, #24
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fe17 	bl	8004412 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80037e4:	4623      	mov	r3, r4
 80037e6:	4618      	mov	r0, r3
 80037e8:	3760      	adds	r7, #96	; 0x60
 80037ea:	46bd      	mov	sp, r7
 80037ec:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80037f0:	08001645 	.word	0x08001645
 80037f4:	0801c0a8 	.word	0x0801c0a8

080037f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 80037f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037fc:	b0a1      	sub	sp, #132	; 0x84
 80037fe:	af06      	add	r7, sp, #24
 8003800:	6178      	str	r0, [r7, #20]
 8003802:	6139      	str	r1, [r7, #16]
 8003804:	60fa      	str	r2, [r7, #12]
 8003806:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380c:	2100      	movs	r1, #0
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f016 fe86 	bl	801a520 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8003814:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003818:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800381c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fde0 	bl	80043e8 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8003828:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800382c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003830:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003838:	9302      	str	r3, [sp, #8]
 800383a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800383e:	9301      	str	r3, [sp, #4]
 8003840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4603      	mov	r3, r0
 8003848:	6978      	ldr	r0, [r7, #20]
 800384a:	f7ff fcb7 	bl	80031bc <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 8003854:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 800385c:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8003860:	e0c4      	b.n	80039ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8003862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b09      	cmp	r3, #9
 8003868:	d002      	beq.n	8003870 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800386a:	f06f 0408 	mvn.w	r4, #8
 800386e:	e0bd      	b.n	80039ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8003870:	f00f faac 	bl	8012dcc <_Z16ei_read_timer_usv>
 8003874:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f107 0018 	add.w	r0, r7, #24
 8003884:	2101      	movs	r1, #1
 8003886:	f7fd ff8a 	bl	800179e <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 800388a:	4b5f      	ldr	r3, [pc, #380]	; (8003a08 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 800388c:	6899      	ldr	r1, [r3, #8]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003894:	f107 0218 	add.w	r2, r7, #24
 8003898:	eeb0 0a67 	vmov.f32	s0, s15
 800389c:	460b      	mov	r3, r1
 800389e:	6939      	ldr	r1, [r7, #16]
 80038a0:	6978      	ldr	r0, [r7, #20]
 80038a2:	f7ff f8af 	bl	8002a04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 80038a6:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 80038a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 80038ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038b0:	4856      	ldr	r0, [pc, #344]	; (8003a0c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 80038b2:	f000 fabb 	bl	8003e2c <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 80038b6:	f06f 0404 	mvn.w	r4, #4
 80038ba:	e092      	b.n	80039e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80038bc:	f00f fa7e 	bl	8012dbc <_Z29ei_run_impulse_check_canceledv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f113 0f02 	cmn.w	r3, #2
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 80038d2:	f06f 0401 	mvn.w	r4, #1
 80038d6:	e084      	b.n	80039e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80038d8:	f00f fa78 	bl	8012dcc <_Z16ei_read_timer_usv>
 80038dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038e0:	ebb0 0802 	subs.w	r8, r0, r2
 80038e4:	eb61 0903 	sbc.w	r9, r1, r3
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	68f9      	ldr	r1, [r7, #12]
 80038ee:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80038f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	f7fd f9cc 	bl	8000c9c <__aeabi_ldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 800390e:	7afb      	ldrb	r3, [r7, #11]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d02d      	beq.n	8003970 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800391a:	4619      	mov	r1, r3
 800391c:	483c      	ldr	r0, [pc, #240]	; (8003a10 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 800391e:	f000 fa85 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003922:	2300      	movs	r3, #0
 8003924:	667b      	str	r3, [r7, #100]	; 0x64
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800392a:	429a      	cmp	r2, r3
 800392c:	d21d      	bcs.n	800396a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003932:	4413      	add	r3, r2
 8003934:	f993 3000 	ldrsb.w	r3, [r3]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003954:	eeb0 0a67 	vmov.f32	s0, s15
 8003958:	f00f fa4a 	bl	8012df0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800395c:	482d      	ldr	r0, [pc, #180]	; (8003a14 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 800395e:	f000 fa65 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003964:	3301      	adds	r3, #1
 8003966:	667b      	str	r3, [r7, #100]	; 0x64
 8003968:	e7dd      	b.n	8003926 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 800396a:	482b      	ldr	r0, [pc, #172]	; (8003a18 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 800396c:	f000 fa5e 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8003970:	f00f fa2c 	bl	8012dcc <_Z16ei_read_timer_usv>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 800397c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003980:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003988:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 800398a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fdf3 	bl	800457a <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8003994:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8003996:	7afb      	ldrb	r3, [r7, #11]
 8003998:	9305      	str	r3, [sp, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	9304      	str	r3, [sp, #16]
 800399e:	9203      	str	r2, [sp, #12]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	9202      	str	r2, [sp, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	9600      	str	r6, [sp, #0]
 80039aa:	4642      	mov	r2, r8
 80039ac:	464b      	mov	r3, r9
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7ff fd0a 	bl	80033c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 80039ba:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 80039c2:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 80039c6:	e00c      	b.n	80039e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80039c8:	f00f fa00 	bl	8012dcc <_Z16ei_read_timer_usv>
 80039cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039d0:	1a84      	subs	r4, r0, r2
 80039d2:	eb61 0503 	sbc.w	r5, r1, r3
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 80039e0:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 80039e2:	f107 0318 	add.w	r3, r7, #24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd ff03 	bl	80017f2 <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80039ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fd0e 	bl	8004412 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80039f6:	4623      	mov	r3, r4
 80039f8:	4618      	mov	r0, r3
 80039fa:	376c      	adds	r7, #108	; 0x6c
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a02:	bf00      	nop
 8003a04:	08001645 	.word	0x08001645
 8003a08:	20000030 	.word	0x20000030
 8003a0c:	0801c0cc 	.word	0x0801c0cc
 8003a10:	0801c0f4 	.word	0x0801c0f4
 8003a14:	0801c108 	.word	0x0801c108
 8003a18:	0801bc2c 	.word	0x0801bc2c

08003a1c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff fdd7 	bl	80035e4 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 8003a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <run_inference+0x2c>
        return nn_res;
 8003a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a46:	e00e      	b.n	8003a66 <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003a48:	f00f f9b8 	bl	8012dbc <_Z29ei_run_impulse_check_canceledv>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f113 0f02 	cmn.w	r3, #2
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 8003a5e:	f06f 0301 	mvn.w	r3, #1
 8003a62:	e000      	b.n	8003a66 <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3310      	adds	r3, #16
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe fcc4 	bl	8002408 <_ZN2ei11ei_signal_tD1Ev>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8003a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a90:	b0a5      	sub	sp, #148	; 0x94
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	70fb      	strb	r3, [r7, #3]
 8003a9c:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f928 	bl	8003cf4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f954 	bl	8003d68 <run_classifier_image_quantized>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461e      	mov	r6, r3
 8003ac4:	e0ef      	b.n	8003ca6 <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aca:	2100      	movs	r1, #0
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f016 fd27 	bl	801a520 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8003ada:	2300      	movs	r3, #0
 8003adc:	2101      	movs	r1, #1
 8003ade:	f7fd fe1d 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8003ae2:	f00f f973 	bl	8012dcc <_Z16ei_read_timer_usv>
 8003ae6:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d27c      	bcs.n	8003bfc <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8003b18:	461d      	mov	r5, r3
 8003b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8003b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b28:	441a      	add	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d905      	bls.n	8003b3e <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8003b32:	4860      	ldr	r0, [pc, #384]	; (8003cb4 <process_impulse+0x228>)
 8003b34:	f000 f97a 	bl	8003e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8003b38:	f06f 0604 	mvn.w	r6, #4
 8003b3c:	e0ad      	b.n	8003c9a <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8003b3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003b4e:	460a      	mov	r2, r1
 8003b50:	2101      	movs	r1, #1
 8003b52:	f7fd fde3 	bl	800171c <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8003b56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b5a:	f107 0014 	add.w	r0, r7, #20
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	460b      	mov	r3, r1
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	f7ff f9a9 	bl	8002ebc <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 8003b6a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff f9d3 	bl	8002f1c <_ZN14SignalWithAxes10get_signalEv>
 8003b76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b82:	eeb0 0a67 	vmov.f32	s0, s15
 8003b86:	4619      	mov	r1, r3
 8003b88:	47a0      	blx	r4
 8003b8a:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8003b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8003b92:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003b94:	4848      	ldr	r0, [pc, #288]	; (8003cb8 <process_impulse+0x22c>)
 8003b96:	f000 f949 	bl	8003e2c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8003b9a:	f06f 0604 	mvn.w	r6, #4
 8003b9e:	2400      	movs	r4, #0
 8003ba0:	e015      	b.n	8003bce <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8003ba2:	f00f f90b 	bl	8012dbc <_Z29ei_run_impulse_check_canceledv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f113 0f02 	cmn.w	r3, #2
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8003bb8:	f06f 0601 	mvn.w	r6, #1
 8003bbc:	2400      	movs	r4, #0
 8003bbe:	e006      	b.n	8003bce <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8003bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bcc:	2401      	movs	r4, #1
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff4b 	bl	8003a6e <_ZN14SignalWithAxesD1Ev>
 8003bd8:	2c01      	cmp	r4, #1
 8003bda:	d001      	beq.n	8003be0 <process_impulse+0x154>
 8003bdc:	2400      	movs	r4, #0
 8003bde:	e000      	b.n	8003be2 <process_impulse+0x156>
 8003be0:	2401      	movs	r4, #1
 8003be2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd fdc3 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>
 8003bec:	2c01      	cmp	r4, #1
 8003bee:	d154      	bne.n	8003c9a <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8003bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bfa:	e77c      	b.n	8003af6 <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8003bfc:	f00f f8e6 	bl	8012dcc <_Z16ei_read_timer_usv>
 8003c00:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c04:	ebb0 0802 	subs.w	r8, r0, r2
 8003c08:	eb61 0903 	sbc.w	r9, r1, r3
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8003c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	f7fd f83a 	bl	8000c9c <__aeabi_ldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c3e:	4619      	mov	r1, r3
 8003c40:	481e      	ldr	r0, [pc, #120]	; (8003cbc <process_impulse+0x230>)
 8003c42:	f000 f8f3 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c4c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d210      	bcs.n	8003c74 <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8003c52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c62:	f00f f8c5 	bl	8012df0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8003c66:	4816      	ldr	r0, [pc, #88]	; (8003cc0 <process_impulse+0x234>)
 8003c68:	f000 f8e0 	bl	8003e2c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8003c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c6e:	3301      	adds	r3, #1
 8003c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c72:	e7ea      	b.n	8003c4a <process_impulse+0x1be>
        }
        ei_printf("\n");
 8003c74:	4813      	ldr	r0, [pc, #76]	; (8003cc4 <process_impulse+0x238>)
 8003c76:	f000 f8d9 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    if (debug) {
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8003c80:	4811      	ldr	r0, [pc, #68]	; (8003cc8 <process_impulse+0x23c>)
 8003c82:	f000 f8d3 	bl	8003e2c <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fec4 	bl	8003a1c <run_inference>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461e      	mov	r6, r3
 8003c98:	e000      	b.n	8003c9c <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8003c9a:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8003c9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fd fd66 	bl	8001772 <_ZN2ei9ei_matrixD1Ev>

}
 8003ca6:	4633      	mov	r3, r6
 8003ca8:	4618      	mov	r0, r3
 8003caa:	378c      	adds	r7, #140	; 0x8c
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cb2:	bf00      	nop
 8003cb4:	0801c10c 	.word	0x0801c10c
 8003cb8:	0801c0cc 	.word	0x0801c0cc
 8003cbc:	0801c0f4 	.word	0x0801c0f4
 8003cc0:	0801c108 	.word	0x0801c108
 8003cc4:	0801bc2c 	.word	0x0801bc2c
 8003cc8:	0801c138 	.word	0x0801c138

08003ccc <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a06      	ldr	r2, [pc, #24]	; (8003cf0 <ei_construct_impulse+0x24>)
 8003cd8:	4618      	mov	r0, r3
 8003cda:	4611      	mov	r1, r2
 8003cdc:	23a4      	movs	r3, #164	; 0xa4
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f016 fbf6 	bl	801a4d0 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8003ce4:	bf00      	nop
}
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	0801c1b0 	.word	0x0801c1b0

08003cf4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d00a      	beq.n	8003d1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d006      	beq.n	8003d1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	2b07      	cmp	r3, #7
 8003d12:	d002      	beq.n	8003d1a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8003d14:	f06f 0309 	mvn.w	r3, #9
 8003d18:	e01d      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d102      	bne.n	8003d2a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8003d24:	f06f 0308 	mvn.w	r3, #8
 8003d28:	e015      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d002      	beq.n	8003d3a <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8003d34:	f06f 0308 	mvn.w	r3, #8
 8003d38:	e00d      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4a06      	ldr	r2, [pc, #24]	; (8003d64 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d002      	beq.n	8003d54 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8003d4e:	f06f 0308 	mvn.w	r3, #8
 8003d52:	e000      	b.n	8003d56 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	08002831 	.word	0x08002831

08003d68 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff ffbc 	bl	8003cf4 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8003d80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <run_classifier_image_quantized+0x26>
        return verify_res;
 8003d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d8c:	e00d      	b.n	8003daa <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8003d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d92:	2100      	movs	r1, #0
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f016 fbc3 	bl	801a520 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff fd29 	bl	80037f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8003da6:	4603      	mov	r3, r0
 8003da8:	bf00      	nop

}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b0ae      	sub	sp, #184	; 0xb8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff81 	bl	8003ccc <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f107 0014 	add.w	r0, r7, #20
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	f7ff fe5a 	bl	8003a8c <process_impulse>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	37b8      	adds	r7, #184	; 0xb8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_Z6vprintPKcSt9__va_list>:
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
void vprint(const char *fmt, va_list argp)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b0b4      	sub	sp, #208	; 0xd0
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f016 ffe9 	bl	801adcc <vsiprintf>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bfcc      	ite	gt
 8003e00:	2301      	movgt	r3, #1
 8003e02:	2300      	movle	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00c      	beq.n	8003e24 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	 CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc fa38 	bl	8000284 <strlen>
 8003e14:	4603      	mov	r3, r0
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	f107 0308 	add.w	r3, r7, #8
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f014 fb4c 	bl	80184bc <CDC_Transmit_FS>
    }
}
 8003e24:	bf00      	nop
 8003e26:	37d0      	adds	r7, #208	; 0xd0
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8003e2c:	b40f      	push	{r0, r1, r2, r3}
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	6938      	ldr	r0, [r7, #16]
 8003e3e:	f7ff ffd0 	bl	8003de2 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e4c:	b004      	add	sp, #16
 8003e4e:	4770      	bx	lr

08003e50 <_Z16get_feature_datajjPf>:
using namespace ei;

static float features[EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE] = { 0.0 };

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4a06      	ldr	r2, [pc, #24]	; (8003e7c <_Z16get_feature_datajjPf+0x2c>)
 8003e62:	1899      	adds	r1, r3, r2
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f016 fb30 	bl	801a4d0 <memcpy>
    return 0;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2000039c 	.word	0x2000039c

08003e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b0ca      	sub	sp, #296	; 0x128
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e86:	f001 fac5 	bl	8005414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e8a:	f000 f919 	bl	80040c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e8e:	f000 f9e1 	bl	8004254 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8003e92:	f000 f9a3 	bl	80041dc <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8003e96:	f014 fa53 	bl	8018340 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8003e9a:	f000 f987 	bl	80041ac <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
	myAccConfigDef.dataRate = LIS3DSH_DATARATE_800;
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8003eaa:	2307      	movs	r3, #7
 8003eac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	myAccConfigDef.interruptEnable = true;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	//myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8003eb6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003eba:	4619      	mov	r1, r3
 8003ebc:	486e      	ldr	r0, [pc, #440]	; (8004078 <main+0x1f8>)
 8003ebe:	f7fd f963 	bl	8001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>

	LIS3DSH_X_calibrate(-1000.0, 980.0);
 8003ec2:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800407c <main+0x1fc>
 8003ec6:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8004080 <main+0x200>
 8003eca:	f7fd fae3 	bl	8001494 <_Z19LIS3DSH_X_calibrateff>
	LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 8003ece:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8004084 <main+0x204>
 8003ed2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004088 <main+0x208>
 8003ed6:	f7fd fb0b 	bl	80014f0 <_Z19LIS3DSH_Y_calibrateff>
	LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8003eda:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8004084 <main+0x204>
 8003ede:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 800408c <main+0x20c>
 8003ee2:	f7fd fb33 	bl	800154c <_Z19LIS3DSH_Z_calibrateff>
	signal_t signal;
 8003ee6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fa7f 	bl	80023ee <_ZN2ei11ei_signal_tC1Ev>
	  	signal.total_length = sizeof(features) / sizeof(features[0]);
 8003ef0:	f640 139c 	movw	r3, #2460	; 0x99c
 8003ef4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	  	signal.get_data = &get_feature_data;
 8003ef8:	4b65      	ldr	r3, [pc, #404]	; (8004090 <main+0x210>)
 8003efa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003efe:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8003f02:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 faf7 	bl	80044fc <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(;featuresarrayisready==false;)
 8003f0e:	4b61      	ldr	r3, [pc, #388]	; (8004094 <main+0x214>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d14e      	bne.n	8003fb4 <main+0x134>
		{
		  	if(drdyFlag==1){
 8003f16:	4b60      	ldr	r3, [pc, #384]	; (8004098 <main+0x218>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d1f7      	bne.n	8003f0e <main+0x8e>
		  		drdyFlag=0;
 8003f1e:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <main+0x218>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]
		  		myData = LIS3DSH_GetDataScaled();
 8003f24:	f7fd fa34 	bl	8001390 <_Z21LIS3DSH_GetDataScaledv>
 8003f28:	eef0 6a40 	vmov.f32	s13, s0
 8003f2c:	eeb0 7a60 	vmov.f32	s14, s1
 8003f30:	eef0 7a41 	vmov.f32	s15, s2
 8003f34:	4b59      	ldr	r3, [pc, #356]	; (800409c <main+0x21c>)
 8003f36:	edc3 6a00 	vstr	s13, [r3]
 8003f3a:	ed83 7a01 	vstr	s14, [r3, #4]
 8003f3e:	edc3 7a02 	vstr	s15, [r3, #8]
		  		  	features[3*countt]=myData.x;
 8003f42:	4b57      	ldr	r3, [pc, #348]	; (80040a0 <main+0x220>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4a53      	ldr	r2, [pc, #332]	; (800409c <main+0x21c>)
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	4954      	ldr	r1, [pc, #336]	; (80040a4 <main+0x224>)
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+1]=myData.y;
 8003f58:	4b51      	ldr	r3, [pc, #324]	; (80040a0 <main+0x220>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4413      	add	r3, r2
 8003f62:	3301      	adds	r3, #1
 8003f64:	4a4d      	ldr	r2, [pc, #308]	; (800409c <main+0x21c>)
 8003f66:	6852      	ldr	r2, [r2, #4]
 8003f68:	494e      	ldr	r1, [pc, #312]	; (80040a4 <main+0x224>)
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	601a      	str	r2, [r3, #0]
		  		  	features[3*countt+2]=myData.z;
 8003f70:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <main+0x220>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	4a47      	ldr	r2, [pc, #284]	; (800409c <main+0x21c>)
 8003f7e:	6892      	ldr	r2, [r2, #8]
 8003f80:	4948      	ldr	r1, [pc, #288]	; (80040a4 <main+0x224>)
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	601a      	str	r2, [r3, #0]
		  		  	countt++;
 8003f88:	4b45      	ldr	r3, [pc, #276]	; (80040a0 <main+0x220>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a44      	ldr	r2, [pc, #272]	; (80040a0 <main+0x220>)
 8003f90:	6013      	str	r3, [r2, #0]
			//CDC_Transmit_FS((uint8_t*)features, strlen(features));
			//HAL_Delay(5000);
			  if(countt==EI_CLASSIFIER_RAW_SAMPLE_COUNT){
 8003f92:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <main+0x220>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003f9a:	d105      	bne.n	8003fa8 <main+0x128>
						countt=0;
 8003f9c:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <main+0x220>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
						featuresarrayisready=true;
 8003fa2:	4b3c      	ldr	r3, [pc, #240]	; (8004094 <main+0x214>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
					}
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003fa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fac:	483e      	ldr	r0, [pc, #248]	; (80040a8 <main+0x228>)
 8003fae:	f001 fdaa 	bl	8005b06 <HAL_GPIO_TogglePin>
	  for(;featuresarrayisready==false;)
 8003fb2:	e7ac      	b.n	8003f0e <main+0x8e>

		  	}

		}
	  ei_impulse_result_t result = { 0 };
 8003fb4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003fb8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f016 faab 	bl	801a520 <memset>
	  	      EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8003fca:	4639      	mov	r1, r7
 8003fcc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff feed 	bl	8003db2 <run_classifier>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	  	      ei_printf("run_classifier returned: %d\n", res);
 8003fde:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4831      	ldr	r0, [pc, #196]	; (80040ac <main+0x22c>)
 8003fe6:	f7ff ff21 	bl	8003e2c <_Z9ei_printfPKcz>

	  	      ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8003fea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003fee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ff2:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003ff6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003ffa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ffe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004002:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004006:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800400a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800400e:	4828      	ldr	r0, [pc, #160]	; (80040b0 <main+0x230>)
 8004010:	f7ff ff0c 	bl	8003e2c <_Z9ei_printfPKcz>
	  	          result.timing.dsp, result.timing.classification, result.timing.anomaly);

	  	      // print the predictions
	  	      ei_printf("[");
 8004014:	4827      	ldr	r0, [pc, #156]	; (80040b4 <main+0x234>)
 8004016:	f7ff ff09 	bl	8003e2c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004020:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004024:	2b01      	cmp	r3, #1
 8004026:	d81c      	bhi.n	8004062 <main+0x1e2>
	  	    	  ei_printf_float(result.classification[ix].value);
 8004028:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800402c:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8004030:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004034:	3301      	adds	r3, #1
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	3304      	adds	r3, #4
 800403c:	edd3 7a00 	vldr	s15, [r3]
 8004040:	eeb0 0a67 	vmov.f32	s0, s15
 8004044:	f00e fed4 	bl	8012df0 <_Z15ei_printf_floatf>
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	          ei_printf(", ");
	  	  #else
	  	          if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8004048:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800404c:	2b01      	cmp	r3, #1
 800404e:	d002      	beq.n	8004056 <main+0x1d6>
	  	              ei_printf(", ");
 8004050:	4819      	ldr	r0, [pc, #100]	; (80040b8 <main+0x238>)
 8004052:	f7ff feeb 	bl	8003e2c <_Z9ei_printfPKcz>
	  	      for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004056:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800405a:	3301      	adds	r3, #1
 800405c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004060:	e7de      	b.n	8004020 <main+0x1a0>
	  	  #endif
	  	      }
	  	  #if EI_CLASSIFIER_HAS_ANOMALY == 1
	  	      ei_printf_float(result.anomaly);
	  	  #endif
	  	      ei_printf("]\n\n\n");
 8004062:	4816      	ldr	r0, [pc, #88]	; (80040bc <main+0x23c>)
 8004064:	f7ff fee2 	bl	8003e2c <_Z9ei_printfPKcz>


	  //memset(features, 0.0, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
	  HAL_Delay(1500);
 8004068:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800406c:	f001 fa44 	bl	80054f8 <HAL_Delay>
	  featuresarrayisready=false;
 8004070:	4b08      	ldr	r3, [pc, #32]	; (8004094 <main+0x214>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]

  }
 8004076:	e74a      	b.n	8003f0e <main+0x8e>
 8004078:	20000344 	.word	0x20000344
 800407c:	44750000 	.word	0x44750000
 8004080:	c47a0000 	.word	0xc47a0000
 8004084:	44820000 	.word	0x44820000
 8004088:	c47f0000 	.word	0xc47f0000
 800408c:	c4660000 	.word	0xc4660000
 8004090:	08003e51 	.word	0x08003e51
 8004094:	20002a19 	.word	0x20002a19
 8004098:	20002a18 	.word	0x20002a18
 800409c:	20002a0c 	.word	0x20002a0c
 80040a0:	20002a1c 	.word	0x20002a1c
 80040a4:	2000039c 	.word	0x2000039c
 80040a8:	40020c00 	.word	0x40020c00
 80040ac:	0801c280 	.word	0x0801c280
 80040b0:	0801c2a0 	.word	0x0801c2a0
 80040b4:	0801c2e8 	.word	0x0801c2e8
 80040b8:	0801c2ec 	.word	0x0801c2ec
 80040bc:	0801c2f0 	.word	0x0801c2f0

080040c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b094      	sub	sp, #80	; 0x50
 80040c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	2230      	movs	r2, #48	; 0x30
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f016 fa26 	bl	801a520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	2300      	movs	r3, #0
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <_Z18SystemClock_Configv+0xe4>)
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <_Z18SystemClock_Configv+0xe4>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6413      	str	r3, [r2, #64]	; 0x40
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <_Z18SystemClock_Configv+0xe4>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004100:	2300      	movs	r3, #0
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <_Z18SystemClock_Configv+0xe8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <_Z18SystemClock_Configv+0xe8>)
 800410a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <_Z18SystemClock_Configv+0xe8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800411c:	2303      	movs	r3, #3
 800411e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004126:	2301      	movs	r3, #1
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800412a:	2310      	movs	r3, #16
 800412c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800412e:	2302      	movs	r3, #2
 8004130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004138:	2304      	movs	r3, #4
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800413c:	2348      	movs	r3, #72	; 0x48
 800413e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004140:	2302      	movs	r3, #2
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004144:	2303      	movs	r3, #3
 8004146:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004148:	f107 0320 	add.w	r3, r7, #32
 800414c:	4618      	mov	r0, r3
 800414e:	f002 ff8b 	bl	8007068 <HAL_RCC_OscConfig>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8004162:	f000 f92d 	bl	80043c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004166:	230f      	movs	r3, #15
 8004168:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800417a:	f107 030c 	add.w	r3, r7, #12
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f003 f9e9 	bl	8007558 <HAL_RCC_ClockConfig>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8004196:	f000 f913 	bl	80043c0 <Error_Handler>
  }
}
 800419a:	bf00      	nop
 800419c:	3750      	adds	r7, #80	; 0x50
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40007000 	.word	0x40007000

080041ac <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <_ZL11MX_CRC_Initv+0x28>)
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <_ZL11MX_CRC_Initv+0x2c>)
 80041b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80041b6:	4807      	ldr	r0, [pc, #28]	; (80041d4 <_ZL11MX_CRC_Initv+0x28>)
 80041b8:	f001 fad3 	bl	8005762 <HAL_CRC_Init>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf14      	ite	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	2300      	moveq	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80041cc:	f000 f8f8 	bl	80043c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	2000033c 	.word	0x2000033c
 80041d8:	40023000 	.word	0x40023000

080041dc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <_ZL12MX_SPI1_Initv+0x74>)
 80041e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041e6:	4b19      	ldr	r3, [pc, #100]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 80041e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041f4:	4b15      	ldr	r3, [pc, #84]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041fa:	4b14      	ldr	r3, [pc, #80]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 8004202:	2200      	movs	r2, #0
 8004204:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 8004208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 8004210:	2210      	movs	r2, #16
 8004212:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 8004216:	2200      	movs	r2, #0
 8004218:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 800421c:	2200      	movs	r2, #0
 800421e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 8004222:	2200      	movs	r2, #0
 8004224:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 8004228:	220a      	movs	r2, #10
 800422a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800422c:	4807      	ldr	r0, [pc, #28]	; (800424c <_ZL12MX_SPI1_Initv+0x70>)
 800422e:	f003 fb8b 	bl	8007948 <HAL_SPI_Init>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8004242:	f000 f8bd 	bl	80043c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000344 	.word	0x20000344
 8004250:	40013000 	.word	0x40013000

08004254 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08a      	sub	sp, #40	; 0x28
 8004258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800425a:	f107 0314 	add.w	r3, r7, #20
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	60da      	str	r2, [r3, #12]
 8004268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	4b48      	ldr	r3, [pc, #288]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	4a47      	ldr	r2, [pc, #284]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 8004274:	f043 0310 	orr.w	r3, r3, #16
 8004278:	6313      	str	r3, [r2, #48]	; 0x30
 800427a:	4b45      	ldr	r3, [pc, #276]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	4b41      	ldr	r3, [pc, #260]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	4a40      	ldr	r2, [pc, #256]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 8004290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004294:	6313      	str	r3, [r2, #48]	; 0x30
 8004296:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	4a39      	ldr	r2, [pc, #228]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6313      	str	r3, [r2, #48]	; 0x30
 80042b2:	4b37      	ldr	r3, [pc, #220]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	4b33      	ldr	r3, [pc, #204]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	4a32      	ldr	r2, [pc, #200]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	6313      	str	r3, [r2, #48]	; 0x30
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <_ZL12MX_GPIO_Initv+0x13c>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 80042f6:	2200      	movs	r2, #0
 80042f8:	2108      	movs	r1, #8
 80042fa:	4826      	ldr	r0, [pc, #152]	; (8004394 <_ZL12MX_GPIO_Initv+0x140>)
 80042fc:	f001 fbea 	bl	8005ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004300:	2200      	movs	r2, #0
 8004302:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8004306:	4824      	ldr	r0, [pc, #144]	; (8004398 <_ZL12MX_GPIO_Initv+0x144>)
 8004308:	f001 fbe4 	bl	8005ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 800430c:	2308      	movs	r3, #8
 800430e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004310:	2301      	movs	r3, #1
 8004312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004314:	2300      	movs	r3, #0
 8004316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004318:	2300      	movs	r3, #0
 800431a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 800431c:	f107 0314 	add.w	r3, r7, #20
 8004320:	4619      	mov	r1, r3
 8004322:	481c      	ldr	r0, [pc, #112]	; (8004394 <_ZL12MX_GPIO_Initv+0x140>)
 8004324:	f001 fa3a 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004328:	2301      	movs	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004334:	f107 0314 	add.w	r3, r7, #20
 8004338:	4619      	mov	r1, r3
 800433a:	4818      	ldr	r0, [pc, #96]	; (800439c <_ZL12MX_GPIO_Initv+0x148>)
 800433c:	f001 fa2e 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004340:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004346:	2301      	movs	r3, #1
 8004348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434e:	2300      	movs	r3, #0
 8004350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004352:	f107 0314 	add.w	r3, r7, #20
 8004356:	4619      	mov	r1, r3
 8004358:	480f      	ldr	r0, [pc, #60]	; (8004398 <_ZL12MX_GPIO_Initv+0x144>)
 800435a:	f001 fa1f 	bl	800579c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800435e:	2301      	movs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004362:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	4619      	mov	r1, r3
 8004372:	4808      	ldr	r0, [pc, #32]	; (8004394 <_ZL12MX_GPIO_Initv+0x140>)
 8004374:	f001 fa12 	bl	800579c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004378:	2200      	movs	r2, #0
 800437a:	2100      	movs	r1, #0
 800437c:	2006      	movs	r0, #6
 800437e:	f001 f9ba 	bl	80056f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004382:	2006      	movs	r0, #6
 8004384:	f001 f9d3 	bl	800572e <HAL_NVIC_EnableIRQ>

}
 8004388:	bf00      	nop
 800438a:	3728      	adds	r7, #40	; 0x28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40023800 	.word	0x40023800
 8004394:	40021000 	.word	0x40021000
 8004398:	40020c00 	.word	0x40020c00
 800439c:	40020000 	.word	0x40020000

080043a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
 /* if(GPIO_Pin==GPIO_PIN_0){
  	  if(HAL_GPIO_ReadPin( GPIOA,GPIO_PIN_0)){*/
  drdyFlag = 1;
 80043aa:	4b04      	ldr	r3, [pc, #16]	; (80043bc <HAL_GPIO_EXTI_Callback+0x1c>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
  		CDC_Transmit_FS("\n", strlen("\n"));
  		  }
  	  }
  }*/

}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	20002a18 	.word	0x20002a18

080043c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80043c4:	e7fe      	b.n	80043c4 <Error_Handler+0x4>

080043c6 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f907 	bl	80045ec <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 80043f4:	68fc      	ldr	r4, [r7, #12]
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8ed 	bl	80045d6 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	4620      	mov	r0, r4
 8004404:	f7ff ffdf 	bl	80043c6 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bd90      	pop	{r4, r7, pc}

08004412 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8004412:	b590      	push	{r4, r7, lr}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f8fb 	bl	8004618 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8004422:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f900 	bl	8004632 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8004432:	4603      	mov	r3, r0
 8004434:	681c      	ldr	r4, [r3, #0]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f908 	bl	800464c <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 800443c:	4603      	mov	r3, r0
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	47a0      	blx	r4
	__ptr = pointer();
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
      }
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	bd90      	pop	{r4, r7, pc}

08004454 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	ed93 7a00 	vldr	s14, [r3]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800446e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004472:	d501      	bpl.n	8004478 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	e000      	b.n	800447a <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8004478:	687b      	ldr	r3, [r7, #4]
    }
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8004486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd f92e 	bl	80016fa <_ZNKSt14_Function_base8_M_emptyEv>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 80044a4:	f7fd f9bb 	bl	800181e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68dc      	ldr	r4, [r3, #12]
 80044ac:	68fd      	ldr	r5, [r7, #12]
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f8d5 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80044b8:	4606      	mov	r6, r0
 80044ba:	1d3b      	adds	r3, r7, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f8d0 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80044c2:	4680      	mov	r8, r0
 80044c4:	463b      	mov	r3, r7
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f8d6 	bl	8004678 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4642      	mov	r2, r8
 80044d0:	4631      	mov	r1, r6
 80044d2:	4628      	mov	r0, r5
 80044d4:	47a0      	blx	r4
 80044d6:	4603      	mov	r3, r0
    }
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080044e2 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fd f8e3 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8004506:	6838      	ldr	r0, [r7, #0]
 8004508:	f000 f8c1 	bl	800468e <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800450c:	4603      	mov	r3, r0
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	f107 0308 	add.w	r3, r7, #8
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f8c4 	bl	80046a4 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 800451c:	f107 0308 	add.w	r3, r7, #8
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f836 	bl	8004594 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	4618      	mov	r0, r3
 800452e:	f7fd ff51 	bl	80023d4 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8004532:	687b      	ldr	r3, [r7, #4]
	}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8004546:	6838      	ldr	r0, [r7, #0]
 8004548:	f000 f8d6 	bl	80046f8 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800454c:	4602      	mov	r2, r0
 800454e:	f107 0308 	add.w	r3, r7, #8
 8004552:	6811      	ldr	r1, [r2, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 f8db 	bl	8004710 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f817 	bl	8004594 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	4618      	mov	r0, r3
 800456c:	f7fd ff32 	bl	80023d4 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8004570:	687b      	ldr	r3, [r7, #4]
	}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f8ed 	bl	8004764 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800458a:	4603      	mov	r3, r0
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f8f6 	bl	8004796 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f103 0208 	add.w	r2, r3, #8
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f000 f91f 	bl	80047fa <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f103 020c 	add.w	r2, r3, #12
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f000 f940 	bl	800484e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80045f8:	68fc      	ldr	r4, [r7, #12]
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f946 	bl	800488c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004600:	4602      	mov	r2, r0
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	4619      	mov	r1, r3
 8004608:	4620      	mov	r0, r4
 800460a:	f000 f94a 	bl	80048a2 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	bd90      	pop	{r4, r7, pc}

08004618 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f956 	bl	80048d4 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8004628:	4603      	mov	r3, r0
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f956 	bl	80048ee <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8004642:	4603      	mov	r3, r0
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fd f801 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 f925 	bl	8004908 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00f      	beq.n	80046e4 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80046c4:	687c      	ldr	r4, [r7, #4]
 80046c6:	463b      	mov	r3, r7
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f92d 	bl	8004928 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4619      	mov	r1, r3
 80046d2:	4620      	mov	r0, r4
 80046d4:	f000 f933 	bl	800493e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 80046dc:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 80046e2:	609a      	str	r2, [r3, #8]
      }
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd90      	pop	{r4, r7, pc}
 80046ee:	bf00      	nop
 80046f0:	08004963 	.word	0x08004963
 80046f4:	080049a5 	.word	0x080049a5

080046f8 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4618      	mov	r0, r3
 800471e:	f7fc ffcb 	bl	80016b8 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8004722:	463b      	mov	r3, r7
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f95c 	bl	80049e2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00f      	beq.n	8004750 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8004730:	687c      	ldr	r4, [r7, #4]
 8004732:	463b      	mov	r3, r7
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f95f 	bl	80049f8 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 800473a:	4603      	mov	r3, r0
 800473c:	4619      	mov	r1, r3
 800473e:	4620      	mov	r0, r4
 8004740:	f000 f965 	bl	8004a0e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a05      	ldr	r2, [pc, #20]	; (800475c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8004748:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a04      	ldr	r2, [pc, #16]	; (8004760 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 800474e:	609a      	str	r2, [r3, #8]
      }
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}
 800475a:	bf00      	nop
 800475c:	08004a33 	.word	0x08004a33
 8004760:	08004a75 	.word	0x08004a75

08004764 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f99f 	bl	8004ab2 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8004774:	4603      	mov	r3, r0
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ffed 	bl	8004780 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80047a6:	4602      	mov	r2, r0
 80047a8:	f107 0308 	add.w	r3, r7, #8
 80047ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047b0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80047b4:	6838      	ldr	r0, [r7, #0]
 80047b6:	f7ff ffe3 	bl	8004780 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80047ba:	4602      	mov	r2, r0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047c2:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80047c6:	f107 0308 	add.w	r3, r7, #8
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ffd8 	bl	8004780 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80047d0:	4602      	mov	r2, r0
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047d8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ffed 	bl	80047e4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800480a:	4603      	mov	r3, r0
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004810:	6838      	ldr	r0, [r7, #0]
 8004812:	f7ff ffe7 	bl	80047e4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004816:	4603      	mov	r3, r0
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800481e:	f107 030c 	add.w	r3, r7, #12
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff ffde 	bl	80047e4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004828:	4603      	mov	r3, r0
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	601a      	str	r2, [r3, #0]
    }
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ffed 	bl	8004838 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800485e:	4603      	mov	r3, r0
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004864:	6838      	ldr	r0, [r7, #0]
 8004866:	f7ff ffe7 	bl	8004838 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800486a:	4603      	mov	r3, r0
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff ffde 	bl	8004838 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800487c:	4603      	mov	r3, r0
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	601a      	str	r2, [r3, #0]
    }
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 80048a2:	b5b0      	push	{r4, r5, r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80048ae:	68fc      	ldr	r4, [r7, #12]
 80048b0:	68b8      	ldr	r0, [r7, #8]
 80048b2:	f000 f90b 	bl	8004acc <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 80048b6:	4605      	mov	r5, r0
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ffe7 	bl	800488c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80048be:	4603      	mov	r3, r0
 80048c0:	461a      	mov	r2, r3
 80048c2:	4629      	mov	r1, r5
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 f90c 	bl	8004ae2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bdb0      	pop	{r4, r5, r7, pc}

080048d4 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f91d 	bl	8004b1e <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80048e4:	4603      	mov	r3, r0
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 f91c 	bl	8004b36 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80048fe:	4603      	mov	r3, r0
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800493e:	b590      	push	{r4, r7, lr}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8004948:	6838      	ldr	r0, [r7, #0]
 800494a:	f7ff ffed 	bl	8004928 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800494e:	4603      	mov	r3, r0
 8004950:	4622      	mov	r2, r4
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f8fb 	bl	8004b50 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bd90      	pop	{r4, r7, pc}

08004962 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f906 	bl	8004b82 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004976:	4604      	mov	r4, r0
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f7ff fe72 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800497e:	4605      	mov	r5, r0
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fe6e 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004986:	4606      	mov	r6, r0
 8004988:	6838      	ldr	r0, [r7, #0]
 800498a:	f7ff fe75 	bl	8004678 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800498e:	4603      	mov	r3, r0
 8004990:	4632      	mov	r2, r6
 8004992:	4629      	mov	r1, r5
 8004994:	4620      	mov	r0, r4
 8004996:	f000 f905 	bl	8004ba4 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800499a:	4603      	mov	r3, r0
      }
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049a4 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80049a4:	b590      	push	{r4, r7, lr}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	4613      	mov	r3, r2
 80049b0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d109      	bne.n	80049cc <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f918 	bl	8004bee <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80049be:	4604      	mov	r4, r0
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f000 f8de 	bl	8004b82 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80049c6:	4603      	mov	r3, r0
 80049c8:	6023      	str	r3, [r4, #0]
	    break;
 80049ca:	e005      	b.n	80049d8 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	461a      	mov	r2, r3
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f917 	bl	8004c06 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80049d8:	2300      	movs	r3, #0
      }
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd90      	pop	{r4, r7, pc}

080049e2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
	  { return true; }
 80049ea:	2301      	movs	r3, #1
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8004a0e:	b590      	push	{r4, r7, lr}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8004a18:	6838      	ldr	r0, [r7, #0]
 8004a1a:	f7ff ffed 	bl	80049f8 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4622      	mov	r2, r4
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f919 	bl	8004c5c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd90      	pop	{r4, r7, pc}

08004a32 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8004a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f924 	bl	8004c8e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004a46:	4604      	mov	r4, r0
 8004a48:	68b8      	ldr	r0, [r7, #8]
 8004a4a:	f7ff fe0a 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a4e:	4605      	mov	r5, r0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff fe06 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004a56:	4606      	mov	r6, r0
 8004a58:	6838      	ldr	r0, [r7, #0]
 8004a5a:	f7ff fe0d 	bl	8004678 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4632      	mov	r2, r6
 8004a62:	4629      	mov	r1, r5
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 f923 	bl	8004cb0 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8004a6a:	4603      	mov	r3, r0
      }
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a74 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d109      	bne.n	8004a9c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f936 	bl	8004cfa <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8004a8e:	4604      	mov	r4, r0
 8004a90:	68b8      	ldr	r0, [r7, #8]
 8004a92:	f000 f8fc 	bl	8004c8e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004a96:	4603      	mov	r3, r0
 8004a98:	6023      	str	r3, [r4, #0]
	    break;
 8004a9a:	e005      	b.n	8004aa8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f935 	bl	8004d12 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8004aa8:	2300      	movs	r3, #0
      }
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd90      	pop	{r4, r7, pc}

08004ab2 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f953 	bl	8004d68 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004ae2:	b590      	push	{r4, r7, lr}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004aee:	68fc      	ldr	r4, [r7, #12]
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff fecb 	bl	800488c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004af6:	4603      	mov	r3, r0
 8004af8:	4619      	mov	r1, r3
 8004afa:	4620      	mov	r0, r4
 8004afc:	f000 f940 	bl	8004d80 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1d1c      	adds	r4, r3, #4
 8004b04:	68b8      	ldr	r0, [r7, #8]
 8004b06:	f7ff ffe1 	bl	8004acc <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f000 f949 	bl	8004da6 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd90      	pop	{r4, r7, pc}

08004b1e <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f94e 	bl	8004dc8 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 f94f 	bl	8004de4 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8004b46:	4603      	mov	r3, r0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8004b5c:	68b8      	ldr	r0, [r7, #8]
 8004b5e:	f7ff fee3 	bl	8004928 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8004b62:	4603      	mov	r3, r0
 8004b64:	681c      	ldr	r4, [r3, #0]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7fc fd90 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4619      	mov	r1, r3
 8004b70:	2004      	movs	r0, #4
 8004b72:	f7fc fd19 	bl	80015a8 <_ZnwjPv>
 8004b76:	4603      	mov	r3, r0
 8004b78:	601c      	str	r4, [r3, #0]
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd90      	pop	{r4, r7, pc}

08004b82 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f936 	bl	8004dfc <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004b90:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f93e 	bl	8004e14 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	bf00      	nop
	}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af02      	add	r7, sp, #8
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f938 	bl	8004e2a <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	68b8      	ldr	r0, [r7, #8]
 8004bbe:	f7ff fd50 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fd4c 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004bca:	4606      	mov	r6, r0
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	f7ff fd53 	bl	8004678 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4633      	mov	r3, r6
 8004bd8:	462a      	mov	r2, r5
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4640      	mov	r0, r8
 8004bde:	f000 f92f 	bl	8004e40 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 8004be2:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bee <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc fd48 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004c06:	b5b0      	push	{r4, r5, r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	4613      	mov	r3, r2
 8004c12:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d016      	beq.n	8004c48 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	dc19      	bgt.n	8004c52 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d002      	beq.n	8004c28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d00a      	beq.n	8004c3c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8004c26:	e014      	b.n	8004c52 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff ffe0 	bl	8004bee <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8004c2e:	4604      	mov	r4, r0
 8004c30:	68b8      	ldr	r0, [r7, #8]
 8004c32:	f7ff ffa6 	bl	8004b82 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8004c36:	4603      	mov	r3, r0
 8004c38:	6023      	str	r3, [r4, #0]
	      break;
 8004c3a:	e00a      	b.n	8004c52 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8004c3c:	462a      	mov	r2, r5
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f921 	bl	8004e88 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8004c46:	e004      	b.n	8004c52 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8004c48:	4621      	mov	r1, r4
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f935 	bl	8004eba <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004c50:	bf00      	nop
	  return false;
 8004c52:	2300      	movs	r3, #0
	}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bdb0      	pop	{r4, r5, r7, pc}

08004c5c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8004c68:	68b8      	ldr	r0, [r7, #8]
 8004c6a:	f7ff fec5 	bl	80049f8 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8004c6e:	4604      	mov	r4, r0
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7fc fd0b 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4619      	mov	r1, r3
 8004c7a:	2004      	movs	r0, #4
 8004c7c:	f7fc fc94 	bl	80015a8 <_ZnwjPv>
 8004c80:	4602      	mov	r2, r0
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd90      	pop	{r4, r7, pc}

08004c8e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f91b 	bl	8004ed2 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004c9c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f923 	bl	8004eea <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	bf00      	nop
	}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8004cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af02      	add	r7, sp, #8
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f91d 	bl	8004f00 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	68b8      	ldr	r0, [r7, #8]
 8004cca:	f7ff fcca 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004cce:	4605      	mov	r5, r0
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff fcc6 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	f7ff fccd 	bl	8004678 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	4633      	mov	r3, r6
 8004ce4:	462a      	mov	r2, r5
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4640      	mov	r0, r8
 8004cea:	f000 f914 	bl	8004f16 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 8004cee:	4603      	mov	r3, r0
    }
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004cfa <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fc fcc2 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8004d12:	b5b0      	push	{r4, r5, r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d016      	beq.n	8004d54 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	dc19      	bgt.n	8004d5e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d002      	beq.n	8004d34 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d00a      	beq.n	8004d48 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8004d32:	e014      	b.n	8004d5e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff ffe0 	bl	8004cfa <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	68b8      	ldr	r0, [r7, #8]
 8004d3e:	f7ff ffa6 	bl	8004c8e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8004d42:	4603      	mov	r3, r0
 8004d44:	6023      	str	r3, [r4, #0]
	      break;
 8004d46:	e00a      	b.n	8004d5e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8004d48:	462a      	mov	r2, r5
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f906 	bl	8004f5e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8004d52:	e004      	b.n	8004d5e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8004d54:	4621      	mov	r1, r4
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f91a 	bl	8004f90 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8004d5c:	bf00      	nop
	  return false;
 8004d5e:	2300      	movs	r3, #0
	}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bdb0      	pop	{r4, r5, r7, pc}

08004d68 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f919 	bl	8004fa8 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004d8a:	687c      	ldr	r4, [r7, #4]
 8004d8c:	6838      	ldr	r0, [r7, #0]
 8004d8e:	f7ff fd7d 	bl	800488c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4619      	mov	r1, r3
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 f914 	bl	8004fc4 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd90      	pop	{r4, r7, pc}

08004da6 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004db0:	6838      	ldr	r0, [r7, #0]
 8004db2:	f7ff fe8b 	bl	8004acc <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8004db6:	4603      	mov	r3, r0
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f906 	bl	8004fe6 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f905 	bl	8004ffc <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fc fc4c 	bl	80016a2 <_ZNKSt9_Any_data9_M_accessEv>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	7338      	strb	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f7ff ffeb 	bl	8004e2a <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e54:	4603      	mov	r3, r0
 8004e56:	681c      	ldr	r4, [r3, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff fc02 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	681d      	ldr	r5, [r3, #0]
 8004e62:	6838      	ldr	r0, [r7, #0]
 8004e64:	f7ff fbfd 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	681e      	ldr	r6, [r3, #0]
 8004e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e6e:	f7ff fc03 	bl	8004678 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004e72:	4603      	mov	r3, r0
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47a0      	blx	r4
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e88 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004e94:	68b8      	ldr	r0, [r7, #8]
 8004e96:	f7ff ffb1 	bl	8004dfc <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	681c      	ldr	r4, [r3, #0]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7fc fbf4 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	2004      	movs	r0, #4
 8004eaa:	f7fc fb7d 	bl	80015a8 <_ZnwjPv>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	601c      	str	r4, [r3, #0]
	}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd90      	pop	{r4, r7, pc}

08004eba <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f8a6 	bl	8005016 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc fbe1 	bl	80016a2 <_ZNKSt9_Any_data9_M_accessEv>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	7338      	strb	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004f24:	68b8      	ldr	r0, [r7, #8]
 8004f26:	f7ff ffeb 	bl	8004f00 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fb98 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004f32:	4603      	mov	r3, r0
 8004f34:	681c      	ldr	r4, [r3, #0]
 8004f36:	6838      	ldr	r0, [r7, #0]
 8004f38:	f7ff fb93 	bl	8004662 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	681d      	ldr	r5, [r3, #0]
 8004f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f42:	f7ff fb99 	bl	8004678 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004f46:	4603      	mov	r3, r0
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	462a      	mov	r2, r5
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7fd ffd1 	bl	8002ef6 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8004f54:	4603      	mov	r3, r0
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f5e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004f5e:	b590      	push	{r4, r7, lr}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004f6a:	68b8      	ldr	r0, [r7, #8]
 8004f6c:	f7ff ffb1 	bl	8004ed2 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8004f70:	4604      	mov	r4, r0
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7fc fb8a 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	2004      	movs	r0, #4
 8004f7e:	f7fc fb13 	bl	80015a8 <_ZnwjPv>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	6013      	str	r3, [r2, #0]
	}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd90      	pop	{r4, r7, pc}

08004f90 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f847 	bl	800502e <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 f846 	bl	8005046 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004fce:	6838      	ldr	r0, [r7, #0]
 8004fd0:	f7ff fc5c 	bl	800488c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f828 	bl	800505c <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800500c:	4603      	mov	r3, r0
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc fb34 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 8005024:	4603      	mov	r3, r0
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc fb28 	bl	800168c <_ZNSt9_Any_data9_M_accessEv>
 800503c:	4603      	mov	r3, r0
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <HAL_MspInit+0x4c>)
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	4a0f      	ldr	r2, [pc, #60]	; (80050c0 <HAL_MspInit+0x4c>)
 8005084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005088:	6453      	str	r3, [r2, #68]	; 0x44
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <HAL_MspInit+0x4c>)
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_MspInit+0x4c>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <HAL_MspInit+0x4c>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6413      	str	r3, [r2, #64]	; 0x40
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <HAL_MspInit+0x4c>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80050b2:	2007      	movs	r0, #7
 80050b4:	f000 fb14 	bl	80056e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40023800 	.word	0x40023800

080050c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <HAL_CRC_MspInit+0x3c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10d      	bne.n	80050f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <HAL_CRC_MspInit+0x40>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <HAL_CRC_MspInit+0x40>)
 80050e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050e4:	6313      	str	r3, [r2, #48]	; 0x30
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <HAL_CRC_MspInit+0x40>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40023000 	.word	0x40023000
 8005104:	40023800 	.word	0x40023800

08005108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a19      	ldr	r2, [pc, #100]	; (800518c <HAL_SPI_MspInit+0x84>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d12b      	bne.n	8005182 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	4b18      	ldr	r3, [pc, #96]	; (8005190 <HAL_SPI_MspInit+0x88>)
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_SPI_MspInit+0x88>)
 8005134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005138:	6453      	str	r3, [r2, #68]	; 0x44
 800513a:	4b15      	ldr	r3, [pc, #84]	; (8005190 <HAL_SPI_MspInit+0x88>)
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	4b11      	ldr	r3, [pc, #68]	; (8005190 <HAL_SPI_MspInit+0x88>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <HAL_SPI_MspInit+0x88>)
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	6313      	str	r3, [r2, #48]	; 0x30
 8005156:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <HAL_SPI_MspInit+0x88>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005162:	23e0      	movs	r3, #224	; 0xe0
 8005164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	2302      	movs	r3, #2
 8005168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516e:	2303      	movs	r3, #3
 8005170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005172:	2305      	movs	r3, #5
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005176:	f107 0314 	add.w	r3, r7, #20
 800517a:	4619      	mov	r1, r3
 800517c:	4805      	ldr	r0, [pc, #20]	; (8005194 <HAL_SPI_MspInit+0x8c>)
 800517e:	f000 fb0d 	bl	800579c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005182:	bf00      	nop
 8005184:	3728      	adds	r7, #40	; 0x28
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40013000 	.word	0x40013000
 8005190:	40023800 	.word	0x40023800
 8005194:	40020000 	.word	0x40020000

08005198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800519c:	e7fe      	b.n	800519c <NMI_Handler+0x4>

0800519e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051a2:	e7fe      	b.n	80051a2 <HardFault_Handler+0x4>

080051a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051a8:	e7fe      	b.n	80051a8 <MemManage_Handler+0x4>

080051aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051ae:	e7fe      	b.n	80051ae <BusFault_Handler+0x4>

080051b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051b4:	e7fe      	b.n	80051b4 <UsageFault_Handler+0x4>

080051b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051b6:	b480      	push	{r7}
 80051b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051d2:	b480      	push	{r7}
 80051d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051d6:	bf00      	nop
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051e4:	f000 f968 	bl	80054b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051e8:	bf00      	nop
 80051ea:	bd80      	pop	{r7, pc}

080051ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80051f0:	2001      	movs	r0, #1
 80051f2:	f000 fca3 	bl	8005b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005200:	4802      	ldr	r0, [pc, #8]	; (800520c <OTG_FS_IRQHandler+0x10>)
 8005202:	f000 fe03 	bl	8005e0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005206:	bf00      	nop
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	200043f0 	.word	0x200043f0

08005210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return 1;
 8005214:	2301      	movs	r3, #1
}
 8005216:	4618      	mov	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <_kill>:

int _kill(int pid, int sig)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800522a:	f015 f901 	bl	801a430 <__errno>
 800522e:	4603      	mov	r3, r0
 8005230:	2216      	movs	r2, #22
 8005232:	601a      	str	r2, [r3, #0]
  return -1;
 8005234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_exit>:

void _exit (int status)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005248:	f04f 31ff 	mov.w	r1, #4294967295
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ffe7 	bl	8005220 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005252:	e7fe      	b.n	8005252 <_exit+0x12>

08005254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e00a      	b.n	800527c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005266:	f3af 8000 	nop.w
 800526a:	4601      	mov	r1, r0
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	60ba      	str	r2, [r7, #8]
 8005272:	b2ca      	uxtb	r2, r1
 8005274:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	3301      	adds	r3, #1
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	429a      	cmp	r2, r3
 8005282:	dbf0      	blt.n	8005266 <_read+0x12>
  }

  return len;
 8005284:	687b      	ldr	r3, [r7, #4]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	e009      	b.n	80052b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	60ba      	str	r2, [r7, #8]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	3301      	adds	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	dbf1      	blt.n	80052a0 <_write+0x12>
  }
  return len;
 80052bc:	687b      	ldr	r3, [r7, #4]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_close>:

int _close(int file)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80052ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052ee:	605a      	str	r2, [r3, #4]
  return 0;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <_isatty>:

int _isatty(int file)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005306:	2301      	movs	r3, #1
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005338:	4a14      	ldr	r2, [pc, #80]	; (800538c <_sbrk+0x5c>)
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <_sbrk+0x60>)
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005344:	4b13      	ldr	r3, [pc, #76]	; (8005394 <_sbrk+0x64>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800534c:	4b11      	ldr	r3, [pc, #68]	; (8005394 <_sbrk+0x64>)
 800534e:	4a12      	ldr	r2, [pc, #72]	; (8005398 <_sbrk+0x68>)
 8005350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <_sbrk+0x64>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4413      	add	r3, r2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	429a      	cmp	r2, r3
 800535e:	d207      	bcs.n	8005370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005360:	f015 f866 	bl	801a430 <__errno>
 8005364:	4603      	mov	r3, r0
 8005366:	220c      	movs	r2, #12
 8005368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	e009      	b.n	8005384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005370:	4b08      	ldr	r3, [pc, #32]	; (8005394 <_sbrk+0x64>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005376:	4b07      	ldr	r3, [pc, #28]	; (8005394 <_sbrk+0x64>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	4a05      	ldr	r2, [pc, #20]	; (8005394 <_sbrk+0x64>)
 8005380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005382:	68fb      	ldr	r3, [r7, #12]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20020000 	.word	0x20020000
 8005390:	00000400 	.word	0x00000400
 8005394:	20002a20 	.word	0x20002a20
 8005398:	20004b30 	.word	0x20004b30

0800539c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <SystemInit+0x20>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	4a05      	ldr	r2, [pc, #20]	; (80053bc <SystemInit+0x20>)
 80053a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053b0:	bf00      	nop
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80053c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053c4:	480d      	ldr	r0, [pc, #52]	; (80053fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80053c6:	490e      	ldr	r1, [pc, #56]	; (8005400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80053c8:	4a0e      	ldr	r2, [pc, #56]	; (8005404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80053ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053cc:	e002      	b.n	80053d4 <LoopCopyDataInit>

080053ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053d2:	3304      	adds	r3, #4

080053d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053d8:	d3f9      	bcc.n	80053ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053da:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053dc:	4c0b      	ldr	r4, [pc, #44]	; (800540c <LoopFillZerobss+0x26>)
  movs r3, #0
 80053de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053e0:	e001      	b.n	80053e6 <LoopFillZerobss>

080053e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053e4:	3204      	adds	r2, #4

080053e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053e8:	d3fb      	bcc.n	80053e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80053ea:	f7ff ffd7 	bl	800539c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053ee:	f015 f837 	bl	801a460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053f2:	f7fe fd45 	bl	8003e80 <main>
  bx  lr    
 80053f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80053f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005400:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8005404:	0801daa8 	.word	0x0801daa8
  ldr r2, =_sbss
 8005408:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 800540c:	20004b30 	.word	0x20004b30

08005410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005410:	e7fe      	b.n	8005410 <ADC_IRQHandler>
	...

08005414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005418:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <HAL_Init+0x40>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a0d      	ldr	r2, [pc, #52]	; (8005454 <HAL_Init+0x40>)
 800541e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <HAL_Init+0x40>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <HAL_Init+0x40>)
 800542a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800542e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005430:	4b08      	ldr	r3, [pc, #32]	; (8005454 <HAL_Init+0x40>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a07      	ldr	r2, [pc, #28]	; (8005454 <HAL_Init+0x40>)
 8005436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800543c:	2003      	movs	r0, #3
 800543e:	f000 f94f 	bl	80056e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005442:	2000      	movs	r0, #0
 8005444:	f000 f808 	bl	8005458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005448:	f7ff fe14 	bl	8005074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40023c00 	.word	0x40023c00

08005458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005460:	4b12      	ldr	r3, [pc, #72]	; (80054ac <HAL_InitTick+0x54>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <HAL_InitTick+0x58>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	4619      	mov	r1, r3
 800546a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800546e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005472:	fbb2 f3f3 	udiv	r3, r2, r3
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f967 	bl	800574a <HAL_SYSTICK_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e00e      	b.n	80054a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b0f      	cmp	r3, #15
 800548a:	d80a      	bhi.n	80054a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800548c:	2200      	movs	r2, #0
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	f04f 30ff 	mov.w	r0, #4294967295
 8005494:	f000 f92f 	bl	80056f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005498:	4a06      	ldr	r2, [pc, #24]	; (80054b4 <HAL_InitTick+0x5c>)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e000      	b.n	80054a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000048 	.word	0x20000048
 80054b0:	20000050 	.word	0x20000050
 80054b4:	2000004c 	.word	0x2000004c

080054b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_IncTick+0x20>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <HAL_IncTick+0x24>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4413      	add	r3, r2
 80054c8:	4a04      	ldr	r2, [pc, #16]	; (80054dc <HAL_IncTick+0x24>)
 80054ca:	6013      	str	r3, [r2, #0]
}
 80054cc:	bf00      	nop
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000050 	.word	0x20000050
 80054dc:	20002a24 	.word	0x20002a24

080054e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return uwTick;
 80054e4:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <HAL_GetTick+0x14>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20002a24 	.word	0x20002a24

080054f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005500:	f7ff ffee 	bl	80054e0 <HAL_GetTick>
 8005504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d005      	beq.n	800551e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <HAL_Delay+0x44>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800551e:	bf00      	nop
 8005520:	f7ff ffde 	bl	80054e0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	429a      	cmp	r2, r3
 800552e:	d8f7      	bhi.n	8005520 <HAL_Delay+0x28>
  {
  }
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000050 	.word	0x20000050

08005540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <__NVIC_SetPriorityGrouping+0x44>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800555c:	4013      	ands	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800556c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005572:	4a04      	ldr	r2, [pc, #16]	; (8005584 <__NVIC_SetPriorityGrouping+0x44>)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	60d3      	str	r3, [r2, #12]
}
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	e000ed00 	.word	0xe000ed00

08005588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <__NVIC_GetPriorityGrouping+0x18>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 0307 	and.w	r3, r3, #7
}
 8005596:	4618      	mov	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	e000ed00 	.word	0xe000ed00

080055a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	db0b      	blt.n	80055ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	f003 021f 	and.w	r2, r3, #31
 80055bc:	4907      	ldr	r1, [pc, #28]	; (80055dc <__NVIC_EnableIRQ+0x38>)
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	2001      	movs	r0, #1
 80055c6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	e000e100 	.word	0xe000e100

080055e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	6039      	str	r1, [r7, #0]
 80055ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	db0a      	blt.n	800560a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	490c      	ldr	r1, [pc, #48]	; (800562c <__NVIC_SetPriority+0x4c>)
 80055fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fe:	0112      	lsls	r2, r2, #4
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	440b      	add	r3, r1
 8005604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005608:	e00a      	b.n	8005620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	b2da      	uxtb	r2, r3
 800560e:	4908      	ldr	r1, [pc, #32]	; (8005630 <__NVIC_SetPriority+0x50>)
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	3b04      	subs	r3, #4
 8005618:	0112      	lsls	r2, r2, #4
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	440b      	add	r3, r1
 800561e:	761a      	strb	r2, [r3, #24]
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	e000e100 	.word	0xe000e100
 8005630:	e000ed00 	.word	0xe000ed00

08005634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005634:	b480      	push	{r7}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f1c3 0307 	rsb	r3, r3, #7
 800564e:	2b04      	cmp	r3, #4
 8005650:	bf28      	it	cs
 8005652:	2304      	movcs	r3, #4
 8005654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3304      	adds	r3, #4
 800565a:	2b06      	cmp	r3, #6
 800565c:	d902      	bls.n	8005664 <NVIC_EncodePriority+0x30>
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	3b03      	subs	r3, #3
 8005662:	e000      	b.n	8005666 <NVIC_EncodePriority+0x32>
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005668:	f04f 32ff 	mov.w	r2, #4294967295
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43da      	mvns	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	401a      	ands	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800567c:	f04f 31ff 	mov.w	r1, #4294967295
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	fa01 f303 	lsl.w	r3, r1, r3
 8005686:	43d9      	mvns	r1, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800568c:	4313      	orrs	r3, r2
         );
}
 800568e:	4618      	mov	r0, r3
 8005690:	3724      	adds	r7, #36	; 0x24
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
	...

0800569c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ac:	d301      	bcc.n	80056b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ae:	2301      	movs	r3, #1
 80056b0:	e00f      	b.n	80056d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <SysTick_Config+0x40>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056ba:	210f      	movs	r1, #15
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	f7ff ff8e 	bl	80055e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <SysTick_Config+0x40>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ca:	4b04      	ldr	r3, [pc, #16]	; (80056dc <SysTick_Config+0x40>)
 80056cc:	2207      	movs	r2, #7
 80056ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	e000e010 	.word	0xe000e010

080056e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ff29 	bl	8005540 <__NVIC_SetPriorityGrouping>
}
 80056ee:	bf00      	nop
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	4603      	mov	r3, r0
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005708:	f7ff ff3e 	bl	8005588 <__NVIC_GetPriorityGrouping>
 800570c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	6978      	ldr	r0, [r7, #20]
 8005714:	f7ff ff8e 	bl	8005634 <NVIC_EncodePriority>
 8005718:	4602      	mov	r2, r0
 800571a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff ff5d 	bl	80055e0 <__NVIC_SetPriority>
}
 8005726:	bf00      	nop
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	4603      	mov	r3, r0
 8005736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ff31 	bl	80055a4 <__NVIC_EnableIRQ>
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ffa2 	bl	800569c <SysTick_Config>
 8005758:	4603      	mov	r3, r0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e00e      	b.n	8005792 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	795b      	ldrb	r3, [r3, #5]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d105      	bne.n	800578a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff fc9d 	bl	80050c4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	; 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	e16b      	b.n	8005a90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057b8:	2201      	movs	r2, #1
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	f040 815a 	bne.w	8005a8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d005      	beq.n	80057ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d130      	bne.n	8005850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	2203      	movs	r2, #3
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4313      	orrs	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005824:	2201      	movs	r2, #1
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	f003 0201 	and.w	r2, r3, #1
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d017      	beq.n	800588c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	2203      	movs	r2, #3
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4313      	orrs	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d123      	bne.n	80058e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	08da      	lsrs	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3208      	adds	r2, #8
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	220f      	movs	r2, #15
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4013      	ands	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	08da      	lsrs	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3208      	adds	r2, #8
 80058da:	69b9      	ldr	r1, [r7, #24]
 80058dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	2203      	movs	r2, #3
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 0203 	and.w	r2, r3, #3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80b4 	beq.w	8005a8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <HAL_GPIO_Init+0x30c>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	4a5f      	ldr	r2, [pc, #380]	; (8005aa8 <HAL_GPIO_Init+0x30c>)
 800592c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005930:	6453      	str	r3, [r2, #68]	; 0x44
 8005932:	4b5d      	ldr	r3, [pc, #372]	; (8005aa8 <HAL_GPIO_Init+0x30c>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800593e:	4a5b      	ldr	r2, [pc, #364]	; (8005aac <HAL_GPIO_Init+0x310>)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	3302      	adds	r3, #2
 8005946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	220f      	movs	r2, #15
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a52      	ldr	r2, [pc, #328]	; (8005ab0 <HAL_GPIO_Init+0x314>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d02b      	beq.n	80059c2 <HAL_GPIO_Init+0x226>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a51      	ldr	r2, [pc, #324]	; (8005ab4 <HAL_GPIO_Init+0x318>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d025      	beq.n	80059be <HAL_GPIO_Init+0x222>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a50      	ldr	r2, [pc, #320]	; (8005ab8 <HAL_GPIO_Init+0x31c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01f      	beq.n	80059ba <HAL_GPIO_Init+0x21e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a4f      	ldr	r2, [pc, #316]	; (8005abc <HAL_GPIO_Init+0x320>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d019      	beq.n	80059b6 <HAL_GPIO_Init+0x21a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a4e      	ldr	r2, [pc, #312]	; (8005ac0 <HAL_GPIO_Init+0x324>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_GPIO_Init+0x216>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a4d      	ldr	r2, [pc, #308]	; (8005ac4 <HAL_GPIO_Init+0x328>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00d      	beq.n	80059ae <HAL_GPIO_Init+0x212>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a4c      	ldr	r2, [pc, #304]	; (8005ac8 <HAL_GPIO_Init+0x32c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <HAL_GPIO_Init+0x20e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a4b      	ldr	r2, [pc, #300]	; (8005acc <HAL_GPIO_Init+0x330>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <HAL_GPIO_Init+0x20a>
 80059a2:	2307      	movs	r3, #7
 80059a4:	e00e      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059a6:	2308      	movs	r3, #8
 80059a8:	e00c      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059aa:	2306      	movs	r3, #6
 80059ac:	e00a      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059ae:	2305      	movs	r3, #5
 80059b0:	e008      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059b2:	2304      	movs	r3, #4
 80059b4:	e006      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059b6:	2303      	movs	r3, #3
 80059b8:	e004      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e002      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <HAL_GPIO_Init+0x228>
 80059c2:	2300      	movs	r3, #0
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	f002 0203 	and.w	r2, r2, #3
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	4093      	lsls	r3, r2
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059d4:	4935      	ldr	r1, [pc, #212]	; (8005aac <HAL_GPIO_Init+0x310>)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	3302      	adds	r3, #2
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059e2:	4b3b      	ldr	r3, [pc, #236]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a06:	4a32      	ldr	r2, [pc, #200]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a0c:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a30:	4a27      	ldr	r2, [pc, #156]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a36:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a5a:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a60:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a84:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <HAL_GPIO_Init+0x334>)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	f67f ae90 	bls.w	80057b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a98:	bf00      	nop
 8005a9a:	bf00      	nop
 8005a9c:	3724      	adds	r7, #36	; 0x24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40013800 	.word	0x40013800
 8005ab0:	40020000 	.word	0x40020000
 8005ab4:	40020400 	.word	0x40020400
 8005ab8:	40020800 	.word	0x40020800
 8005abc:	40020c00 	.word	0x40020c00
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	40021400 	.word	0x40021400
 8005ac8:	40021800 	.word	0x40021800
 8005acc:	40021c00 	.word	0x40021c00
 8005ad0:	40013c00 	.word	0x40013c00

08005ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	807b      	strh	r3, [r7, #2]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ae4:	787b      	ldrb	r3, [r7, #1]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aea:	887a      	ldrh	r2, [r7, #2]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005af0:	e003      	b.n	8005afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005af2:	887b      	ldrh	r3, [r7, #2]
 8005af4:	041a      	lsls	r2, r3, #16
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	619a      	str	r2, [r3, #24]
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b18:	887a      	ldrh	r2, [r7, #2]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	041a      	lsls	r2, r3, #16
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	43d9      	mvns	r1, r3
 8005b24:	887b      	ldrh	r3, [r7, #2]
 8005b26:	400b      	ands	r3, r1
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	619a      	str	r2, [r3, #24]
}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	4603      	mov	r3, r0
 8005b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b48:	695a      	ldr	r2, [r3, #20]
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d006      	beq.n	8005b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b52:	4a05      	ldr	r2, [pc, #20]	; (8005b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe fc20 	bl	80043a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40013c00 	.word	0x40013c00

08005b6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b6e:	b08f      	sub	sp, #60	; 0x3c
 8005b70:	af0a      	add	r7, sp, #40	; 0x28
 8005b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e10f      	b.n	8005d9e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f012 fdd7 	bl	801874c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f002 fd80 	bl	80086c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	687e      	ldr	r6, [r7, #4]
 8005bca:	466d      	mov	r5, sp
 8005bcc:	f106 0410 	add.w	r4, r6, #16
 8005bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005be0:	1d33      	adds	r3, r6, #4
 8005be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005be4:	6838      	ldr	r0, [r7, #0]
 8005be6:	f002 fc57 	bl	8008498 <USB_CoreInit>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0d0      	b.n	8005d9e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f002 fd6e 	bl	80086e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]
 8005c0c:	e04a      	b.n	8005ca4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c0e:	7bfa      	ldrb	r2, [r7, #15]
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	333d      	adds	r3, #61	; 0x3d
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c22:	7bfa      	ldrb	r2, [r7, #15]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	333c      	adds	r3, #60	; 0x3c
 8005c32:	7bfa      	ldrb	r2, [r7, #15]
 8005c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c36:	7bfa      	ldrb	r2, [r7, #15]
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	b298      	uxth	r0, r3
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	3344      	adds	r3, #68	; 0x44
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c4e:	7bfa      	ldrb	r2, [r7, #15]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3340      	adds	r3, #64	; 0x40
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c62:	7bfa      	ldrb	r2, [r7, #15]
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	3348      	adds	r3, #72	; 0x48
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c76:	7bfa      	ldrb	r2, [r7, #15]
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	334c      	adds	r3, #76	; 0x4c
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c8a:	7bfa      	ldrb	r2, [r7, #15]
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	3354      	adds	r3, #84	; 0x54
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	73fb      	strb	r3, [r7, #15]
 8005ca4:	7bfa      	ldrb	r2, [r7, #15]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d3af      	bcc.n	8005c0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	e044      	b.n	8005d3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005cb4:	7bfa      	ldrb	r2, [r7, #15]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005cdc:	7bfa      	ldrb	r2, [r7, #15]
 8005cde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ce0:	7bfa      	ldrb	r2, [r7, #15]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cf6:	7bfa      	ldrb	r2, [r7, #15]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d0c:	7bfa      	ldrb	r2, [r7, #15]
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d22:	7bfa      	ldrb	r2, [r7, #15]
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	4613      	mov	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	73fb      	strb	r3, [r7, #15]
 8005d3e:	7bfa      	ldrb	r2, [r7, #15]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d3b5      	bcc.n	8005cb4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	687e      	ldr	r6, [r7, #4]
 8005d50:	466d      	mov	r5, sp
 8005d52:	f106 0410 	add.w	r4, r6, #16
 8005d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d66:	1d33      	adds	r3, r6, #4
 8005d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d6a:	6838      	ldr	r0, [r7, #0]
 8005d6c:	f002 fd06 	bl	800877c <USB_DevInit>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e00d      	b.n	8005d9e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f003 fe55 	bl	8009a46 <USB_DevDisconnect>

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005da6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_PCD_Start+0x1c>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e020      	b.n	8005e04 <HAL_PCD_Start+0x5e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d109      	bne.n	8005de6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d005      	beq.n	8005de6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f002 fc58 	bl	80086a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f003 fe05 	bl	8009a04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e0c:	b590      	push	{r4, r7, lr}
 8005e0e:	b08d      	sub	sp, #52	; 0x34
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f003 fec3 	bl	8009bae <USB_GetMode>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 848a 	bne.w	8006744 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f003 fe27 	bl	8009a88 <USB_ReadInterrupts>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8480 	beq.w	8006742 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	0a1b      	lsrs	r3, r3, #8
 8005e4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f003 fe14 	bl	8009a88 <USB_ReadInterrupts>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d107      	bne.n	8005e7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f002 0202 	and.w	r2, r2, #2
 8005e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f003 fe02 	bl	8009a88 <USB_ReadInterrupts>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d161      	bne.n	8005f52 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0210 	bic.w	r2, r2, #16
 8005e9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f003 020f 	and.w	r2, r3, #15
 8005eaa:	4613      	mov	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4413      	add	r3, r2
 8005eba:	3304      	adds	r3, #4
 8005ebc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	0c5b      	lsrs	r3, r3, #17
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d124      	bne.n	8005f14 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d035      	beq.n	8005f42 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	091b      	lsrs	r3, r3, #4
 8005ede:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6a38      	ldr	r0, [r7, #32]
 8005eea:	f003 fc39 	bl	8009760 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005efa:	441a      	add	r2, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f0c:	441a      	add	r2, r3
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	621a      	str	r2, [r3, #32]
 8005f12:	e016      	b.n	8005f42 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	0c5b      	lsrs	r3, r3, #17
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	2b06      	cmp	r3, #6
 8005f1e:	d110      	bne.n	8005f42 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f26:	2208      	movs	r2, #8
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6a38      	ldr	r0, [r7, #32]
 8005f2c:	f003 fc18 	bl	8009760 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	091b      	lsrs	r3, r3, #4
 8005f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f3c:	441a      	add	r2, r3
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0210 	orr.w	r2, r2, #16
 8005f50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f003 fd96 	bl	8009a88 <USB_ReadInterrupts>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f66:	f040 80a7 	bne.w	80060b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f003 fd9b 	bl	8009aae <USB_ReadDevAllOutEpInterrupt>
 8005f78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005f7a:	e099      	b.n	80060b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 808e 	beq.w	80060a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f003 fdbf 	bl	8009b16 <USB_ReadDevOutEPInterrupt>
 8005f98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00c      	beq.n	8005fbe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fec3 	bl	8006d44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00c      	beq.n	8005fe2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 ff99 	bl	8006f14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d008      	beq.n	8005ffe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	2310      	movs	r3, #16
 8005ffc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d030      	beq.n	800606a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d109      	bne.n	8006028 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006026:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	4413      	add	r3, r2
 800603a:	3304      	adds	r3, #4
 800603c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	78db      	ldrb	r3, [r3, #3]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d108      	bne.n	8006058 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2200      	movs	r2, #0
 800604a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	b2db      	uxtb	r3, r3
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f012 fc80 	bl	8018958 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	461a      	mov	r2, r3
 8006066:	2302      	movs	r3, #2
 8006068:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006080:	461a      	mov	r2, r3
 8006082:	2320      	movs	r3, #32
 8006084:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d009      	beq.n	80060a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	461a      	mov	r2, r3
 800609e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	3301      	adds	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f47f af62 	bne.w	8005f7c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4618      	mov	r0, r3
 80060be:	f003 fce3 	bl	8009a88 <USB_ReadInterrupts>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060cc:	f040 80db 	bne.w	8006286 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f003 fd04 	bl	8009ae2 <USB_ReadDevAllInEpInterrupt>
 80060da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80060e0:	e0cd      	b.n	800627e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80c2 	beq.w	8006272 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	4611      	mov	r1, r2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f003 fd2a 	bl	8009b52 <USB_ReadDevInEPInterrupt>
 80060fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d057      	beq.n	80061ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	2201      	movs	r2, #1
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	43db      	mvns	r3, r3
 8006124:	69f9      	ldr	r1, [r7, #28]
 8006126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800612a:	4013      	ands	r3, r2
 800612c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613a:	461a      	mov	r2, r3
 800613c:	2301      	movs	r3, #1
 800613e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d132      	bne.n	80061ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614c:	4613      	mov	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	334c      	adds	r3, #76	; 0x4c
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615e:	4613      	mov	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4403      	add	r3, r0
 8006168:	3348      	adds	r3, #72	; 0x48
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4419      	add	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4403      	add	r3, r0
 800617c:	334c      	adds	r3, #76	; 0x4c
 800617e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	2b00      	cmp	r3, #0
 8006184:	d113      	bne.n	80061ae <HAL_PCD_IRQHandler+0x3a2>
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618a:	4613      	mov	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	3354      	adds	r3, #84	; 0x54
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d108      	bne.n	80061ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061a6:	461a      	mov	r2, r3
 80061a8:	2101      	movs	r1, #1
 80061aa:	f003 fd31 	bl	8009c10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f012 fb4a 	bl	801884e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	461a      	mov	r2, r3
 80061d2:	2308      	movs	r3, #8
 80061d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	461a      	mov	r2, r3
 80061ee:	2310      	movs	r3, #16
 80061f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	461a      	mov	r2, r3
 800620a:	2340      	movs	r3, #64	; 0x40
 800620c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d023      	beq.n	8006260 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800621a:	6a38      	ldr	r0, [r7, #32]
 800621c:	f002 fc12 	bl	8008a44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006222:	4613      	mov	r3, r2
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	3338      	adds	r3, #56	; 0x38
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4413      	add	r3, r2
 8006230:	3304      	adds	r3, #4
 8006232:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	78db      	ldrb	r3, [r3, #3]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d108      	bne.n	800624e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2200      	movs	r2, #0
 8006240:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	b2db      	uxtb	r3, r3
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f012 fb97 	bl	801897c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	461a      	mov	r2, r3
 800625c:	2302      	movs	r3, #2
 800625e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800626a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fcdb 	bl	8006c28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	3301      	adds	r3, #1
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	2b00      	cmp	r3, #0
 8006282:	f47f af2e 	bne.w	80060e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f003 fbfc 	bl	8009a88 <USB_ReadInterrupts>
 8006290:	4603      	mov	r3, r0
 8006292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800629a:	d122      	bne.n	80062e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d108      	bne.n	80062cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80062c2:	2100      	movs	r1, #0
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fec3 	bl	8007050 <HAL_PCDEx_LPM_Callback>
 80062ca:	e002      	b.n	80062d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f012 fb35 	bl	801893c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80062e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f003 fbce 	bl	8009a88 <USB_ReadInterrupts>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f6:	d112      	bne.n	800631e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b01      	cmp	r3, #1
 8006306:	d102      	bne.n	800630e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f012 faf1 	bl	80188f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800631c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f003 fbb0 	bl	8009a88 <USB_ReadInterrupts>
 8006328:	4603      	mov	r3, r0
 800632a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006332:	f040 80b7 	bne.w	80064a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2110      	movs	r1, #16
 8006350:	4618      	mov	r0, r3
 8006352:	f002 fb77 	bl	8008a44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006356:	2300      	movs	r3, #0
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635a:	e046      	b.n	80063ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006368:	461a      	mov	r2, r3
 800636a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800636e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800638e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639c:	461a      	mov	r2, r3
 800639e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	3301      	adds	r3, #1
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d3b3      	bcc.n	800635c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006402:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006406:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	2b00      	cmp	r3, #0
 800640e:	d016      	beq.n	800643e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006420:	f043 030b 	orr.w	r3, r3, #11
 8006424:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006436:	f043 030b 	orr.w	r3, r3, #11
 800643a:	6453      	str	r3, [r2, #68]	; 0x44
 800643c:	e015      	b.n	800646a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800644c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006450:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006454:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006464:	f043 030b 	orr.w	r3, r3, #11
 8006468:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006478:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800647c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800648e:	461a      	mov	r2, r3
 8006490:	f003 fbbe 	bl	8009c10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80064a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f003 faed 	bl	8009a88 <USB_ReadInterrupts>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b8:	d124      	bne.n	8006504 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f003 fb83 	bl	8009bca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f002 fb38 	bl	8008b3e <USB_GetDevSpeed>
 80064ce:	4603      	mov	r3, r0
 80064d0:	461a      	mov	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681c      	ldr	r4, [r3, #0]
 80064da:	f001 fa29 	bl	8007930 <HAL_RCC_GetHCLKFreq>
 80064de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	4620      	mov	r0, r4
 80064ea:	f002 f837 	bl	800855c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f012 f9d5 	bl	801889e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006502:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4618      	mov	r0, r3
 800650a:	f003 fabd 	bl	8009a88 <USB_ReadInterrupts>
 800650e:	4603      	mov	r3, r0
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b08      	cmp	r3, #8
 8006516:	d10a      	bne.n	800652e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f012 f9b2 	bl	8018882 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f002 0208 	and.w	r2, r2, #8
 800652c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f003 faa8 	bl	8009a88 <USB_ReadInterrupts>
 8006538:	4603      	mov	r3, r0
 800653a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653e:	2b80      	cmp	r3, #128	; 0x80
 8006540:	d122      	bne.n	8006588 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800654e:	2301      	movs	r3, #1
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
 8006552:	e014      	b.n	800657e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006558:	4613      	mov	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d105      	bne.n	8006578 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	b2db      	uxtb	r3, r3
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fb27 	bl	8006bc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	3301      	adds	r3, #1
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006584:	429a      	cmp	r2, r3
 8006586:	d3e5      	bcc.n	8006554 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f003 fa7b 	bl	8009a88 <USB_ReadInterrupts>
 8006592:	4603      	mov	r3, r0
 8006594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800659c:	d13b      	bne.n	8006616 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800659e:	2301      	movs	r3, #1
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	e02b      	b.n	80065fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	3340      	adds	r3, #64	; 0x40
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d115      	bne.n	80065f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80065ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	da12      	bge.n	80065f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d4:	4613      	mov	r3, r2
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	333f      	adds	r3, #63	; 0x3f
 80065e0:	2201      	movs	r2, #1
 80065e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fae8 	bl	8006bc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	3301      	adds	r3, #1
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006602:	429a      	cmp	r2, r3
 8006604:	d3ce      	bcc.n	80065a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695a      	ldr	r2, [r3, #20]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f003 fa34 	bl	8009a88 <USB_ReadInterrupts>
 8006620:	4603      	mov	r3, r0
 8006622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800662a:	d155      	bne.n	80066d8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800662c:	2301      	movs	r3, #1
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
 8006630:	e045      	b.n	80066be <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006646:	4613      	mov	r3, r2
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d12e      	bne.n	80066b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800665a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800665c:	2b00      	cmp	r3, #0
 800665e:	da2b      	bge.n	80066b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800666c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006670:	429a      	cmp	r2, r3
 8006672:	d121      	bne.n	80066b8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006678:	4613      	mov	r3, r2
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006686:	2201      	movs	r2, #1
 8006688:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066b4:	6053      	str	r3, [r2, #4]
            break;
 80066b6:	e007      	b.n	80066c8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	3301      	adds	r3, #1
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d3b4      	bcc.n	8006632 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80066d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	f003 f9d3 	bl	8009a88 <USB_ReadInterrupts>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ec:	d10a      	bne.n	8006704 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f012 f956 	bl	80189a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006702:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f003 f9bd 	bl	8009a88 <USB_ReadInterrupts>
 800670e:	4603      	mov	r3, r0
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b04      	cmp	r3, #4
 8006716:	d115      	bne.n	8006744 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f012 f946 	bl	80189bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6859      	ldr	r1, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	e000      	b.n	8006744 <HAL_PCD_IRQHandler+0x938>
      return;
 8006742:	bf00      	nop
    }
  }
}
 8006744:	3734      	adds	r7, #52	; 0x34
 8006746:	46bd      	mov	sp, r7
 8006748:	bd90      	pop	{r4, r7, pc}

0800674a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_PCD_SetAddress+0x1a>
 8006760:	2302      	movs	r3, #2
 8006762:	e013      	b.n	800678c <HAL_PCD_SetAddress+0x42>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	78fa      	ldrb	r2, [r7, #3]
 800677a:	4611      	mov	r1, r2
 800677c:	4618      	mov	r0, r3
 800677e:	f003 f91b 	bl	80099b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	70fb      	strb	r3, [r7, #3]
 80067a6:	460b      	mov	r3, r1
 80067a8:	803b      	strh	r3, [r7, #0]
 80067aa:	4613      	mov	r3, r2
 80067ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	da0f      	bge.n	80067da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067ba:	78fb      	ldrb	r3, [r7, #3]
 80067bc:	f003 020f 	and.w	r2, r3, #15
 80067c0:	4613      	mov	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	3338      	adds	r3, #56	; 0x38
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	4413      	add	r3, r2
 80067ce:	3304      	adds	r3, #4
 80067d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	705a      	strb	r2, [r3, #1]
 80067d8:	e00f      	b.n	80067fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	f003 020f 	and.w	r2, r3, #15
 80067e0:	4613      	mov	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4413      	add	r3, r2
 80067f0:	3304      	adds	r3, #4
 80067f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006806:	883a      	ldrh	r2, [r7, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	78ba      	ldrb	r2, [r7, #2]
 8006810:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	785b      	ldrb	r3, [r3, #1]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	b29a      	uxth	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006824:	78bb      	ldrb	r3, [r7, #2]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d102      	bne.n	8006830 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_PCD_EP_Open+0xaa>
 800683a:	2302      	movs	r3, #2
 800683c:	e00e      	b.n	800685c <HAL_PCD_EP_Open+0xc8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	4618      	mov	r0, r3
 800684e:	f002 f99b 	bl	8008b88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800685a:	7afb      	ldrb	r3, [r7, #11]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006874:	2b00      	cmp	r3, #0
 8006876:	da0f      	bge.n	8006898 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	f003 020f 	and.w	r2, r3, #15
 800687e:	4613      	mov	r3, r2
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	3338      	adds	r3, #56	; 0x38
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	4413      	add	r3, r2
 800688c:	3304      	adds	r3, #4
 800688e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	705a      	strb	r2, [r3, #1]
 8006896:	e00f      	b.n	80068b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	f003 020f 	and.w	r2, r3, #15
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	3304      	adds	r3, #4
 80068b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <HAL_PCD_EP_Close+0x6e>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e00e      	b.n	80068f0 <HAL_PCD_EP_Close+0x8c>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68f9      	ldr	r1, [r7, #12]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f002 f9d9 	bl	8008c98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	607a      	str	r2, [r7, #4]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	460b      	mov	r3, r1
 8006906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	f003 020f 	and.w	r2, r3, #15
 800690e:	4613      	mov	r3, r2
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	3304      	adds	r3, #4
 8006920:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2200      	movs	r2, #0
 8006938:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	b2da      	uxtb	r2, r3
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d102      	bne.n	8006954 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	6979      	ldr	r1, [r7, #20]
 800696c:	f002 fcb8 	bl	80092e0 <USB_EP0StartXfer>
 8006970:	e008      	b.n	8006984 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	6979      	ldr	r1, [r7, #20]
 8006980:	f002 fa66 	bl	8008e50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80069b0:	681b      	ldr	r3, [r3, #0]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	460b      	mov	r3, r1
 80069cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069ce:	7afb      	ldrb	r3, [r7, #11]
 80069d0:	f003 020f 	and.w	r2, r3, #15
 80069d4:	4613      	mov	r3, r2
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	3338      	adds	r3, #56	; 0x38
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4413      	add	r3, r2
 80069e2:	3304      	adds	r3, #4
 80069e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2200      	movs	r2, #0
 80069f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2201      	movs	r2, #1
 80069fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069fe:	7afb      	ldrb	r3, [r7, #11]
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d102      	bne.n	8006a18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a18:	7afb      	ldrb	r3, [r7, #11]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6979      	ldr	r1, [r7, #20]
 8006a30:	f002 fc56 	bl	80092e0 <USB_EP0StartXfer>
 8006a34:	e008      	b.n	8006a48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	6979      	ldr	r1, [r7, #20]
 8006a44:	f002 fa04 	bl	8008e50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	f003 020f 	and.w	r2, r3, #15
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d901      	bls.n	8006a70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e050      	b.n	8006b12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da0f      	bge.n	8006a98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	f003 020f 	and.w	r2, r3, #15
 8006a7e:	4613      	mov	r3, r2
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	3338      	adds	r3, #56	; 0x38
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2201      	movs	r2, #1
 8006a94:	705a      	strb	r2, [r3, #1]
 8006a96:	e00d      	b.n	8006ab4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a98:	78fa      	ldrb	r2, [r7, #3]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3304      	adds	r3, #4
 8006aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_PCD_EP_SetStall+0x82>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e01e      	b.n	8006b12 <HAL_PCD_EP_SetStall+0xc0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68f9      	ldr	r1, [r7, #12]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f002 fe94 	bl	8009810 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	b2d9      	uxtb	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b02:	461a      	mov	r2, r3
 8006b04:	f003 f884 	bl	8009c10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	f003 020f 	and.w	r2, r3, #15
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d901      	bls.n	8006b38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e042      	b.n	8006bbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	da0f      	bge.n	8006b60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	f003 020f 	and.w	r2, r3, #15
 8006b46:	4613      	mov	r3, r2
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	3338      	adds	r3, #56	; 0x38
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	3304      	adds	r3, #4
 8006b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	705a      	strb	r2, [r3, #1]
 8006b5e:	e00f      	b.n	8006b80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	f003 020f 	and.w	r2, r3, #15
 8006b66:	4613      	mov	r3, r2
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4413      	add	r3, r2
 8006b76:	3304      	adds	r3, #4
 8006b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_PCD_EP_ClrStall+0x86>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e00e      	b.n	8006bbe <HAL_PCD_EP_ClrStall+0xa4>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68f9      	ldr	r1, [r7, #12]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f002 fe9c 	bl	80098ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	da0c      	bge.n	8006bf4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	3338      	adds	r3, #56	; 0x38
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	3304      	adds	r3, #4
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e00c      	b.n	8006c0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	f003 020f 	and.w	r2, r3, #15
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f002 fcbb 	bl	8009590 <USB_EPStopXfer>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	3338      	adds	r3, #56	; 0x38
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d901      	bls.n	8006c60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e06c      	b.n	8006d3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d902      	bls.n	8006c7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	3303      	adds	r3, #3
 8006c80:	089b      	lsrs	r3, r3, #2
 8006c82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c84:	e02b      	b.n	8006cde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d902      	bls.n	8006ca2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3303      	adds	r3, #3
 8006ca6:	089b      	lsrs	r3, r3, #2
 8006ca8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6919      	ldr	r1, [r3, #16]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	6978      	ldr	r0, [r7, #20]
 8006cc2:	f002 fd0f 	bl	80096e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	691a      	ldr	r2, [r3, #16]
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	441a      	add	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1a      	ldr	r2, [r3, #32]
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	441a      	add	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d809      	bhi.n	8006d08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a1a      	ldr	r2, [r3, #32]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d203      	bcs.n	8006d08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1be      	bne.n	8006c86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	699a      	ldr	r2, [r3, #24]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d811      	bhi.n	8006d38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	6939      	ldr	r1, [r7, #16]
 8006d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d34:	4013      	ands	r3, r2
 8006d36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3720      	adds	r7, #32
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	333c      	adds	r3, #60	; 0x3c
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d17b      	bne.n	8006e72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d015      	beq.n	8006db0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	4a61      	ldr	r2, [pc, #388]	; (8006f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	f240 80b9 	bls.w	8006f00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80b3 	beq.w	8006f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	461a      	mov	r2, r3
 8006da8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dac:	6093      	str	r3, [r2, #8]
 8006dae:	e0a7      	b.n	8006f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2320      	movs	r3, #32
 8006dca:	6093      	str	r3, [r2, #8]
 8006dcc:	e098      	b.n	8006f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f040 8093 	bne.w	8006f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	4a4b      	ldr	r2, [pc, #300]	; (8006f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d90f      	bls.n	8006e02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfe:	6093      	str	r3, [r2, #8]
 8006e00:	e07e      	b.n	8006f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4413      	add	r3, r2
 8006e14:	3304      	adds	r3, #4
 8006e16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	0159      	lsls	r1, r3, #5
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	440b      	add	r3, r1
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e2e:	1ad2      	subs	r2, r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d114      	bne.n	8006e64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	2101      	movs	r1, #1
 8006e50:	f002 fede 	bl	8009c10 <USB_EP0_OutStart>
 8006e54:	e006      	b.n	8006e64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	441a      	add	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f011 fcd4 	bl	8018818 <HAL_PCD_DataOutStageCallback>
 8006e70:	e046      	b.n	8006f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	4a26      	ldr	r2, [pc, #152]	; (8006f10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d124      	bne.n	8006ec4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e90:	461a      	mov	r2, r3
 8006e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e96:	6093      	str	r3, [r2, #8]
 8006e98:	e032      	b.n	8006f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d008      	beq.n	8006eb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	2320      	movs	r3, #32
 8006eb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f011 fcab 	bl	8018818 <HAL_PCD_DataOutStageCallback>
 8006ec2:	e01d      	b.n	8006f00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d114      	bne.n	8006ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d108      	bne.n	8006ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006eec:	461a      	mov	r2, r3
 8006eee:	2100      	movs	r1, #0
 8006ef0:	f002 fe8e 	bl	8009c10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f011 fc8c 	bl	8018818 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3720      	adds	r7, #32
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	4f54300a 	.word	0x4f54300a
 8006f10:	4f54310a 	.word	0x4f54310a

08006f14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	333c      	adds	r3, #60	; 0x3c
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d90e      	bls.n	8006f68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f60:	461a      	mov	r2, r3
 8006f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f011 fc43 	bl	80187f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d90c      	bls.n	8006f90 <PCD_EP_OutSetupPacket_int+0x7c>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d108      	bne.n	8006f90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	f002 fe40 	bl	8009c10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	4f54300a 	.word	0x4f54300a

08006fa0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
 8006fac:	4613      	mov	r3, r2
 8006fae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006fbe:	883b      	ldrh	r3, [r7, #0]
 8006fc0:	0419      	lsls	r1, r3, #16
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28
 8006fcc:	e028      	b.n	8007020 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	4413      	add	r3, r2
 8006fda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]
 8006fe0:	e00d      	b.n	8006ffe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	3340      	adds	r3, #64	; 0x40
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]
 8006ffe:	7bfa      	ldrb	r2, [r7, #15]
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	3b01      	subs	r3, #1
 8007004:	429a      	cmp	r2, r3
 8007006:	d3ec      	bcc.n	8006fe2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007008:	883b      	ldrh	r3, [r7, #0]
 800700a:	0418      	lsls	r0, r3, #16
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6819      	ldr	r1, [r3, #0]
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	3b01      	subs	r3, #1
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	4302      	orrs	r2, r0
 8007018:	3340      	adds	r3, #64	; 0x40
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	887a      	ldrh	r2, [r7, #2]
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e267      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d075      	beq.n	8007172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007086:	4b88      	ldr	r3, [pc, #544]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 030c 	and.w	r3, r3, #12
 800708e:	2b04      	cmp	r3, #4
 8007090:	d00c      	beq.n	80070ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007092:	4b85      	ldr	r3, [pc, #532]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800709a:	2b08      	cmp	r3, #8
 800709c:	d112      	bne.n	80070c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800709e:	4b82      	ldr	r3, [pc, #520]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070aa:	d10b      	bne.n	80070c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ac:	4b7e      	ldr	r3, [pc, #504]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d05b      	beq.n	8007170 <HAL_RCC_OscConfig+0x108>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d157      	bne.n	8007170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e242      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070cc:	d106      	bne.n	80070dc <HAL_RCC_OscConfig+0x74>
 80070ce:	4b76      	ldr	r3, [pc, #472]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a75      	ldr	r2, [pc, #468]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	e01d      	b.n	8007118 <HAL_RCC_OscConfig+0xb0>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070e4:	d10c      	bne.n	8007100 <HAL_RCC_OscConfig+0x98>
 80070e6:	4b70      	ldr	r3, [pc, #448]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a6f      	ldr	r2, [pc, #444]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	4b6d      	ldr	r3, [pc, #436]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a6c      	ldr	r2, [pc, #432]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80070f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e00b      	b.n	8007118 <HAL_RCC_OscConfig+0xb0>
 8007100:	4b69      	ldr	r3, [pc, #420]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a68      	ldr	r2, [pc, #416]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	4b66      	ldr	r3, [pc, #408]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a65      	ldr	r2, [pc, #404]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d013      	beq.n	8007148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007120:	f7fe f9de 	bl	80054e0 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007128:	f7fe f9da 	bl	80054e0 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b64      	cmp	r3, #100	; 0x64
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e207      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800713a:	4b5b      	ldr	r3, [pc, #364]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0f0      	beq.n	8007128 <HAL_RCC_OscConfig+0xc0>
 8007146:	e014      	b.n	8007172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007148:	f7fe f9ca 	bl	80054e0 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007150:	f7fe f9c6 	bl	80054e0 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b64      	cmp	r3, #100	; 0x64
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e1f3      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007162:	4b51      	ldr	r3, [pc, #324]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0xe8>
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d063      	beq.n	8007246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800717e:	4b4a      	ldr	r3, [pc, #296]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 030c 	and.w	r3, r3, #12
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800718a:	4b47      	ldr	r3, [pc, #284]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007192:	2b08      	cmp	r3, #8
 8007194:	d11c      	bne.n	80071d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007196:	4b44      	ldr	r3, [pc, #272]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d116      	bne.n	80071d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071a2:	4b41      	ldr	r3, [pc, #260]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_RCC_OscConfig+0x152>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d001      	beq.n	80071ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e1c7      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ba:	4b3b      	ldr	r3, [pc, #236]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4937      	ldr	r1, [pc, #220]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ce:	e03a      	b.n	8007246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d020      	beq.n	800721a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071d8:	4b34      	ldr	r3, [pc, #208]	; (80072ac <HAL_RCC_OscConfig+0x244>)
 80071da:	2201      	movs	r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071de:	f7fe f97f 	bl	80054e0 <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e4:	e008      	b.n	80071f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071e6:	f7fe f97b 	bl	80054e0 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e1a8      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f8:	4b2b      	ldr	r3, [pc, #172]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d0f0      	beq.n	80071e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007204:	4b28      	ldr	r3, [pc, #160]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	4925      	ldr	r1, [pc, #148]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 8007214:	4313      	orrs	r3, r2
 8007216:	600b      	str	r3, [r1, #0]
 8007218:	e015      	b.n	8007246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800721a:	4b24      	ldr	r3, [pc, #144]	; (80072ac <HAL_RCC_OscConfig+0x244>)
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fe f95e 	bl	80054e0 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007228:	f7fe f95a 	bl	80054e0 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e187      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800723a:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d036      	beq.n	80072c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d016      	beq.n	8007288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800725a:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <HAL_RCC_OscConfig+0x248>)
 800725c:	2201      	movs	r2, #1
 800725e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007260:	f7fe f93e 	bl	80054e0 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007268:	f7fe f93a 	bl	80054e0 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e167      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800727a:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <HAL_RCC_OscConfig+0x240>)
 800727c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCC_OscConfig+0x200>
 8007286:	e01b      	b.n	80072c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007288:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <HAL_RCC_OscConfig+0x248>)
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728e:	f7fe f927 	bl	80054e0 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007294:	e00e      	b.n	80072b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007296:	f7fe f923 	bl	80054e0 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d907      	bls.n	80072b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e150      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
 80072a8:	40023800 	.word	0x40023800
 80072ac:	42470000 	.word	0x42470000
 80072b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b4:	4b88      	ldr	r3, [pc, #544]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1ea      	bne.n	8007296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8097 	beq.w	80073fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ce:	2300      	movs	r3, #0
 80072d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072d2:	4b81      	ldr	r3, [pc, #516]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10f      	bne.n	80072fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072de:	2300      	movs	r3, #0
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	4b7d      	ldr	r3, [pc, #500]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	4a7c      	ldr	r2, [pc, #496]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ec:	6413      	str	r3, [r2, #64]	; 0x40
 80072ee:	4b7a      	ldr	r3, [pc, #488]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f6:	60bb      	str	r3, [r7, #8]
 80072f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072fa:	2301      	movs	r3, #1
 80072fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072fe:	4b77      	ldr	r3, [pc, #476]	; (80074dc <HAL_RCC_OscConfig+0x474>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007306:	2b00      	cmp	r3, #0
 8007308:	d118      	bne.n	800733c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800730a:	4b74      	ldr	r3, [pc, #464]	; (80074dc <HAL_RCC_OscConfig+0x474>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a73      	ldr	r2, [pc, #460]	; (80074dc <HAL_RCC_OscConfig+0x474>)
 8007310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007316:	f7fe f8e3 	bl	80054e0 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800731e:	f7fe f8df 	bl	80054e0 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e10c      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007330:	4b6a      	ldr	r3, [pc, #424]	; (80074dc <HAL_RCC_OscConfig+0x474>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0f0      	beq.n	800731e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d106      	bne.n	8007352 <HAL_RCC_OscConfig+0x2ea>
 8007344:	4b64      	ldr	r3, [pc, #400]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007348:	4a63      	ldr	r2, [pc, #396]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	6713      	str	r3, [r2, #112]	; 0x70
 8007350:	e01c      	b.n	800738c <HAL_RCC_OscConfig+0x324>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b05      	cmp	r3, #5
 8007358:	d10c      	bne.n	8007374 <HAL_RCC_OscConfig+0x30c>
 800735a:	4b5f      	ldr	r3, [pc, #380]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 800735c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735e:	4a5e      	ldr	r2, [pc, #376]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007360:	f043 0304 	orr.w	r3, r3, #4
 8007364:	6713      	str	r3, [r2, #112]	; 0x70
 8007366:	4b5c      	ldr	r3, [pc, #368]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	4a5b      	ldr	r2, [pc, #364]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	6713      	str	r3, [r2, #112]	; 0x70
 8007372:	e00b      	b.n	800738c <HAL_RCC_OscConfig+0x324>
 8007374:	4b58      	ldr	r3, [pc, #352]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007378:	4a57      	ldr	r2, [pc, #348]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 800737a:	f023 0301 	bic.w	r3, r3, #1
 800737e:	6713      	str	r3, [r2, #112]	; 0x70
 8007380:	4b55      	ldr	r3, [pc, #340]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007384:	4a54      	ldr	r2, [pc, #336]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007386:	f023 0304 	bic.w	r3, r3, #4
 800738a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d015      	beq.n	80073c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007394:	f7fe f8a4 	bl	80054e0 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800739a:	e00a      	b.n	80073b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800739c:	f7fe f8a0 	bl	80054e0 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e0cb      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b2:	4b49      	ldr	r3, [pc, #292]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80073b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0ee      	beq.n	800739c <HAL_RCC_OscConfig+0x334>
 80073be:	e014      	b.n	80073ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073c0:	f7fe f88e 	bl	80054e0 <HAL_GetTick>
 80073c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073c6:	e00a      	b.n	80073de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073c8:	f7fe f88a 	bl	80054e0 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e0b5      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073de:	4b3e      	ldr	r3, [pc, #248]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1ee      	bne.n	80073c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d105      	bne.n	80073fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f0:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	4a38      	ldr	r2, [pc, #224]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80073f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80a1 	beq.w	8007548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007406:	4b34      	ldr	r3, [pc, #208]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 030c 	and.w	r3, r3, #12
 800740e:	2b08      	cmp	r3, #8
 8007410:	d05c      	beq.n	80074cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d141      	bne.n	800749e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800741a:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <HAL_RCC_OscConfig+0x478>)
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007420:	f7fe f85e 	bl	80054e0 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007428:	f7fe f85a 	bl	80054e0 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e087      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800743a:	4b27      	ldr	r3, [pc, #156]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f0      	bne.n	8007428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	69da      	ldr	r2, [r3, #28]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	019b      	lsls	r3, r3, #6
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	085b      	lsrs	r3, r3, #1
 800745e:	3b01      	subs	r3, #1
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	061b      	lsls	r3, r3, #24
 800746a:	491b      	ldr	r1, [pc, #108]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 800746c:	4313      	orrs	r3, r2
 800746e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007470:	4b1b      	ldr	r3, [pc, #108]	; (80074e0 <HAL_RCC_OscConfig+0x478>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007476:	f7fe f833 	bl	80054e0 <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800747e:	f7fe f82f 	bl	80054e0 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e05c      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007490:	4b11      	ldr	r3, [pc, #68]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0f0      	beq.n	800747e <HAL_RCC_OscConfig+0x416>
 800749c:	e054      	b.n	8007548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749e:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <HAL_RCC_OscConfig+0x478>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a4:	f7fe f81c 	bl	80054e0 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fe f818 	bl	80054e0 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e045      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074be:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <HAL_RCC_OscConfig+0x470>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f0      	bne.n	80074ac <HAL_RCC_OscConfig+0x444>
 80074ca:	e03d      	b.n	8007548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d107      	bne.n	80074e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e038      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40007000 	.word	0x40007000
 80074e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074e4:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <HAL_RCC_OscConfig+0x4ec>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d028      	beq.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d121      	bne.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800750a:	429a      	cmp	r2, r3
 800750c:	d11a      	bne.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007514:	4013      	ands	r3, r2
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800751a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800751c:	4293      	cmp	r3, r2
 800751e:	d111      	bne.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	3b01      	subs	r3, #1
 800752e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007530:	429a      	cmp	r2, r3
 8007532:	d107      	bne.n	8007544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007540:	429a      	cmp	r2, r3
 8007542:	d001      	beq.n	8007548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	40023800 	.word	0x40023800

08007558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e0cc      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800756c:	4b68      	ldr	r3, [pc, #416]	; (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d90c      	bls.n	8007594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757a:	4b65      	ldr	r3, [pc, #404]	; (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007582:	4b63      	ldr	r3, [pc, #396]	; (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d001      	beq.n	8007594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0b8      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d020      	beq.n	80075e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075ac:	4b59      	ldr	r3, [pc, #356]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4a58      	ldr	r2, [pc, #352]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075c4:	4b53      	ldr	r3, [pc, #332]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	4a52      	ldr	r2, [pc, #328]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d0:	4b50      	ldr	r3, [pc, #320]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	494d      	ldr	r1, [pc, #308]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d044      	beq.n	8007678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d107      	bne.n	8007606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f6:	4b47      	ldr	r3, [pc, #284]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d119      	bne.n	8007636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e07f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d003      	beq.n	8007616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007612:	2b03      	cmp	r3, #3
 8007614:	d107      	bne.n	8007626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007616:	4b3f      	ldr	r3, [pc, #252]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e06f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007626:	4b3b      	ldr	r3, [pc, #236]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e067      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007636:	4b37      	ldr	r3, [pc, #220]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f023 0203 	bic.w	r2, r3, #3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	4934      	ldr	r1, [pc, #208]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007644:	4313      	orrs	r3, r2
 8007646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007648:	f7fd ff4a 	bl	80054e0 <HAL_GetTick>
 800764c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800764e:	e00a      	b.n	8007666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007650:	f7fd ff46 	bl	80054e0 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	f241 3288 	movw	r2, #5000	; 0x1388
 800765e:	4293      	cmp	r3, r2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e04f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007666:	4b2b      	ldr	r3, [pc, #172]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 020c 	and.w	r2, r3, #12
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	429a      	cmp	r2, r3
 8007676:	d1eb      	bne.n	8007650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007678:	4b25      	ldr	r3, [pc, #148]	; (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d20c      	bcs.n	80076a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007686:	4b22      	ldr	r3, [pc, #136]	; (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800768e:	4b20      	ldr	r3, [pc, #128]	; (8007710 <HAL_RCC_ClockConfig+0x1b8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d001      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e032      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ac:	4b19      	ldr	r3, [pc, #100]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4916      	ldr	r1, [pc, #88]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	490e      	ldr	r1, [pc, #56]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076de:	f000 f821 	bl	8007724 <HAL_RCC_GetSysClockFreq>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <HAL_RCC_ClockConfig+0x1bc>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	490a      	ldr	r1, [pc, #40]	; (8007718 <HAL_RCC_ClockConfig+0x1c0>)
 80076f0:	5ccb      	ldrb	r3, [r1, r3]
 80076f2:	fa22 f303 	lsr.w	r3, r2, r3
 80076f6:	4a09      	ldr	r2, [pc, #36]	; (800771c <HAL_RCC_ClockConfig+0x1c4>)
 80076f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80076fa:	4b09      	ldr	r3, [pc, #36]	; (8007720 <HAL_RCC_ClockConfig+0x1c8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fd feaa 	bl	8005458 <HAL_InitTick>

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40023c00 	.word	0x40023c00
 8007714:	40023800 	.word	0x40023800
 8007718:	0801d3dc 	.word	0x0801d3dc
 800771c:	20000048 	.word	0x20000048
 8007720:	2000004c 	.word	0x2000004c

08007724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007728:	b094      	sub	sp, #80	; 0x50
 800772a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	647b      	str	r3, [r7, #68]	; 0x44
 8007730:	2300      	movs	r3, #0
 8007732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007734:	2300      	movs	r3, #0
 8007736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800773c:	4b79      	ldr	r3, [pc, #484]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f003 030c 	and.w	r3, r3, #12
 8007744:	2b08      	cmp	r3, #8
 8007746:	d00d      	beq.n	8007764 <HAL_RCC_GetSysClockFreq+0x40>
 8007748:	2b08      	cmp	r3, #8
 800774a:	f200 80e1 	bhi.w	8007910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <HAL_RCC_GetSysClockFreq+0x34>
 8007752:	2b04      	cmp	r3, #4
 8007754:	d003      	beq.n	800775e <HAL_RCC_GetSysClockFreq+0x3a>
 8007756:	e0db      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007758:	4b73      	ldr	r3, [pc, #460]	; (8007928 <HAL_RCC_GetSysClockFreq+0x204>)
 800775a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800775c:	e0db      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800775e:	4b73      	ldr	r3, [pc, #460]	; (800792c <HAL_RCC_GetSysClockFreq+0x208>)
 8007760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007762:	e0d8      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007764:	4b6f      	ldr	r3, [pc, #444]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800776c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800776e:	4b6d      	ldr	r3, [pc, #436]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d063      	beq.n	8007842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800777a:	4b6a      	ldr	r3, [pc, #424]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	099b      	lsrs	r3, r3, #6
 8007780:	2200      	movs	r2, #0
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
 8007784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778c:	633b      	str	r3, [r7, #48]	; 0x30
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
 8007792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007796:	4622      	mov	r2, r4
 8007798:	462b      	mov	r3, r5
 800779a:	f04f 0000 	mov.w	r0, #0
 800779e:	f04f 0100 	mov.w	r1, #0
 80077a2:	0159      	lsls	r1, r3, #5
 80077a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077a8:	0150      	lsls	r0, r2, #5
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4621      	mov	r1, r4
 80077b0:	1a51      	subs	r1, r2, r1
 80077b2:	6139      	str	r1, [r7, #16]
 80077b4:	4629      	mov	r1, r5
 80077b6:	eb63 0301 	sbc.w	r3, r3, r1
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077c8:	4659      	mov	r1, fp
 80077ca:	018b      	lsls	r3, r1, #6
 80077cc:	4651      	mov	r1, sl
 80077ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077d2:	4651      	mov	r1, sl
 80077d4:	018a      	lsls	r2, r1, #6
 80077d6:	4651      	mov	r1, sl
 80077d8:	ebb2 0801 	subs.w	r8, r2, r1
 80077dc:	4659      	mov	r1, fp
 80077de:	eb63 0901 	sbc.w	r9, r3, r1
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077f6:	4690      	mov	r8, r2
 80077f8:	4699      	mov	r9, r3
 80077fa:	4623      	mov	r3, r4
 80077fc:	eb18 0303 	adds.w	r3, r8, r3
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	462b      	mov	r3, r5
 8007804:	eb49 0303 	adc.w	r3, r9, r3
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	f04f 0300 	mov.w	r3, #0
 8007812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007816:	4629      	mov	r1, r5
 8007818:	024b      	lsls	r3, r1, #9
 800781a:	4621      	mov	r1, r4
 800781c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007820:	4621      	mov	r1, r4
 8007822:	024a      	lsls	r2, r1, #9
 8007824:	4610      	mov	r0, r2
 8007826:	4619      	mov	r1, r3
 8007828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800782a:	2200      	movs	r2, #0
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
 800782e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007834:	f7f9 fa82 	bl	8000d3c <__aeabi_uldivmod>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4613      	mov	r3, r2
 800783e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007840:	e058      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007842:	4b38      	ldr	r3, [pc, #224]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	2200      	movs	r2, #0
 800784a:	4618      	mov	r0, r3
 800784c:	4611      	mov	r1, r2
 800784e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	2300      	movs	r3, #0
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
 8007858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800785c:	4642      	mov	r2, r8
 800785e:	464b      	mov	r3, r9
 8007860:	f04f 0000 	mov.w	r0, #0
 8007864:	f04f 0100 	mov.w	r1, #0
 8007868:	0159      	lsls	r1, r3, #5
 800786a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800786e:	0150      	lsls	r0, r2, #5
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4641      	mov	r1, r8
 8007876:	ebb2 0a01 	subs.w	sl, r2, r1
 800787a:	4649      	mov	r1, r9
 800787c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800788c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007894:	ebb2 040a 	subs.w	r4, r2, sl
 8007898:	eb63 050b 	sbc.w	r5, r3, fp
 800789c:	f04f 0200 	mov.w	r2, #0
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	00eb      	lsls	r3, r5, #3
 80078a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078aa:	00e2      	lsls	r2, r4, #3
 80078ac:	4614      	mov	r4, r2
 80078ae:	461d      	mov	r5, r3
 80078b0:	4643      	mov	r3, r8
 80078b2:	18e3      	adds	r3, r4, r3
 80078b4:	603b      	str	r3, [r7, #0]
 80078b6:	464b      	mov	r3, r9
 80078b8:	eb45 0303 	adc.w	r3, r5, r3
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ca:	4629      	mov	r1, r5
 80078cc:	028b      	lsls	r3, r1, #10
 80078ce:	4621      	mov	r1, r4
 80078d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078d4:	4621      	mov	r1, r4
 80078d6:	028a      	lsls	r2, r1, #10
 80078d8:	4610      	mov	r0, r2
 80078da:	4619      	mov	r1, r3
 80078dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078de:	2200      	movs	r2, #0
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	61fa      	str	r2, [r7, #28]
 80078e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078e8:	f7f9 fa28 	bl	8000d3c <__aeabi_uldivmod>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4613      	mov	r3, r2
 80078f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078f4:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	0c1b      	lsrs	r3, r3, #16
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	3301      	adds	r3, #1
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007908:	fbb2 f3f3 	udiv	r3, r2, r3
 800790c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800790e:	e002      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <HAL_RCC_GetSysClockFreq+0x204>)
 8007912:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007918:	4618      	mov	r0, r3
 800791a:	3750      	adds	r7, #80	; 0x50
 800791c:	46bd      	mov	sp, r7
 800791e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007922:	bf00      	nop
 8007924:	40023800 	.word	0x40023800
 8007928:	00f42400 	.word	0x00f42400
 800792c:	007a1200 	.word	0x007a1200

08007930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007934:	4b03      	ldr	r3, [pc, #12]	; (8007944 <HAL_RCC_GetHCLKFreq+0x14>)
 8007936:	681b      	ldr	r3, [r3, #0]
}
 8007938:	4618      	mov	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000048 	.word	0x20000048

08007948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e07b      	b.n	8007a52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	d108      	bne.n	8007974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800796a:	d009      	beq.n	8007980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	61da      	str	r2, [r3, #28]
 8007972:	e005      	b.n	8007980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fd fbb4 	bl	8005108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a04:	ea42 0103 	orr.w	r1, r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	0c1b      	lsrs	r3, r3, #16
 8007a1e:	f003 0104 	and.w	r1, r3, #4
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	f003 0210 	and.w	r2, r3, #16
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b088      	sub	sp, #32
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_SPI_Transmit+0x22>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e126      	b.n	8007cca <HAL_SPI_Transmit+0x270>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a84:	f7fd fd2c 	bl	80054e0 <HAL_GetTick>
 8007a88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d002      	beq.n	8007aa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a9e:	e10b      	b.n	8007cb8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <HAL_SPI_Transmit+0x52>
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ab0:	e102      	b.n	8007cb8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	88fa      	ldrh	r2, [r7, #6]
 8007aca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	88fa      	ldrh	r2, [r7, #6]
 8007ad0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af8:	d10f      	bne.n	8007b1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	d007      	beq.n	8007b38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b40:	d14b      	bne.n	8007bda <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_SPI_Transmit+0xf6>
 8007b4a:	8afb      	ldrh	r3, [r7, #22]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d13e      	bne.n	8007bce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b54:	881a      	ldrh	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b60:	1c9a      	adds	r2, r3, #2
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b74:	e02b      	b.n	8007bce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d112      	bne.n	8007baa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	881a      	ldrh	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	1c9a      	adds	r2, r3, #2
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ba8:	e011      	b.n	8007bce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007baa:	f7fd fc99 	bl	80054e0 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d803      	bhi.n	8007bc2 <HAL_SPI_Transmit+0x168>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d102      	bne.n	8007bc8 <HAL_SPI_Transmit+0x16e>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bcc:	e074      	b.n	8007cb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1ce      	bne.n	8007b76 <HAL_SPI_Transmit+0x11c>
 8007bd8:	e04c      	b.n	8007c74 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <HAL_SPI_Transmit+0x18e>
 8007be2:	8afb      	ldrh	r3, [r7, #22]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d140      	bne.n	8007c6a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	330c      	adds	r3, #12
 8007bf2:	7812      	ldrb	r2, [r2, #0]
 8007bf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007c0e:	e02c      	b.n	8007c6a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d113      	bne.n	8007c46 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	330c      	adds	r3, #12
 8007c28:	7812      	ldrb	r2, [r2, #0]
 8007c2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c44:	e011      	b.n	8007c6a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c46:	f7fd fc4b 	bl	80054e0 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d803      	bhi.n	8007c5e <HAL_SPI_Transmit+0x204>
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d102      	bne.n	8007c64 <HAL_SPI_Transmit+0x20a>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c68:	e026      	b.n	8007cb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1cd      	bne.n	8007c10 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 fbcb 	bl	8008414 <SPI_EndRxTxTransaction>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	77fb      	strb	r3, [r7, #31]
 8007cb4:	e000      	b.n	8007cb8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007cb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3720      	adds	r7, #32
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b088      	sub	sp, #32
 8007cd6:	af02      	add	r7, sp, #8
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cee:	d112      	bne.n	8007d16 <HAL_SPI_Receive+0x44>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10e      	bne.n	8007d16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2204      	movs	r2, #4
 8007cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4613      	mov	r3, r2
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f8f1 	bl	8007ef4 <HAL_SPI_TransmitReceive>
 8007d12:	4603      	mov	r3, r0
 8007d14:	e0ea      	b.n	8007eec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_SPI_Receive+0x52>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e0e3      	b.n	8007eec <HAL_SPI_Receive+0x21a>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d2c:	f7fd fbd8 	bl	80054e0 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d002      	beq.n	8007d44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d42:	e0ca      	b.n	8007eda <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <HAL_SPI_Receive+0x7e>
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d54:	e0c1      	b.n	8007eda <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2204      	movs	r2, #4
 8007d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	88fa      	ldrh	r2, [r7, #6]
 8007d6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d9c:	d10f      	bne.n	8007dbe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007dbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d007      	beq.n	8007ddc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d162      	bne.n	8007eaa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007de4:	e02e      	b.n	8007e44 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d115      	bne.n	8007e20 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f103 020c 	add.w	r2, r3, #12
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e00:	7812      	ldrb	r2, [r2, #0]
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e1e:	e011      	b.n	8007e44 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e20:	f7fd fb5e 	bl	80054e0 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d803      	bhi.n	8007e38 <HAL_SPI_Receive+0x166>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	d102      	bne.n	8007e3e <HAL_SPI_Receive+0x16c>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d102      	bne.n	8007e44 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e42:	e04a      	b.n	8007eda <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1cb      	bne.n	8007de6 <HAL_SPI_Receive+0x114>
 8007e4e:	e031      	b.n	8007eb4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d113      	bne.n	8007e86 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	b292      	uxth	r2, r2
 8007e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	1c9a      	adds	r2, r3, #2
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e84:	e011      	b.n	8007eaa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e86:	f7fd fb2b 	bl	80054e0 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d803      	bhi.n	8007e9e <HAL_SPI_Receive+0x1cc>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d102      	bne.n	8007ea4 <HAL_SPI_Receive+0x1d2>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d102      	bne.n	8007eaa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ea8:	e017      	b.n	8007eda <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1cd      	bne.n	8007e50 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fa45 	bl	8008348 <SPI_EndRxTransaction>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
 8007ed6:	e000      	b.n	8007eda <HAL_SPI_Receive+0x208>
  }

error :
 8007ed8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08c      	sub	sp, #48	; 0x30
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f02:	2301      	movs	r3, #1
 8007f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <HAL_SPI_TransmitReceive+0x26>
 8007f16:	2302      	movs	r3, #2
 8007f18:	e18a      	b.n	8008230 <HAL_SPI_TransmitReceive+0x33c>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f22:	f7fd fadd 	bl	80054e0 <HAL_GetTick>
 8007f26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007f38:	887b      	ldrh	r3, [r7, #2]
 8007f3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d00f      	beq.n	8007f64 <HAL_SPI_TransmitReceive+0x70>
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f4a:	d107      	bne.n	8007f5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d103      	bne.n	8007f5c <HAL_SPI_TransmitReceive+0x68>
 8007f54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d003      	beq.n	8007f64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f62:	e15b      	b.n	800821c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <HAL_SPI_TransmitReceive+0x82>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <HAL_SPI_TransmitReceive+0x82>
 8007f70:	887b      	ldrh	r3, [r7, #2]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d103      	bne.n	8007f7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f7c:	e14e      	b.n	800821c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d003      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2205      	movs	r2, #5
 8007f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	887a      	ldrh	r2, [r7, #2]
 8007fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	887a      	ldrh	r2, [r7, #2]
 8007fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	887a      	ldrh	r2, [r7, #2]
 8007fb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	887a      	ldrh	r2, [r7, #2]
 8007fba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d007      	beq.n	8007fe6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fe4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fee:	d178      	bne.n	80080e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <HAL_SPI_TransmitReceive+0x10a>
 8007ff8:	8b7b      	ldrh	r3, [r7, #26]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d166      	bne.n	80080cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	1c9a      	adds	r2, r3, #2
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008022:	e053      	b.n	80080cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b02      	cmp	r3, #2
 8008030:	d11b      	bne.n	800806a <HAL_SPI_TransmitReceive+0x176>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d016      	beq.n	800806a <HAL_SPI_TransmitReceive+0x176>
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	2b01      	cmp	r3, #1
 8008040:	d113      	bne.n	800806a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	881a      	ldrh	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008052:	1c9a      	adds	r2, r3, #2
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b01      	subs	r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b01      	cmp	r3, #1
 8008076:	d119      	bne.n	80080ac <HAL_SPI_TransmitReceive+0x1b8>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d014      	beq.n	80080ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	b292      	uxth	r2, r2
 800808e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	1c9a      	adds	r2, r3, #2
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080a8:	2301      	movs	r3, #1
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80080ac:	f7fd fa18 	bl	80054e0 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d807      	bhi.n	80080cc <HAL_SPI_TransmitReceive+0x1d8>
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d003      	beq.n	80080cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80080ca:	e0a7      	b.n	800821c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1a6      	bne.n	8008024 <HAL_SPI_TransmitReceive+0x130>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1a1      	bne.n	8008024 <HAL_SPI_TransmitReceive+0x130>
 80080e0:	e07c      	b.n	80081dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <HAL_SPI_TransmitReceive+0x1fc>
 80080ea:	8b7b      	ldrh	r3, [r7, #26]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d16b      	bne.n	80081c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	330c      	adds	r3, #12
 80080fa:	7812      	ldrb	r2, [r2, #0]
 80080fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800810c:	b29b      	uxth	r3, r3
 800810e:	3b01      	subs	r3, #1
 8008110:	b29a      	uxth	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008116:	e057      	b.n	80081c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b02      	cmp	r3, #2
 8008124:	d11c      	bne.n	8008160 <HAL_SPI_TransmitReceive+0x26c>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800812a:	b29b      	uxth	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d017      	beq.n	8008160 <HAL_SPI_TransmitReceive+0x26c>
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	2b01      	cmp	r3, #1
 8008134:	d114      	bne.n	8008160 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	330c      	adds	r3, #12
 8008140:	7812      	ldrb	r2, [r2, #0]
 8008142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b01      	cmp	r3, #1
 800816c:	d119      	bne.n	80081a2 <HAL_SPI_TransmitReceive+0x2ae>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008172:	b29b      	uxth	r3, r3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d014      	beq.n	80081a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	1c5a      	adds	r2, r3, #1
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008194:	b29b      	uxth	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800819e:	2301      	movs	r3, #1
 80081a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80081a2:	f7fd f99d 	bl	80054e0 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d803      	bhi.n	80081ba <HAL_SPI_TransmitReceive+0x2c6>
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b8:	d102      	bne.n	80081c0 <HAL_SPI_TransmitReceive+0x2cc>
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80081c6:	e029      	b.n	800821c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1a2      	bne.n	8008118 <HAL_SPI_TransmitReceive+0x224>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d19d      	bne.n	8008118 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f917 	bl	8008414 <SPI_EndRxTxTransaction>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d006      	beq.n	80081fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2220      	movs	r2, #32
 80081f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80081f8:	e010      	b.n	800821c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10b      	bne.n	800821a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	e000      	b.n	800821c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800821a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800822c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008230:	4618      	mov	r0, r3
 8008232:	3730      	adds	r7, #48	; 0x30
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b088      	sub	sp, #32
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	4613      	mov	r3, r2
 8008246:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008248:	f7fd f94a 	bl	80054e0 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4413      	add	r3, r2
 8008256:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008258:	f7fd f942 	bl	80054e0 <HAL_GetTick>
 800825c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800825e:	4b39      	ldr	r3, [pc, #228]	; (8008344 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	015b      	lsls	r3, r3, #5
 8008264:	0d1b      	lsrs	r3, r3, #20
 8008266:	69fa      	ldr	r2, [r7, #28]
 8008268:	fb02 f303 	mul.w	r3, r2, r3
 800826c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800826e:	e054      	b.n	800831a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d050      	beq.n	800831a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008278:	f7fd f932 	bl	80054e0 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	429a      	cmp	r2, r3
 8008286:	d902      	bls.n	800828e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d13d      	bne.n	800830a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800829c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082a6:	d111      	bne.n	80082cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b0:	d004      	beq.n	80082bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ba:	d107      	bne.n	80082cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082d4:	d10f      	bne.n	80082f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e017      	b.n	800833a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	3b01      	subs	r3, #1
 8008318:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4013      	ands	r3, r2
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	429a      	cmp	r2, r3
 8008328:	bf0c      	ite	eq
 800832a:	2301      	moveq	r3, #1
 800832c:	2300      	movne	r3, #0
 800832e:	b2db      	uxtb	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	429a      	cmp	r2, r3
 8008336:	d19b      	bne.n	8008270 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000048 	.word	0x20000048

08008348 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af02      	add	r7, sp, #8
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800835c:	d111      	bne.n	8008382 <SPI_EndRxTransaction+0x3a>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008366:	d004      	beq.n	8008372 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008370:	d107      	bne.n	8008382 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008380:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800838a:	d12a      	bne.n	80083e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008394:	d012      	beq.n	80083bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2200      	movs	r2, #0
 800839e:	2180      	movs	r1, #128	; 0x80
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7ff ff49 	bl	8008238 <SPI_WaitFlagStateUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d02d      	beq.n	8008408 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b0:	f043 0220 	orr.w	r2, r3, #32
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e026      	b.n	800840a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2200      	movs	r2, #0
 80083c4:	2101      	movs	r1, #1
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7ff ff36 	bl	8008238 <SPI_WaitFlagStateUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d01a      	beq.n	8008408 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	f043 0220 	orr.w	r2, r3, #32
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e013      	b.n	800840a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2200      	movs	r2, #0
 80083ea:	2101      	movs	r1, #1
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff ff23 	bl	8008238 <SPI_WaitFlagStateUntilTimeout>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d007      	beq.n	8008408 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fc:	f043 0220 	orr.w	r2, r3, #32
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e000      	b.n	800840a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af02      	add	r7, sp, #8
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008420:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <SPI_EndRxTxTransaction+0x7c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a1b      	ldr	r2, [pc, #108]	; (8008494 <SPI_EndRxTxTransaction+0x80>)
 8008426:	fba2 2303 	umull	r2, r3, r2, r3
 800842a:	0d5b      	lsrs	r3, r3, #21
 800842c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008430:	fb02 f303 	mul.w	r3, r2, r3
 8008434:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800843e:	d112      	bne.n	8008466 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2200      	movs	r2, #0
 8008448:	2180      	movs	r1, #128	; 0x80
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff fef4 	bl	8008238 <SPI_WaitFlagStateUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d016      	beq.n	8008484 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845a:	f043 0220 	orr.w	r2, r3, #32
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e00f      	b.n	8008486 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00a      	beq.n	8008482 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	3b01      	subs	r3, #1
 8008470:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847c:	2b80      	cmp	r3, #128	; 0x80
 800847e:	d0f2      	beq.n	8008466 <SPI_EndRxTxTransaction+0x52>
 8008480:	e000      	b.n	8008484 <SPI_EndRxTxTransaction+0x70>
        break;
 8008482:	bf00      	nop
  }

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000048 	.word	0x20000048
 8008494:	165e9f81 	.word	0x165e9f81

08008498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008498:	b084      	sub	sp, #16
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	f107 001c 	add.w	r0, r7, #28
 80084a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d122      	bne.n	80084f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80084c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d105      	bne.n	80084ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 fbee 	bl	8009ccc <USB_CoreReset>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
 80084f4:	e01a      	b.n	800852c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 fbe2 	bl	8009ccc <USB_CoreReset>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800850c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
 800851e:	e005      	b.n	800852c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	2b01      	cmp	r3, #1
 8008530:	d10b      	bne.n	800854a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f043 0206 	orr.w	r2, r3, #6
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f043 0220 	orr.w	r2, r3, #32
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008556:	b004      	add	sp, #16
 8008558:	4770      	bx	lr
	...

0800855c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d165      	bne.n	800863c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4a41      	ldr	r2, [pc, #260]	; (8008678 <USB_SetTurnaroundTime+0x11c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d906      	bls.n	8008586 <USB_SetTurnaroundTime+0x2a>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4a40      	ldr	r2, [pc, #256]	; (800867c <USB_SetTurnaroundTime+0x120>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d202      	bcs.n	8008586 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008580:	230f      	movs	r3, #15
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	e062      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	4a3c      	ldr	r2, [pc, #240]	; (800867c <USB_SetTurnaroundTime+0x120>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d306      	bcc.n	800859c <USB_SetTurnaroundTime+0x40>
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4a3b      	ldr	r2, [pc, #236]	; (8008680 <USB_SetTurnaroundTime+0x124>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d202      	bcs.n	800859c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008596:	230e      	movs	r3, #14
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	e057      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	4a38      	ldr	r2, [pc, #224]	; (8008680 <USB_SetTurnaroundTime+0x124>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d306      	bcc.n	80085b2 <USB_SetTurnaroundTime+0x56>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4a37      	ldr	r2, [pc, #220]	; (8008684 <USB_SetTurnaroundTime+0x128>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d202      	bcs.n	80085b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80085ac:	230d      	movs	r3, #13
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	e04c      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	4a33      	ldr	r2, [pc, #204]	; (8008684 <USB_SetTurnaroundTime+0x128>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d306      	bcc.n	80085c8 <USB_SetTurnaroundTime+0x6c>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4a32      	ldr	r2, [pc, #200]	; (8008688 <USB_SetTurnaroundTime+0x12c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d802      	bhi.n	80085c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085c2:	230c      	movs	r3, #12
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	e041      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4a2f      	ldr	r2, [pc, #188]	; (8008688 <USB_SetTurnaroundTime+0x12c>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d906      	bls.n	80085de <USB_SetTurnaroundTime+0x82>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4a2e      	ldr	r2, [pc, #184]	; (800868c <USB_SetTurnaroundTime+0x130>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d802      	bhi.n	80085de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80085d8:	230b      	movs	r3, #11
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	e036      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	4a2a      	ldr	r2, [pc, #168]	; (800868c <USB_SetTurnaroundTime+0x130>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d906      	bls.n	80085f4 <USB_SetTurnaroundTime+0x98>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	4a29      	ldr	r2, [pc, #164]	; (8008690 <USB_SetTurnaroundTime+0x134>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d802      	bhi.n	80085f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085ee:	230a      	movs	r3, #10
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	e02b      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4a26      	ldr	r2, [pc, #152]	; (8008690 <USB_SetTurnaroundTime+0x134>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d906      	bls.n	800860a <USB_SetTurnaroundTime+0xae>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4a25      	ldr	r2, [pc, #148]	; (8008694 <USB_SetTurnaroundTime+0x138>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d202      	bcs.n	800860a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008604:	2309      	movs	r3, #9
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e020      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	4a21      	ldr	r2, [pc, #132]	; (8008694 <USB_SetTurnaroundTime+0x138>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d306      	bcc.n	8008620 <USB_SetTurnaroundTime+0xc4>
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4a20      	ldr	r2, [pc, #128]	; (8008698 <USB_SetTurnaroundTime+0x13c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d802      	bhi.n	8008620 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800861a:	2308      	movs	r3, #8
 800861c:	617b      	str	r3, [r7, #20]
 800861e:	e015      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4a1d      	ldr	r2, [pc, #116]	; (8008698 <USB_SetTurnaroundTime+0x13c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d906      	bls.n	8008636 <USB_SetTurnaroundTime+0xda>
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4a1c      	ldr	r2, [pc, #112]	; (800869c <USB_SetTurnaroundTime+0x140>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d202      	bcs.n	8008636 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008630:	2307      	movs	r3, #7
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e00a      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008636:	2306      	movs	r3, #6
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	e007      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d102      	bne.n	8008648 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008642:	2309      	movs	r3, #9
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	e001      	b.n	800864c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008648:	2309      	movs	r3, #9
 800864a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	029b      	lsls	r3, r3, #10
 8008660:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008664:	431a      	orrs	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	00d8acbf 	.word	0x00d8acbf
 800867c:	00e4e1c0 	.word	0x00e4e1c0
 8008680:	00f42400 	.word	0x00f42400
 8008684:	01067380 	.word	0x01067380
 8008688:	011a499f 	.word	0x011a499f
 800868c:	01312cff 	.word	0x01312cff
 8008690:	014ca43f 	.word	0x014ca43f
 8008694:	016e3600 	.word	0x016e3600
 8008698:	01a6ab1f 	.word	0x01a6ab1f
 800869c:	01e84800 	.word	0x01e84800

080086a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f043 0201 	orr.w	r2, r3, #1
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f023 0201 	bic.w	r2, r3, #1
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d115      	bne.n	8008732 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008712:	2001      	movs	r0, #1
 8008714:	f7fc fef0 	bl	80054f8 <HAL_Delay>
      ms++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3301      	adds	r3, #1
 800871c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 fa45 	bl	8009bae <USB_GetMode>
 8008724:	4603      	mov	r3, r0
 8008726:	2b01      	cmp	r3, #1
 8008728:	d01e      	beq.n	8008768 <USB_SetCurrentMode+0x84>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b31      	cmp	r3, #49	; 0x31
 800872e:	d9f0      	bls.n	8008712 <USB_SetCurrentMode+0x2e>
 8008730:	e01a      	b.n	8008768 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d115      	bne.n	8008764 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008744:	2001      	movs	r0, #1
 8008746:	f7fc fed7 	bl	80054f8 <HAL_Delay>
      ms++;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 fa2c 	bl	8009bae <USB_GetMode>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d005      	beq.n	8008768 <USB_SetCurrentMode+0x84>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b31      	cmp	r3, #49	; 0x31
 8008760:	d9f0      	bls.n	8008744 <USB_SetCurrentMode+0x60>
 8008762:	e001      	b.n	8008768 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e005      	b.n	8008774 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b32      	cmp	r3, #50	; 0x32
 800876c:	d101      	bne.n	8008772 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e000      	b.n	8008774 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800877c:	b084      	sub	sp, #16
 800877e:	b580      	push	{r7, lr}
 8008780:	b086      	sub	sp, #24
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800878a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	e009      	b.n	80087b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3340      	adds	r3, #64	; 0x40
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	3301      	adds	r3, #1
 80087ae:	613b      	str	r3, [r7, #16]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	2b0e      	cmp	r3, #14
 80087b4:	d9f2      	bls.n	800879c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d11c      	bne.n	80087f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ca:	f043 0302 	orr.w	r3, r3, #2
 80087ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	639a      	str	r2, [r3, #56]	; 0x38
 80087f4:	e00b      	b.n	800880e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008814:	461a      	mov	r2, r3
 8008816:	2300      	movs	r3, #0
 8008818:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008820:	4619      	mov	r1, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008828:	461a      	mov	r2, r3
 800882a:	680b      	ldr	r3, [r1, #0]
 800882c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008830:	2b01      	cmp	r3, #1
 8008832:	d10c      	bne.n	800884e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d104      	bne.n	8008844 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800883a:	2100      	movs	r1, #0
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f965 	bl	8008b0c <USB_SetDevSpeed>
 8008842:	e008      	b.n	8008856 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008844:	2101      	movs	r1, #1
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f960 	bl	8008b0c <USB_SetDevSpeed>
 800884c:	e003      	b.n	8008856 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800884e:	2103      	movs	r1, #3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f95b 	bl	8008b0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008856:	2110      	movs	r1, #16
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f8f3 	bl	8008a44 <USB_FlushTxFifo>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f91f 	bl	8008aac <USB_FlushRxFifo>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887e:	461a      	mov	r2, r3
 8008880:	2300      	movs	r3, #0
 8008882:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800888a:	461a      	mov	r2, r3
 800888c:	2300      	movs	r3, #0
 800888e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008896:	461a      	mov	r2, r3
 8008898:	2300      	movs	r3, #0
 800889a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800889c:	2300      	movs	r3, #0
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	e043      	b.n	800892a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b8:	d118      	bne.n	80088ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088cc:	461a      	mov	r2, r3
 80088ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	e013      	b.n	80088fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e2:	461a      	mov	r2, r3
 80088e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	e008      	b.n	80088fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f8:	461a      	mov	r2, r3
 80088fa:	2300      	movs	r3, #0
 80088fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890a:	461a      	mov	r2, r3
 800890c:	2300      	movs	r3, #0
 800890e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891c:	461a      	mov	r2, r3
 800891e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008922:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	3301      	adds	r3, #1
 8008928:	613b      	str	r3, [r7, #16]
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	429a      	cmp	r2, r3
 8008930:	d3b7      	bcc.n	80088a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	e043      	b.n	80089c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800894a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800894e:	d118      	bne.n	8008982 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008962:	461a      	mov	r2, r3
 8008964:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	e013      	b.n	8008994 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008978:	461a      	mov	r2, r3
 800897a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	e008      	b.n	8008994 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898e:	461a      	mov	r2, r3
 8008990:	2300      	movs	r3, #0
 8008992:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	461a      	mov	r2, r3
 80089a2:	2300      	movs	r3, #0
 80089a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b2:	461a      	mov	r2, r3
 80089b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	3301      	adds	r3, #1
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d3b7      	bcc.n	8008938 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	f043 0210 	orr.w	r2, r3, #16
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	699a      	ldr	r2, [r3, #24]
 8008a00:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <USB_DevInit+0x2c4>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f043 0208 	orr.w	r2, r3, #8
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d107      	bne.n	8008a30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a28:	f043 0304 	orr.w	r3, r3, #4
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a3c:	b004      	add	sp, #16
 8008a3e:	4770      	bx	lr
 8008a40:	803c3800 	.word	0x803c3800

08008a44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3301      	adds	r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4a13      	ldr	r2, [pc, #76]	; (8008aa8 <USB_FlushTxFifo+0x64>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d901      	bls.n	8008a64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e01b      	b.n	8008a9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	daf2      	bge.n	8008a52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	019b      	lsls	r3, r3, #6
 8008a74:	f043 0220 	orr.w	r2, r3, #32
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4a08      	ldr	r2, [pc, #32]	; (8008aa8 <USB_FlushTxFifo+0x64>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d901      	bls.n	8008a8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e006      	b.n	8008a9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	d0f0      	beq.n	8008a7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	00030d40 	.word	0x00030d40

08008aac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4a11      	ldr	r2, [pc, #68]	; (8008b08 <USB_FlushRxFifo+0x5c>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d901      	bls.n	8008aca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e018      	b.n	8008afc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	daf2      	bge.n	8008ab8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2210      	movs	r2, #16
 8008ada:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4a08      	ldr	r2, [pc, #32]	; (8008b08 <USB_FlushRxFifo+0x5c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d901      	bls.n	8008aee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e006      	b.n	8008afc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f003 0310 	and.w	r3, r3, #16
 8008af6:	2b10      	cmp	r3, #16
 8008af8:	d0f0      	beq.n	8008adc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	00030d40 	.word	0x00030d40

08008b0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b087      	sub	sp, #28
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f003 0306 	and.w	r3, r3, #6
 8008b56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d102      	bne.n	8008b64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	75fb      	strb	r3, [r7, #23]
 8008b62:	e00a      	b.n	8008b7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d002      	beq.n	8008b70 <USB_GetDevSpeed+0x32>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b06      	cmp	r3, #6
 8008b6e:	d102      	bne.n	8008b76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b70:	2302      	movs	r3, #2
 8008b72:	75fb      	strb	r3, [r7, #23]
 8008b74:	e001      	b.n	8008b7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b76:	230f      	movs	r3, #15
 8008b78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	785b      	ldrb	r3, [r3, #1]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d13a      	bne.n	8008c1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008baa:	69da      	ldr	r2, [r3, #28]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	68f9      	ldr	r1, [r7, #12]
 8008bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d155      	bne.n	8008c88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	791b      	ldrb	r3, [r3, #4]
 8008bf6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bf8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	059b      	lsls	r3, r3, #22
 8008bfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c00:	4313      	orrs	r3, r2
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	0151      	lsls	r1, r2, #5
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	440a      	add	r2, r1
 8008c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	e036      	b.n	8008c88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c20:	69da      	ldr	r2, [r3, #28]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c30:	041b      	lsls	r3, r3, #16
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d11a      	bne.n	8008c88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	791b      	ldrb	r3, [r3, #4]
 8008c6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c6e:	430b      	orrs	r3, r1
 8008c70:	4313      	orrs	r3, r2
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	0151      	lsls	r1, r2, #5
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	440a      	add	r2, r1
 8008c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
	...

08008c98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	785b      	ldrb	r3, [r3, #1]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d161      	bne.n	8008d78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cca:	d11f      	bne.n	8008d0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	0151      	lsls	r1, r2, #5
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	440a      	add	r2, r1
 8008d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	43db      	mvns	r3, r3
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d36:	69da      	ldr	r2, [r3, #28]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	2101      	movs	r1, #1
 8008d42:	fa01 f303 	lsl.w	r3, r1, r3
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	68f9      	ldr	r1, [r7, #12]
 8008d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d50:	4013      	ands	r3, r2
 8008d52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	0159      	lsls	r1, r3, #5
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	440b      	add	r3, r1
 8008d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4b35      	ldr	r3, [pc, #212]	; (8008e48 <USB_DeactivateEndpoint+0x1b0>)
 8008d72:	4013      	ands	r3, r2
 8008d74:	600b      	str	r3, [r1, #0]
 8008d76:	e060      	b.n	8008e3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d8e:	d11f      	bne.n	8008dd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	0151      	lsls	r1, r2, #5
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	440a      	add	r2, r1
 8008da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008daa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008dae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	0151      	lsls	r1, r2, #5
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	440a      	add	r2, r1
 8008dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 030f 	and.w	r3, r3, #15
 8008de0:	2101      	movs	r1, #1
 8008de2:	fa01 f303 	lsl.w	r3, r1, r3
 8008de6:	041b      	lsls	r3, r3, #16
 8008de8:	43db      	mvns	r3, r3
 8008dea:	68f9      	ldr	r1, [r7, #12]
 8008dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008df0:	4013      	ands	r3, r2
 8008df2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfa:	69da      	ldr	r2, [r3, #28]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	f003 030f 	and.w	r3, r3, #15
 8008e04:	2101      	movs	r1, #1
 8008e06:	fa01 f303 	lsl.w	r3, r1, r3
 8008e0a:	041b      	lsls	r3, r3, #16
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	68f9      	ldr	r1, [r7, #12]
 8008e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e14:	4013      	ands	r3, r2
 8008e16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	0159      	lsls	r1, r3, #5
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	440b      	add	r3, r1
 8008e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e32:	4619      	mov	r1, r3
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <USB_DeactivateEndpoint+0x1b4>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	ec337800 	.word	0xec337800
 8008e4c:	eff37800 	.word	0xeff37800

08008e50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	; 0x28
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	785b      	ldrb	r3, [r3, #1]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	f040 815c 	bne.w	800912a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d132      	bne.n	8008ee0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	0151      	lsls	r1, r2, #5
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	440a      	add	r2, r1
 8008e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ebc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	0151      	lsls	r1, r2, #5
 8008ed0:	69fa      	ldr	r2, [r7, #28]
 8008ed2:	440a      	add	r2, r1
 8008ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed8:	0cdb      	lsrs	r3, r3, #19
 8008eda:	04db      	lsls	r3, r3, #19
 8008edc:	6113      	str	r3, [r2, #16]
 8008ede:	e074      	b.n	8008fca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	69fa      	ldr	r2, [r7, #28]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008efa:	0cdb      	lsrs	r3, r3, #19
 8008efc:	04db      	lsls	r3, r3, #19
 8008efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	0151      	lsls	r1, r2, #5
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	440a      	add	r2, r1
 8008f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f30:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	6999      	ldr	r1, [r3, #24]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	440b      	add	r3, r1
 8008f3c:	1e59      	subs	r1, r3, #1
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f46:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008f48:	4b9d      	ldr	r3, [pc, #628]	; (80091c0 <USB_EPStartXfer+0x370>)
 8008f4a:	400b      	ands	r3, r1
 8008f4c:	69b9      	ldr	r1, [r7, #24]
 8008f4e:	0148      	lsls	r0, r1, #5
 8008f50:	69f9      	ldr	r1, [r7, #28]
 8008f52:	4401      	add	r1, r0
 8008f54:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f68:	691a      	ldr	r2, [r3, #16]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f72:	69b9      	ldr	r1, [r7, #24]
 8008f74:	0148      	lsls	r0, r1, #5
 8008f76:	69f9      	ldr	r1, [r7, #28]
 8008f78:	4401      	add	r1, r0
 8008f7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	791b      	ldrb	r3, [r3, #4]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d11f      	bne.n	8008fca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	0151      	lsls	r1, r2, #5
 8008f9c:	69fa      	ldr	r2, [r7, #28]
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008fa8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	69fa      	ldr	r2, [r7, #28]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fc8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d14b      	bne.n	8009068 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d009      	beq.n	8008fec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	791b      	ldrb	r3, [r3, #4]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d128      	bne.n	8009046 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009000:	2b00      	cmp	r3, #0
 8009002:	d110      	bne.n	8009026 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800901e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	e00f      	b.n	8009046 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	69fa      	ldr	r2, [r7, #28]
 800903a:	440a      	add	r2, r1
 800903c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009044:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	0151      	lsls	r1, r2, #5
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	440a      	add	r2, r1
 800905c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009060:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	e133      	b.n	80092d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	0151      	lsls	r1, r2, #5
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	440a      	add	r2, r1
 800907e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009082:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009086:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	791b      	ldrb	r3, [r3, #4]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d015      	beq.n	80090bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 811b 	beq.w	80092d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	2101      	movs	r1, #1
 80090ac:	fa01 f303 	lsl.w	r3, r1, r3
 80090b0:	69f9      	ldr	r1, [r7, #28]
 80090b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b6:	4313      	orrs	r3, r2
 80090b8:	634b      	str	r3, [r1, #52]	; 0x34
 80090ba:	e109      	b.n	80092d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d110      	bne.n	80090ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	0151      	lsls	r1, r2, #5
 80090de:	69fa      	ldr	r2, [r7, #28]
 80090e0:	440a      	add	r2, r1
 80090e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	e00f      	b.n	800910e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	0151      	lsls	r1, r2, #5
 8009100:	69fa      	ldr	r2, [r7, #28]
 8009102:	440a      	add	r2, r1
 8009104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800910c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	6919      	ldr	r1, [r3, #16]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	781a      	ldrb	r2, [r3, #0]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	b298      	uxth	r0, r3
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	4603      	mov	r3, r0
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 fade 	bl	80096e4 <USB_WritePacket>
 8009128:	e0d2      	b.n	80092d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	69ba      	ldr	r2, [r7, #24]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009144:	0cdb      	lsrs	r3, r3, #19
 8009146:	04db      	lsls	r3, r3, #19
 8009148:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	0151      	lsls	r1, r2, #5
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	440a      	add	r2, r1
 8009160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009164:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009168:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800916c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d126      	bne.n	80091c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009182:	691a      	ldr	r2, [r3, #16]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800918c:	69b9      	ldr	r1, [r7, #24]
 800918e:	0148      	lsls	r0, r1, #5
 8009190:	69f9      	ldr	r1, [r7, #28]
 8009192:	4401      	add	r1, r0
 8009194:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009198:	4313      	orrs	r3, r2
 800919a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091ba:	6113      	str	r3, [r2, #16]
 80091bc:	e03a      	b.n	8009234 <USB_EPStartXfer+0x3e4>
 80091be:	bf00      	nop
 80091c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	699a      	ldr	r2, [r3, #24]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	4413      	add	r3, r2
 80091ce:	1e5a      	subs	r2, r3, #1
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	8afa      	ldrh	r2, [r7, #22]
 80091e0:	fb03 f202 	mul.w	r2, r3, r2
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	691a      	ldr	r2, [r3, #16]
 80091f6:	8afb      	ldrh	r3, [r7, #22]
 80091f8:	04d9      	lsls	r1, r3, #19
 80091fa:	4b38      	ldr	r3, [pc, #224]	; (80092dc <USB_EPStartXfer+0x48c>)
 80091fc:	400b      	ands	r3, r1
 80091fe:	69b9      	ldr	r1, [r7, #24]
 8009200:	0148      	lsls	r0, r1, #5
 8009202:	69f9      	ldr	r1, [r7, #28]
 8009204:	4401      	add	r1, r0
 8009206:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800920a:	4313      	orrs	r3, r2
 800920c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	015a      	lsls	r2, r3, #5
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	4413      	add	r3, r2
 8009216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009224:	69b9      	ldr	r1, [r7, #24]
 8009226:	0148      	lsls	r0, r1, #5
 8009228:	69f9      	ldr	r1, [r7, #28]
 800922a:	4401      	add	r1, r0
 800922c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009230:	4313      	orrs	r3, r2
 8009232:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d10d      	bne.n	8009256 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d009      	beq.n	8009256 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	6919      	ldr	r1, [r3, #16]
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009252:	460a      	mov	r2, r1
 8009254:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	791b      	ldrb	r3, [r3, #4]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d128      	bne.n	80092b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926a:	2b00      	cmp	r3, #0
 800926c:	d110      	bne.n	8009290 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	69fa      	ldr	r2, [r7, #28]
 8009282:	440a      	add	r2, r1
 8009284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	e00f      	b.n	80092b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	69fa      	ldr	r2, [r7, #28]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3720      	adds	r7, #32
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	1ff80000 	.word	0x1ff80000

080092e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	4613      	mov	r3, r2
 80092ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	f040 80ce 	bne.w	800949e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d132      	bne.n	8009370 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	0151      	lsls	r1, r2, #5
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	440a      	add	r2, r1
 8009320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009324:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009328:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800932c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	0151      	lsls	r1, r2, #5
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	440a      	add	r2, r1
 8009344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009348:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800934c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	440a      	add	r2, r1
 8009364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009368:	0cdb      	lsrs	r3, r3, #19
 800936a:	04db      	lsls	r3, r3, #19
 800936c:	6113      	str	r3, [r2, #16]
 800936e:	e04e      	b.n	800940e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800938a:	0cdb      	lsrs	r3, r3, #19
 800938c:	04db      	lsls	r3, r3, #19
 800938e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	699a      	ldr	r2, [r3, #24]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d903      	bls.n	80093c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	0151      	lsls	r1, r2, #5
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	440a      	add	r2, r1
 80093de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093fe:	6939      	ldr	r1, [r7, #16]
 8009400:	0148      	lsls	r0, r1, #5
 8009402:	6979      	ldr	r1, [r7, #20]
 8009404:	4401      	add	r1, r0
 8009406:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800940a:	4313      	orrs	r3, r2
 800940c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800940e:	79fb      	ldrb	r3, [r7, #7]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d11e      	bne.n	8009452 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d009      	beq.n	8009430 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009428:	461a      	mov	r2, r3
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	4413      	add	r3, r2
 8009438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	0151      	lsls	r1, r2, #5
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	440a      	add	r2, r1
 8009446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800944a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	e097      	b.n	8009582 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800946c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009470:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	2b00      	cmp	r3, #0
 8009478:	f000 8083 	beq.w	8009582 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	f003 030f 	and.w	r3, r3, #15
 800948c:	2101      	movs	r1, #1
 800948e:	fa01 f303 	lsl.w	r3, r1, r3
 8009492:	6979      	ldr	r1, [r7, #20]
 8009494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009498:	4313      	orrs	r3, r2
 800949a:	634b      	str	r3, [r1, #52]	; 0x34
 800949c:	e071      	b.n	8009582 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094b8:	0cdb      	lsrs	r3, r3, #19
 80094ba:	04db      	lsls	r3, r3, #19
 80094bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	015a      	lsls	r2, r3, #5
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	4413      	add	r3, r2
 80094c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	0151      	lsls	r1, r2, #5
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	440a      	add	r2, r1
 80094d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	68da      	ldr	r2, [r3, #12]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	015a      	lsls	r2, r3, #5
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	4413      	add	r3, r2
 8009502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	0151      	lsls	r1, r2, #5
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	440a      	add	r2, r1
 8009510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009514:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	015a      	lsls	r2, r3, #5
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	4413      	add	r3, r2
 8009522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	69db      	ldr	r3, [r3, #28]
 800952c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009530:	6939      	ldr	r1, [r7, #16]
 8009532:	0148      	lsls	r0, r1, #5
 8009534:	6979      	ldr	r1, [r7, #20]
 8009536:	4401      	add	r1, r0
 8009538:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800953c:	4313      	orrs	r3, r2
 800953e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10d      	bne.n	8009562 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d009      	beq.n	8009562 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	6919      	ldr	r1, [r3, #16]
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955e:	460a      	mov	r2, r1
 8009560:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	440a      	add	r2, r1
 8009578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800957c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009580:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d14a      	bne.n	8009644 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095c6:	f040 8086 	bne.w	80096d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	7812      	ldrb	r2, [r2, #0]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	7812      	ldrb	r2, [r2, #0]
 8009602:	0151      	lsls	r1, r2, #5
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	440a      	add	r2, r1
 8009608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800960c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009610:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3301      	adds	r3, #1
 8009616:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f242 7210 	movw	r2, #10000	; 0x2710
 800961e:	4293      	cmp	r3, r2
 8009620:	d902      	bls.n	8009628 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	75fb      	strb	r3, [r7, #23]
          break;
 8009626:	e056      	b.n	80096d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800963c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009640:	d0e7      	beq.n	8009612 <USB_EPStopXfer+0x82>
 8009642:	e048      	b.n	80096d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800965c:	d13b      	bne.n	80096d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	7812      	ldrb	r2, [r2, #0]
 8009672:	0151      	lsls	r1, r2, #5
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	440a      	add	r2, r1
 8009678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800967c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009680:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	7812      	ldrb	r2, [r2, #0]
 8009696:	0151      	lsls	r1, r2, #5
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	440a      	add	r2, r1
 800969c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3301      	adds	r3, #1
 80096aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d902      	bls.n	80096bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	75fb      	strb	r3, [r7, #23]
          break;
 80096ba:	e00c      	b.n	80096d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096d4:	d0e7      	beq.n	80096a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	371c      	adds	r7, #28
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b089      	sub	sp, #36	; 0x24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	4611      	mov	r1, r2
 80096f0:	461a      	mov	r2, r3
 80096f2:	460b      	mov	r3, r1
 80096f4:	71fb      	strb	r3, [r7, #7]
 80096f6:	4613      	mov	r3, r2
 80096f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009702:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009706:	2b00      	cmp	r3, #0
 8009708:	d123      	bne.n	8009752 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800970a:	88bb      	ldrh	r3, [r7, #4]
 800970c:	3303      	adds	r3, #3
 800970e:	089b      	lsrs	r3, r3, #2
 8009710:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009712:	2300      	movs	r3, #0
 8009714:	61bb      	str	r3, [r7, #24]
 8009716:	e018      	b.n	800974a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009718:	79fb      	ldrb	r3, [r7, #7]
 800971a:	031a      	lsls	r2, r3, #12
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	4413      	add	r3, r2
 8009720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009724:	461a      	mov	r2, r3
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	3301      	adds	r3, #1
 8009730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	3301      	adds	r3, #1
 8009736:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	3301      	adds	r3, #1
 800973c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	3301      	adds	r3, #1
 8009742:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	3301      	adds	r3, #1
 8009748:	61bb      	str	r3, [r7, #24]
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	429a      	cmp	r2, r3
 8009750:	d3e2      	bcc.n	8009718 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3724      	adds	r7, #36	; 0x24
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009760:	b480      	push	{r7}
 8009762:	b08b      	sub	sp, #44	; 0x2c
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	4613      	mov	r3, r2
 800976c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009776:	88fb      	ldrh	r3, [r7, #6]
 8009778:	089b      	lsrs	r3, r3, #2
 800977a:	b29b      	uxth	r3, r3
 800977c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	f003 0303 	and.w	r3, r3, #3
 8009784:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009786:	2300      	movs	r3, #0
 8009788:	623b      	str	r3, [r7, #32]
 800978a:	e014      	b.n	80097b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	601a      	str	r2, [r3, #0]
    pDest++;
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	3301      	adds	r3, #1
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	3301      	adds	r3, #1
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	3301      	adds	r3, #1
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	3301      	adds	r3, #1
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	3301      	adds	r3, #1
 80097b4:	623b      	str	r3, [r7, #32]
 80097b6:	6a3a      	ldr	r2, [r7, #32]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d3e6      	bcc.n	800978c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80097be:	8bfb      	ldrh	r3, [r7, #30]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d01e      	beq.n	8009802 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ce:	461a      	mov	r2, r3
 80097d0:	f107 0310 	add.w	r3, r7, #16
 80097d4:	6812      	ldr	r2, [r2, #0]
 80097d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	fa22 f303 	lsr.w	r3, r2, r3
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	701a      	strb	r2, [r3, #0]
      i++;
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	3301      	adds	r3, #1
 80097ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	3301      	adds	r3, #1
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80097f6:	8bfb      	ldrh	r3, [r7, #30]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80097fc:	8bfb      	ldrh	r3, [r7, #30]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1ea      	bne.n	80097d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009804:	4618      	mov	r0, r3
 8009806:	372c      	adds	r7, #44	; 0x2c
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	785b      	ldrb	r3, [r3, #1]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d12c      	bne.n	8009886 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	db12      	blt.n	8009864 <USB_EPSetStall+0x54>
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00f      	beq.n	8009864 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	0151      	lsls	r1, r2, #5
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	440a      	add	r2, r1
 800985a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800985e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009862:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	0151      	lsls	r1, r2, #5
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	440a      	add	r2, r1
 800987a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800987e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	e02b      	b.n	80098de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	db12      	blt.n	80098be <USB_EPSetStall+0xae>
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00f      	beq.n	80098be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	0151      	lsls	r1, r2, #5
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	440a      	add	r2, r1
 80098b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80098bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	0151      	lsls	r1, r2, #5
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	440a      	add	r2, r1
 80098d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	785b      	ldrb	r3, [r3, #1]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d128      	bne.n	800995a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	0151      	lsls	r1, r2, #5
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	440a      	add	r2, r1
 800991e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009926:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	791b      	ldrb	r3, [r3, #4]
 800992c:	2b03      	cmp	r3, #3
 800992e:	d003      	beq.n	8009938 <USB_EPClearStall+0x4c>
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	791b      	ldrb	r3, [r3, #4]
 8009934:	2b02      	cmp	r3, #2
 8009936:	d138      	bne.n	80099aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	440a      	add	r2, r1
 800994e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	e027      	b.n	80099aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	0151      	lsls	r1, r2, #5
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	440a      	add	r2, r1
 8009970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009978:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	791b      	ldrb	r3, [r3, #4]
 800997e:	2b03      	cmp	r3, #3
 8009980:	d003      	beq.n	800998a <USB_EPClearStall+0x9e>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	791b      	ldrb	r3, [r3, #4]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d10f      	bne.n	80099aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80099da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80099ec:	68f9      	ldr	r1, [r7, #12]
 80099ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099f2:	4313      	orrs	r3, r2
 80099f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a1e:	f023 0303 	bic.w	r3, r3, #3
 8009a22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a32:	f023 0302 	bic.w	r3, r3, #2
 8009a36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a60:	f023 0303 	bic.w	r3, r3, #3
 8009a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a74:	f043 0302 	orr.w	r3, r3, #2
 8009a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	695b      	ldr	r3, [r3, #20]
 8009a94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	4013      	ands	r3, r2
 8009ad0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	0c1b      	lsrs	r3, r3, #16
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b085      	sub	sp, #20
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009afe:	69db      	ldr	r3, [r3, #28]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	4013      	ands	r3, r2
 8009b04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	b29b      	uxth	r3, r3
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b085      	sub	sp, #20
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	4013      	ands	r3, r2
 8009b42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b44:	68bb      	ldr	r3, [r7, #8]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b087      	sub	sp, #28
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	f003 030f 	and.w	r3, r3, #15
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b82:	01db      	lsls	r3, r3, #7
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b083      	sub	sp, #12
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	f003 0301 	and.w	r3, r3, #1
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b085      	sub	sp, #20
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009be4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009be8:	f023 0307 	bic.w	r3, r3, #7
 8009bec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b087      	sub	sp, #28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	607a      	str	r2, [r7, #4]
 8009c1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	333c      	adds	r3, #60	; 0x3c
 8009c26:	3304      	adds	r3, #4
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	4a26      	ldr	r2, [pc, #152]	; (8009cc8 <USB_EP0_OutStart+0xb8>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d90a      	bls.n	8009c4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c44:	d101      	bne.n	8009c4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	e037      	b.n	8009cba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c50:	461a      	mov	r2, r3
 8009c52:	2300      	movs	r3, #0
 8009c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c78:	f043 0318 	orr.w	r3, r3, #24
 8009c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009c90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c92:	7afb      	ldrb	r3, [r7, #11]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d10f      	bne.n	8009cb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	371c      	adds	r7, #28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	4f54300a 	.word	0x4f54300a

08009ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	4a13      	ldr	r2, [pc, #76]	; (8009d30 <USB_CoreReset+0x64>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d901      	bls.n	8009cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e01b      	b.n	8009d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	daf2      	bge.n	8009cd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f043 0201 	orr.w	r2, r3, #1
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4a09      	ldr	r2, [pc, #36]	; (8009d30 <USB_CoreReset+0x64>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d901      	bls.n	8009d14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e006      	b.n	8009d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d0f0      	beq.n	8009d02 <USB_CoreReset+0x36>

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	00030d40 	.word	0x00030d40

08009d34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d44:	f00e ffd2 	bl	8018cec <USBD_static_malloc>
 8009d48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d109      	bne.n	8009d64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	32b0      	adds	r2, #176	; 0xb0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009d60:	2302      	movs	r3, #2
 8009d62:	e0d4      	b.n	8009f0e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009d64:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009d68:	2100      	movs	r1, #0
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f010 fbd8 	bl	801a520 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	32b0      	adds	r2, #176	; 0xb0
 8009d7a:	68f9      	ldr	r1, [r7, #12]
 8009d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	32b0      	adds	r2, #176	; 0xb0
 8009d8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	7c1b      	ldrb	r3, [r3, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d138      	bne.n	8009e0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d9c:	4b5e      	ldr	r3, [pc, #376]	; (8009f18 <USBD_CDC_Init+0x1e4>)
 8009d9e:	7819      	ldrb	r1, [r3, #0]
 8009da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da4:	2202      	movs	r2, #2
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f00e fe7d 	bl	8018aa6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009dac:	4b5a      	ldr	r3, [pc, #360]	; (8009f18 <USBD_CDC_Init+0x1e4>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 020f 	and.w	r2, r3, #15
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	3324      	adds	r3, #36	; 0x24
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009dc6:	4b55      	ldr	r3, [pc, #340]	; (8009f1c <USBD_CDC_Init+0x1e8>)
 8009dc8:	7819      	ldrb	r1, [r3, #0]
 8009dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dce:	2202      	movs	r2, #2
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f00e fe68 	bl	8018aa6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009dd6:	4b51      	ldr	r3, [pc, #324]	; (8009f1c <USBD_CDC_Init+0x1e8>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 020f 	and.w	r2, r3, #15
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009dee:	2201      	movs	r2, #1
 8009df0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009df2:	4b4b      	ldr	r3, [pc, #300]	; (8009f20 <USBD_CDC_Init+0x1ec>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	f003 020f 	and.w	r2, r3, #15
 8009dfa:	6879      	ldr	r1, [r7, #4]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	440b      	add	r3, r1
 8009e06:	3326      	adds	r3, #38	; 0x26
 8009e08:	2210      	movs	r2, #16
 8009e0a:	801a      	strh	r2, [r3, #0]
 8009e0c:	e035      	b.n	8009e7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009e0e:	4b42      	ldr	r3, [pc, #264]	; (8009f18 <USBD_CDC_Init+0x1e4>)
 8009e10:	7819      	ldrb	r1, [r3, #0]
 8009e12:	2340      	movs	r3, #64	; 0x40
 8009e14:	2202      	movs	r2, #2
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f00e fe45 	bl	8018aa6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009e1c:	4b3e      	ldr	r3, [pc, #248]	; (8009f18 <USBD_CDC_Init+0x1e4>)
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	f003 020f 	and.w	r2, r3, #15
 8009e24:	6879      	ldr	r1, [r7, #4]
 8009e26:	4613      	mov	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	440b      	add	r3, r1
 8009e30:	3324      	adds	r3, #36	; 0x24
 8009e32:	2201      	movs	r2, #1
 8009e34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009e36:	4b39      	ldr	r3, [pc, #228]	; (8009f1c <USBD_CDC_Init+0x1e8>)
 8009e38:	7819      	ldrb	r1, [r3, #0]
 8009e3a:	2340      	movs	r3, #64	; 0x40
 8009e3c:	2202      	movs	r2, #2
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f00e fe31 	bl	8018aa6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009e44:	4b35      	ldr	r3, [pc, #212]	; (8009f1c <USBD_CDC_Init+0x1e8>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 020f 	and.w	r2, r3, #15
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e60:	4b2f      	ldr	r3, [pc, #188]	; (8009f20 <USBD_CDC_Init+0x1ec>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f003 020f 	and.w	r2, r3, #15
 8009e68:	6879      	ldr	r1, [r7, #4]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4413      	add	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	440b      	add	r3, r1
 8009e74:	3326      	adds	r3, #38	; 0x26
 8009e76:	2210      	movs	r2, #16
 8009e78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e7a:	4b29      	ldr	r3, [pc, #164]	; (8009f20 <USBD_CDC_Init+0x1ec>)
 8009e7c:	7819      	ldrb	r1, [r3, #0]
 8009e7e:	2308      	movs	r3, #8
 8009e80:	2203      	movs	r2, #3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f00e fe0f 	bl	8018aa6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009e88:	4b25      	ldr	r3, [pc, #148]	; (8009f20 <USBD_CDC_Init+0x1ec>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	f003 020f 	and.w	r2, r3, #15
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	440b      	add	r3, r1
 8009e9c:	3324      	adds	r3, #36	; 0x24
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	33b0      	adds	r3, #176	; 0xb0
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009ed8:	2302      	movs	r3, #2
 8009eda:	e018      	b.n	8009f0e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7c1b      	ldrb	r3, [r3, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ee4:	4b0d      	ldr	r3, [pc, #52]	; (8009f1c <USBD_CDC_Init+0x1e8>)
 8009ee6:	7819      	ldrb	r1, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f00e fec6 	bl	8018c84 <USBD_LL_PrepareReceive>
 8009ef8:	e008      	b.n	8009f0c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009efa:	4b08      	ldr	r3, [pc, #32]	; (8009f1c <USBD_CDC_Init+0x1e8>)
 8009efc:	7819      	ldrb	r1, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f04:	2340      	movs	r3, #64	; 0x40
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f00e febc 	bl	8018c84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	200000db 	.word	0x200000db
 8009f1c:	200000dc 	.word	0x200000dc
 8009f20:	200000dd 	.word	0x200000dd

08009f24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009f30:	4b3a      	ldr	r3, [pc, #232]	; (800a01c <USBD_CDC_DeInit+0xf8>)
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f00e fddb 	bl	8018af2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009f3c:	4b37      	ldr	r3, [pc, #220]	; (800a01c <USBD_CDC_DeInit+0xf8>)
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	f003 020f 	and.w	r2, r3, #15
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4613      	mov	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	440b      	add	r3, r1
 8009f50:	3324      	adds	r3, #36	; 0x24
 8009f52:	2200      	movs	r2, #0
 8009f54:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009f56:	4b32      	ldr	r3, [pc, #200]	; (800a020 <USBD_CDC_DeInit+0xfc>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f00e fdc8 	bl	8018af2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009f62:	4b2f      	ldr	r3, [pc, #188]	; (800a020 <USBD_CDC_DeInit+0xfc>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	f003 020f 	and.w	r2, r3, #15
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	440b      	add	r3, r1
 8009f76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009f7e:	4b29      	ldr	r3, [pc, #164]	; (800a024 <USBD_CDC_DeInit+0x100>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f00e fdb4 	bl	8018af2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009f8a:	4b26      	ldr	r3, [pc, #152]	; (800a024 <USBD_CDC_DeInit+0x100>)
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	f003 020f 	and.w	r2, r3, #15
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	4613      	mov	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	440b      	add	r3, r1
 8009f9e:	3324      	adds	r3, #36	; 0x24
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009fa4:	4b1f      	ldr	r3, [pc, #124]	; (800a024 <USBD_CDC_DeInit+0x100>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	f003 020f 	and.w	r2, r3, #15
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	440b      	add	r3, r1
 8009fb8:	3326      	adds	r3, #38	; 0x26
 8009fba:	2200      	movs	r2, #0
 8009fbc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	32b0      	adds	r2, #176	; 0xb0
 8009fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01f      	beq.n	800a010 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	33b0      	adds	r3, #176	; 0xb0
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	32b0      	adds	r2, #176	; 0xb0
 8009fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f00e fe88 	bl	8018d08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	32b0      	adds	r2, #176	; 0xb0
 800a002:	2100      	movs	r1, #0
 800a004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a010:	2300      	movs	r3, #0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	200000db 	.word	0x200000db
 800a020:	200000dc 	.word	0x200000dc
 800a024:	200000dd 	.word	0x200000dd

0800a028 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	32b0      	adds	r2, #176	; 0xb0
 800a03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a040:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a054:	2303      	movs	r3, #3
 800a056:	e0bf      	b.n	800a1d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a060:	2b00      	cmp	r3, #0
 800a062:	d050      	beq.n	800a106 <USBD_CDC_Setup+0xde>
 800a064:	2b20      	cmp	r3, #32
 800a066:	f040 80af 	bne.w	800a1c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	88db      	ldrh	r3, [r3, #6]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d03a      	beq.n	800a0e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	b25b      	sxtb	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	da1b      	bge.n	800a0b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	33b0      	adds	r3, #176	; 0xb0
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a092:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	88d2      	ldrh	r2, [r2, #6]
 800a098:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	88db      	ldrh	r3, [r3, #6]
 800a09e:	2b07      	cmp	r3, #7
 800a0a0:	bf28      	it	cs
 800a0a2:	2307      	movcs	r3, #7
 800a0a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	89fa      	ldrh	r2, [r7, #14]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 fd89 	bl	800bbc4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a0b2:	e090      	b.n	800a1d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	785a      	ldrb	r2, [r3, #1]
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	88db      	ldrh	r3, [r3, #6]
 800a0c2:	2b3f      	cmp	r3, #63	; 0x3f
 800a0c4:	d803      	bhi.n	800a0ce <USBD_CDC_Setup+0xa6>
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	88db      	ldrh	r3, [r3, #6]
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	e000      	b.n	800a0d0 <USBD_CDC_Setup+0xa8>
 800a0ce:	2240      	movs	r2, #64	; 0x40
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a0d6:	6939      	ldr	r1, [r7, #16]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f001 fd9b 	bl	800bc1c <USBD_CtlPrepareRx>
      break;
 800a0e6:	e076      	b.n	800a1d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	33b0      	adds	r3, #176	; 0xb0
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	7850      	ldrb	r0, [r2, #1]
 800a0fe:	2200      	movs	r2, #0
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	4798      	blx	r3
      break;
 800a104:	e067      	b.n	800a1d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	785b      	ldrb	r3, [r3, #1]
 800a10a:	2b0b      	cmp	r3, #11
 800a10c:	d851      	bhi.n	800a1b2 <USBD_CDC_Setup+0x18a>
 800a10e:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <USBD_CDC_Setup+0xec>)
 800a110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a114:	0800a145 	.word	0x0800a145
 800a118:	0800a1c1 	.word	0x0800a1c1
 800a11c:	0800a1b3 	.word	0x0800a1b3
 800a120:	0800a1b3 	.word	0x0800a1b3
 800a124:	0800a1b3 	.word	0x0800a1b3
 800a128:	0800a1b3 	.word	0x0800a1b3
 800a12c:	0800a1b3 	.word	0x0800a1b3
 800a130:	0800a1b3 	.word	0x0800a1b3
 800a134:	0800a1b3 	.word	0x0800a1b3
 800a138:	0800a1b3 	.word	0x0800a1b3
 800a13c:	0800a16f 	.word	0x0800a16f
 800a140:	0800a199 	.word	0x0800a199
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d107      	bne.n	800a160 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a150:	f107 030a 	add.w	r3, r7, #10
 800a154:	2202      	movs	r2, #2
 800a156:	4619      	mov	r1, r3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f001 fd33 	bl	800bbc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a15e:	e032      	b.n	800a1c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 fcbd 	bl	800bae2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a168:	2303      	movs	r3, #3
 800a16a:	75fb      	strb	r3, [r7, #23]
          break;
 800a16c:	e02b      	b.n	800a1c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b03      	cmp	r3, #3
 800a178:	d107      	bne.n	800a18a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a17a:	f107 030d 	add.w	r3, r7, #13
 800a17e:	2201      	movs	r2, #1
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f001 fd1e 	bl	800bbc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a188:	e01d      	b.n	800a1c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f001 fca8 	bl	800bae2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a192:	2303      	movs	r3, #3
 800a194:	75fb      	strb	r3, [r7, #23]
          break;
 800a196:	e016      	b.n	800a1c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d00f      	beq.n	800a1c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 fc9b 	bl	800bae2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a1b0:	e008      	b.n	800a1c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 fc94 	bl	800bae2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	75fb      	strb	r3, [r7, #23]
          break;
 800a1be:	e002      	b.n	800a1c6 <USBD_CDC_Setup+0x19e>
          break;
 800a1c0:	bf00      	nop
 800a1c2:	e008      	b.n	800a1d6 <USBD_CDC_Setup+0x1ae>
          break;
 800a1c4:	bf00      	nop
      }
      break;
 800a1c6:	e006      	b.n	800a1d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 fc89 	bl	800bae2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3718      	adds	r7, #24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	32b0      	adds	r2, #176	; 0xb0
 800a1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a206:	2303      	movs	r3, #3
 800a208:	e065      	b.n	800a2d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	32b0      	adds	r2, #176	; 0xb0
 800a214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a218:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a21a:	78fb      	ldrb	r3, [r7, #3]
 800a21c:	f003 020f 	and.w	r2, r3, #15
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	4613      	mov	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	440b      	add	r3, r1
 800a22c:	3318      	adds	r3, #24
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d02f      	beq.n	800a294 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	f003 020f 	and.w	r2, r3, #15
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	4613      	mov	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4413      	add	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	440b      	add	r3, r1
 800a246:	3318      	adds	r3, #24
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	78fb      	ldrb	r3, [r7, #3]
 800a24c:	f003 010f 	and.w	r1, r3, #15
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	460b      	mov	r3, r1
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	440b      	add	r3, r1
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4403      	add	r3, r0
 800a25c:	3348      	adds	r3, #72	; 0x48
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	fbb2 f1f3 	udiv	r1, r2, r3
 800a264:	fb01 f303 	mul.w	r3, r1, r3
 800a268:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d112      	bne.n	800a294 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a26e:	78fb      	ldrb	r3, [r7, #3]
 800a270:	f003 020f 	and.w	r2, r3, #15
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	440b      	add	r3, r1
 800a280:	3318      	adds	r3, #24
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a286:	78f9      	ldrb	r1, [r7, #3]
 800a288:	2300      	movs	r3, #0
 800a28a:	2200      	movs	r2, #0
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f00e fcd8 	bl	8018c42 <USBD_LL_Transmit>
 800a292:	e01f      	b.n	800a2d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2200      	movs	r2, #0
 800a298:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	33b0      	adds	r3, #176	; 0xb0
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d010      	beq.n	800a2d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	33b0      	adds	r3, #176	; 0xb0
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a2d0:	78fa      	ldrb	r2, [r7, #3]
 800a2d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	32b0      	adds	r2, #176	; 0xb0
 800a2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	32b0      	adds	r2, #176	; 0xb0
 800a304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e01a      	b.n	800a346 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f00e fcd6 	bl	8018cc6 <USBD_LL_GetRxDataSize>
 800a31a:	4602      	mov	r2, r0
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	33b0      	adds	r3, #176	; 0xb0
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a340:	4611      	mov	r1, r2
 800a342:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	32b0      	adds	r2, #176	; 0xb0
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e025      	b.n	800a3bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	33b0      	adds	r3, #176	; 0xb0
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d01a      	beq.n	800a3ba <USBD_CDC_EP0_RxReady+0x6c>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a38a:	2bff      	cmp	r3, #255	; 0xff
 800a38c:	d015      	beq.n	800a3ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	33b0      	adds	r3, #176	; 0xb0
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	4413      	add	r3, r2
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a3a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a3ae:	b292      	uxth	r2, r2
 800a3b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	22ff      	movs	r2, #255	; 0xff
 800a3b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3cc:	2182      	movs	r1, #130	; 0x82
 800a3ce:	4818      	ldr	r0, [pc, #96]	; (800a430 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3d0:	f000 fd4f 	bl	800ae72 <USBD_GetEpDesc>
 800a3d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	4815      	ldr	r0, [pc, #84]	; (800a430 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3da:	f000 fd4a 	bl	800ae72 <USBD_GetEpDesc>
 800a3de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3e0:	2181      	movs	r1, #129	; 0x81
 800a3e2:	4813      	ldr	r0, [pc, #76]	; (800a430 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3e4:	f000 fd45 	bl	800ae72 <USBD_GetEpDesc>
 800a3e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	2210      	movs	r2, #16
 800a3f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d006      	beq.n	800a40a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a404:	711a      	strb	r2, [r3, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d006      	beq.n	800a41e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a418:	711a      	strb	r2, [r3, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2243      	movs	r2, #67	; 0x43
 800a422:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a424:	4b02      	ldr	r3, [pc, #8]	; (800a430 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a426:	4618      	mov	r0, r3
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20000098 	.word	0x20000098

0800a434 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a43c:	2182      	movs	r1, #130	; 0x82
 800a43e:	4818      	ldr	r0, [pc, #96]	; (800a4a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a440:	f000 fd17 	bl	800ae72 <USBD_GetEpDesc>
 800a444:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a446:	2101      	movs	r1, #1
 800a448:	4815      	ldr	r0, [pc, #84]	; (800a4a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a44a:	f000 fd12 	bl	800ae72 <USBD_GetEpDesc>
 800a44e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a450:	2181      	movs	r1, #129	; 0x81
 800a452:	4813      	ldr	r0, [pc, #76]	; (800a4a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a454:	f000 fd0d 	bl	800ae72 <USBD_GetEpDesc>
 800a458:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2210      	movs	r2, #16
 800a464:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d006      	beq.n	800a47a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	2200      	movs	r2, #0
 800a470:	711a      	strb	r2, [r3, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f042 0202 	orr.w	r2, r2, #2
 800a478:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d006      	beq.n	800a48e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	711a      	strb	r2, [r3, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f042 0202 	orr.w	r2, r2, #2
 800a48c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2243      	movs	r2, #67	; 0x43
 800a492:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a494:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	20000098 	.word	0x20000098

0800a4a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a4ac:	2182      	movs	r1, #130	; 0x82
 800a4ae:	4818      	ldr	r0, [pc, #96]	; (800a510 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a4b0:	f000 fcdf 	bl	800ae72 <USBD_GetEpDesc>
 800a4b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	4815      	ldr	r0, [pc, #84]	; (800a510 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a4ba:	f000 fcda 	bl	800ae72 <USBD_GetEpDesc>
 800a4be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a4c0:	2181      	movs	r1, #129	; 0x81
 800a4c2:	4813      	ldr	r0, [pc, #76]	; (800a510 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a4c4:	f000 fcd5 	bl	800ae72 <USBD_GetEpDesc>
 800a4c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2210      	movs	r2, #16
 800a4d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d006      	beq.n	800a4ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4e4:	711a      	strb	r2, [r3, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d006      	beq.n	800a4fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4f8:	711a      	strb	r2, [r3, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2243      	movs	r2, #67	; 0x43
 800a502:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a504:	4b02      	ldr	r3, [pc, #8]	; (800a510 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20000098 	.word	0x20000098

0800a514 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	220a      	movs	r2, #10
 800a520:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a522:	4b03      	ldr	r3, [pc, #12]	; (800a530 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a524:	4618      	mov	r0, r3
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	20000054 	.word	0x20000054

0800a534 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a544:	2303      	movs	r3, #3
 800a546:	e009      	b.n	800a55c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	33b0      	adds	r3, #176	; 0xb0
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	32b0      	adds	r2, #176	; 0xb0
 800a57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a582:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e008      	b.n	800a5a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	371c      	adds	r7, #28
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	32b0      	adds	r2, #176	; 0xb0
 800a5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	e004      	b.n	800a5da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
	...

0800a5e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	32b0      	adds	r2, #176	; 0xb0
 800a5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a600:	2301      	movs	r3, #1
 800a602:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	32b0      	adds	r2, #176	; 0xb0
 800a60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a616:	2303      	movs	r3, #3
 800a618:	e025      	b.n	800a666 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a620:	2b00      	cmp	r3, #0
 800a622:	d11f      	bne.n	800a664 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2201      	movs	r2, #1
 800a628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a62c:	4b10      	ldr	r3, [pc, #64]	; (800a670 <USBD_CDC_TransmitPacket+0x88>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	f003 020f 	and.w	r2, r3, #15
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4613      	mov	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4403      	add	r3, r0
 800a646:	3318      	adds	r3, #24
 800a648:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a64a:	4b09      	ldr	r3, [pc, #36]	; (800a670 <USBD_CDC_TransmitPacket+0x88>)
 800a64c:	7819      	ldrb	r1, [r3, #0]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f00e faf1 	bl	8018c42 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	200000db 	.word	0x200000db

0800a674 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	32b0      	adds	r2, #176	; 0xb0
 800a686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	32b0      	adds	r2, #176	; 0xb0
 800a696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e018      	b.n	800a6d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	7c1b      	ldrb	r3, [r3, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10a      	bne.n	800a6c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6aa:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <USBD_CDC_ReceivePacket+0x68>)
 800a6ac:	7819      	ldrb	r1, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f00e fae3 	bl	8018c84 <USBD_LL_PrepareReceive>
 800a6be:	e008      	b.n	800a6d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6c0:	4b06      	ldr	r3, [pc, #24]	; (800a6dc <USBD_CDC_ReceivePacket+0x68>)
 800a6c2:	7819      	ldrb	r1, [r3, #0]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6ca:	2340      	movs	r3, #64	; 0x40
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f00e fad9 	bl	8018c84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	200000dc 	.word	0x200000dc

0800a6e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b086      	sub	sp, #24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e01f      	b.n	800a738 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	79fa      	ldrb	r2, [r7, #7]
 800a72a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f00e f953 	bl	80189d8 <USBD_LL_Init>
 800a732:	4603      	mov	r3, r0
 800a734:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a736:	7dfb      	ldrb	r3, [r7, #23]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a754:	2303      	movs	r3, #3
 800a756:	e025      	b.n	800a7a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	32ae      	adds	r2, #174	; 0xae
 800a76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00f      	beq.n	800a794 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	32ae      	adds	r2, #174	; 0xae
 800a77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	f107 020e 	add.w	r2, r7, #14
 800a788:	4610      	mov	r0, r2
 800a78a:	4798      	blx	r3
 800a78c:	4602      	mov	r2, r0
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f00e f95b 	bl	8018a70 <USBD_LL_Start>
 800a7ba:	4603      	mov	r3, r0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d009      	beq.n	800a808 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	78fa      	ldrb	r2, [r7, #3]
 800a7fe:	4611      	mov	r1, r2
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	4798      	blx	r3
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a808:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b084      	sub	sp, #16
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	460b      	mov	r3, r1
 800a81c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	78fa      	ldrb	r2, [r7, #3]
 800a82c:	4611      	mov	r1, r2
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	4798      	blx	r3
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a838:	2303      	movs	r3, #3
 800a83a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b084      	sub	sp, #16
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 f908 	bl	800ba6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a86c:	461a      	mov	r2, r3
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a87a:	f003 031f 	and.w	r3, r3, #31
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d01a      	beq.n	800a8b8 <USBD_LL_SetupStage+0x72>
 800a882:	2b02      	cmp	r3, #2
 800a884:	d822      	bhi.n	800a8cc <USBD_LL_SetupStage+0x86>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <USBD_LL_SetupStage+0x4a>
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d00a      	beq.n	800a8a4 <USBD_LL_SetupStage+0x5e>
 800a88e:	e01d      	b.n	800a8cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fb5f 	bl	800af5c <USBD_StdDevReq>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a2:	e020      	b.n	800a8e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fbc7 	bl	800b040 <USBD_StdItfReq>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b6:	e016      	b.n	800a8e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fc29 	bl	800b118 <USBD_StdEPReq>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ca:	e00c      	b.n	800a8e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f00e f928 	bl	8018b30 <USBD_LL_StallEP>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e4:	bf00      	nop
  }

  return ret;
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a902:	7afb      	ldrb	r3, [r7, #11]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d16e      	bne.n	800a9e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a90e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a916:	2b03      	cmp	r3, #3
 800a918:	f040 8098 	bne.w	800aa4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	429a      	cmp	r2, r3
 800a926:	d913      	bls.n	800a950 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	689a      	ldr	r2, [r3, #8]
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	1ad2      	subs	r2, r2, r3
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	68da      	ldr	r2, [r3, #12]
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	4293      	cmp	r3, r2
 800a940:	bf28      	it	cs
 800a942:	4613      	movcs	r3, r2
 800a944:	461a      	mov	r2, r3
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f001 f984 	bl	800bc56 <USBD_CtlContinueRx>
 800a94e:	e07d      	b.n	800aa4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a956:	f003 031f 	and.w	r3, r3, #31
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d014      	beq.n	800a988 <USBD_LL_DataOutStage+0x98>
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d81d      	bhi.n	800a99e <USBD_LL_DataOutStage+0xae>
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <USBD_LL_DataOutStage+0x7c>
 800a966:	2b01      	cmp	r3, #1
 800a968:	d003      	beq.n	800a972 <USBD_LL_DataOutStage+0x82>
 800a96a:	e018      	b.n	800a99e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	75bb      	strb	r3, [r7, #22]
            break;
 800a970:	e018      	b.n	800a9a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	4619      	mov	r1, r3
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 fa5e 	bl	800ae3e <USBD_CoreFindIF>
 800a982:	4603      	mov	r3, r0
 800a984:	75bb      	strb	r3, [r7, #22]
            break;
 800a986:	e00d      	b.n	800a9a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	4619      	mov	r1, r3
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 fa60 	bl	800ae58 <USBD_CoreFindEP>
 800a998:	4603      	mov	r3, r0
 800a99a:	75bb      	strb	r3, [r7, #22]
            break;
 800a99c:	e002      	b.n	800a9a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	75bb      	strb	r3, [r7, #22]
            break;
 800a9a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a9a4:	7dbb      	ldrb	r3, [r7, #22]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d119      	bne.n	800a9de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d113      	bne.n	800a9de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a9b6:	7dba      	ldrb	r2, [r7, #22]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	32ae      	adds	r2, #174	; 0xae
 800a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00b      	beq.n	800a9de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a9c6:	7dba      	ldrb	r2, [r7, #22]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a9ce:	7dba      	ldrb	r2, [r7, #22]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	32ae      	adds	r2, #174	; 0xae
 800a9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f001 f94a 	bl	800bc78 <USBD_CtlSendStatus>
 800a9e4:	e032      	b.n	800aa4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 fa31 	bl	800ae58 <USBD_CoreFindEP>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9fa:	7dbb      	ldrb	r3, [r7, #22]
 800a9fc:	2bff      	cmp	r3, #255	; 0xff
 800a9fe:	d025      	beq.n	800aa4c <USBD_LL_DataOutStage+0x15c>
 800aa00:	7dbb      	ldrb	r3, [r7, #22]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d122      	bne.n	800aa4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d117      	bne.n	800aa42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aa12:	7dba      	ldrb	r2, [r7, #22]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	32ae      	adds	r2, #174	; 0xae
 800aa18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00f      	beq.n	800aa42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aa22:	7dba      	ldrb	r2, [r7, #22]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aa2a:	7dba      	ldrb	r2, [r7, #22]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	32ae      	adds	r2, #174	; 0xae
 800aa30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	7afa      	ldrb	r2, [r7, #11]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	4798      	blx	r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	e000      	b.n	800aa4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b086      	sub	sp, #24
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aa64:	7afb      	ldrb	r3, [r7, #11]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d16f      	bne.n	800ab4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	3314      	adds	r3, #20
 800aa6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d15a      	bne.n	800ab30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d914      	bls.n	800aab0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	689a      	ldr	r2, [r3, #8]
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	1ad2      	subs	r2, r2, r3
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	6879      	ldr	r1, [r7, #4]
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f001 f8ac 	bl	800bbfa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f00e f8eb 	bl	8018c84 <USBD_LL_PrepareReceive>
 800aaae:	e03f      	b.n	800ab30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	68da      	ldr	r2, [r3, #12]
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d11c      	bne.n	800aaf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d316      	bcc.n	800aaf6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d20f      	bcs.n	800aaf6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aad6:	2200      	movs	r2, #0
 800aad8:	2100      	movs	r1, #0
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f001 f88d 	bl	800bbfa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aae8:	2300      	movs	r3, #0
 800aaea:	2200      	movs	r2, #0
 800aaec:	2100      	movs	r1, #0
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f00e f8c8 	bl	8018c84 <USBD_LL_PrepareReceive>
 800aaf4:	e01c      	b.n	800ab30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d10f      	bne.n	800ab22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d009      	beq.n	800ab22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab22:	2180      	movs	r1, #128	; 0x80
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f00e f803 	bl	8018b30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f001 f8b7 	bl	800bc9e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d03a      	beq.n	800abb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f7ff fe42 	bl	800a7c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab48:	e032      	b.n	800abb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ab4a:	7afb      	ldrb	r3, [r7, #11]
 800ab4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	4619      	mov	r1, r3
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 f97f 	bl	800ae58 <USBD_CoreFindEP>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	2bff      	cmp	r3, #255	; 0xff
 800ab62:	d025      	beq.n	800abb0 <USBD_LL_DataInStage+0x15a>
 800ab64:	7dfb      	ldrb	r3, [r7, #23]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d122      	bne.n	800abb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d11c      	bne.n	800abb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ab76:	7dfa      	ldrb	r2, [r7, #23]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	32ae      	adds	r2, #174	; 0xae
 800ab7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d014      	beq.n	800abb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ab86:	7dfa      	ldrb	r2, [r7, #23]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ab8e:	7dfa      	ldrb	r2, [r7, #23]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	32ae      	adds	r2, #174	; 0xae
 800ab94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	7afa      	ldrb	r2, [r7, #11]
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	4798      	blx	r3
 800aba2:	4603      	mov	r3, r0
 800aba4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aba6:	7dbb      	ldrb	r3, [r7, #22]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800abac:	7dbb      	ldrb	r3, [r7, #22]
 800abae:	e000      	b.n	800abb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3718      	adds	r7, #24
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d014      	beq.n	800ac20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00e      	beq.n	800ac20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	6852      	ldr	r2, [r2, #4]
 800ac0e:	b2d2      	uxtb	r2, r2
 800ac10:	4611      	mov	r1, r2
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	4798      	blx	r3
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac20:	2340      	movs	r3, #64	; 0x40
 800ac22:	2200      	movs	r2, #0
 800ac24:	2100      	movs	r1, #0
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f00d ff3d 	bl	8018aa6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2240      	movs	r2, #64	; 0x40
 800ac38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac3c:	2340      	movs	r3, #64	; 0x40
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2180      	movs	r1, #128	; 0x80
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f00d ff2f 	bl	8018aa6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2240      	movs	r2, #64	; 0x40
 800ac52:	621a      	str	r2, [r3, #32]

  return ret;
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	78fa      	ldrb	r2, [r7, #3]
 800ac6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2204      	movs	r2, #4
 800ac98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800acaa:	b480      	push	{r7}
 800acac:	b083      	sub	sp, #12
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d106      	bne.n	800accc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b03      	cmp	r3, #3
 800acec:	d110      	bne.n	800ad10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00b      	beq.n	800ad10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b082      	sub	sp, #8
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	460b      	mov	r3, r1
 800ad24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	32ae      	adds	r2, #174	; 0xae
 800ad30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e01c      	b.n	800ad76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b03      	cmp	r3, #3
 800ad46:	d115      	bne.n	800ad74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	32ae      	adds	r2, #174	; 0xae
 800ad52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	32ae      	adds	r2, #174	; 0xae
 800ad66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	78fa      	ldrb	r2, [r7, #3]
 800ad6e:	4611      	mov	r1, r2
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	460b      	mov	r3, r1
 800ad88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	32ae      	adds	r2, #174	; 0xae
 800ad94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	e01c      	b.n	800adda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b03      	cmp	r3, #3
 800adaa:	d115      	bne.n	800add8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	32ae      	adds	r2, #174	; 0xae
 800adb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00b      	beq.n	800add8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	32ae      	adds	r2, #174	; 0xae
 800adca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add0:	78fa      	ldrb	r2, [r7, #3]
 800add2:	4611      	mov	r1, r2
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00e      	beq.n	800ae34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	6852      	ldr	r2, [r2, #4]
 800ae22:	b2d2      	uxtb	r2, r2
 800ae24:	4611      	mov	r1, r2
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	4798      	blx	r3
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ae30:	2303      	movs	r3, #3
 800ae32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	460b      	mov	r3, r1
 800ae48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b086      	sub	sp, #24
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	b29a      	uxth	r2, r3
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d920      	bls.n	800aedc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aea2:	e013      	b.n	800aecc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aea4:	f107 030a 	add.w	r3, r7, #10
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6978      	ldr	r0, [r7, #20]
 800aeac:	f000 f81b 	bl	800aee6 <USBD_GetNextDesc>
 800aeb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	785b      	ldrb	r3, [r3, #1]
 800aeb6:	2b05      	cmp	r3, #5
 800aeb8:	d108      	bne.n	800aecc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	789b      	ldrb	r3, [r3, #2]
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d008      	beq.n	800aeda <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aec8:	2300      	movs	r3, #0
 800aeca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	885b      	ldrh	r3, [r3, #2]
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	897b      	ldrh	r3, [r7, #10]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d8e5      	bhi.n	800aea4 <USBD_GetEpDesc+0x32>
 800aed8:	e000      	b.n	800aedc <USBD_GetEpDesc+0x6a>
          break;
 800aeda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aedc:	693b      	ldr	r3, [r7, #16]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b085      	sub	sp, #20
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	881a      	ldrh	r2, [r3, #0]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	4413      	add	r3, r2
 800af00:	b29a      	uxth	r2, r3
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4413      	add	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800af12:	68fb      	ldr	r3, [r7, #12]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	3301      	adds	r3, #1
 800af36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af3e:	8a3b      	ldrh	r3, [r7, #16]
 800af40:	021b      	lsls	r3, r3, #8
 800af42:	b21a      	sxth	r2, r3
 800af44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af48:	4313      	orrs	r3, r2
 800af4a:	b21b      	sxth	r3, r3
 800af4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af4e:	89fb      	ldrh	r3, [r7, #14]
}
 800af50:	4618      	mov	r0, r3
 800af52:	371c      	adds	r7, #28
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af66:	2300      	movs	r3, #0
 800af68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af72:	2b40      	cmp	r3, #64	; 0x40
 800af74:	d005      	beq.n	800af82 <USBD_StdDevReq+0x26>
 800af76:	2b40      	cmp	r3, #64	; 0x40
 800af78:	d857      	bhi.n	800b02a <USBD_StdDevReq+0xce>
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00f      	beq.n	800af9e <USBD_StdDevReq+0x42>
 800af7e:	2b20      	cmp	r3, #32
 800af80:	d153      	bne.n	800b02a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	32ae      	adds	r2, #174	; 0xae
 800af8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	4798      	blx	r3
 800af98:	4603      	mov	r3, r0
 800af9a:	73fb      	strb	r3, [r7, #15]
      break;
 800af9c:	e04a      	b.n	800b034 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	785b      	ldrb	r3, [r3, #1]
 800afa2:	2b09      	cmp	r3, #9
 800afa4:	d83b      	bhi.n	800b01e <USBD_StdDevReq+0xc2>
 800afa6:	a201      	add	r2, pc, #4	; (adr r2, 800afac <USBD_StdDevReq+0x50>)
 800afa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afac:	0800b001 	.word	0x0800b001
 800afb0:	0800b015 	.word	0x0800b015
 800afb4:	0800b01f 	.word	0x0800b01f
 800afb8:	0800b00b 	.word	0x0800b00b
 800afbc:	0800b01f 	.word	0x0800b01f
 800afc0:	0800afdf 	.word	0x0800afdf
 800afc4:	0800afd5 	.word	0x0800afd5
 800afc8:	0800b01f 	.word	0x0800b01f
 800afcc:	0800aff7 	.word	0x0800aff7
 800afd0:	0800afe9 	.word	0x0800afe9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa3c 	bl	800b454 <USBD_GetDescriptor>
          break;
 800afdc:	e024      	b.n	800b028 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fba1 	bl	800b728 <USBD_SetAddress>
          break;
 800afe6:	e01f      	b.n	800b028 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fbe0 	bl	800b7b0 <USBD_SetConfig>
 800aff0:	4603      	mov	r3, r0
 800aff2:	73fb      	strb	r3, [r7, #15]
          break;
 800aff4:	e018      	b.n	800b028 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fc83 	bl	800b904 <USBD_GetConfig>
          break;
 800affe:	e013      	b.n	800b028 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fcb4 	bl	800b970 <USBD_GetStatus>
          break;
 800b008:	e00e      	b.n	800b028 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fce3 	bl	800b9d8 <USBD_SetFeature>
          break;
 800b012:	e009      	b.n	800b028 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fd07 	bl	800ba2a <USBD_ClrFeature>
          break;
 800b01c:	e004      	b.n	800b028 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fd5e 	bl	800bae2 <USBD_CtlError>
          break;
 800b026:	bf00      	nop
      }
      break;
 800b028:	e004      	b.n	800b034 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fd58 	bl	800bae2 <USBD_CtlError>
      break;
 800b032:	bf00      	nop
  }

  return ret;
 800b034:	7bfb      	ldrb	r3, [r7, #15]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop

0800b040 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b056:	2b40      	cmp	r3, #64	; 0x40
 800b058:	d005      	beq.n	800b066 <USBD_StdItfReq+0x26>
 800b05a:	2b40      	cmp	r3, #64	; 0x40
 800b05c:	d852      	bhi.n	800b104 <USBD_StdItfReq+0xc4>
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <USBD_StdItfReq+0x26>
 800b062:	2b20      	cmp	r3, #32
 800b064:	d14e      	bne.n	800b104 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	3b01      	subs	r3, #1
 800b070:	2b02      	cmp	r3, #2
 800b072:	d840      	bhi.n	800b0f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	889b      	ldrh	r3, [r3, #4]
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d836      	bhi.n	800b0ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	889b      	ldrh	r3, [r3, #4]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff fed9 	bl	800ae3e <USBD_CoreFindIF>
 800b08c:	4603      	mov	r3, r0
 800b08e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b090:	7bbb      	ldrb	r3, [r7, #14]
 800b092:	2bff      	cmp	r3, #255	; 0xff
 800b094:	d01d      	beq.n	800b0d2 <USBD_StdItfReq+0x92>
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d11a      	bne.n	800b0d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b09c:	7bba      	ldrb	r2, [r7, #14]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	32ae      	adds	r2, #174	; 0xae
 800b0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00f      	beq.n	800b0cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b0ac:	7bba      	ldrb	r2, [r7, #14]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0b4:	7bba      	ldrb	r2, [r7, #14]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	32ae      	adds	r2, #174	; 0xae
 800b0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	4798      	blx	r3
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b0ca:	e004      	b.n	800b0d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b0d0:	e001      	b.n	800b0d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	88db      	ldrh	r3, [r3, #6]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d110      	bne.n	800b100 <USBD_StdItfReq+0xc0>
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10d      	bne.n	800b100 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fdc7 	bl	800bc78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0ea:	e009      	b.n	800b100 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fcf7 	bl	800bae2 <USBD_CtlError>
          break;
 800b0f4:	e004      	b.n	800b100 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fcf2 	bl	800bae2 <USBD_CtlError>
          break;
 800b0fe:	e000      	b.n	800b102 <USBD_StdItfReq+0xc2>
          break;
 800b100:	bf00      	nop
      }
      break;
 800b102:	e004      	b.n	800b10e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fceb 	bl	800bae2 <USBD_CtlError>
      break;
 800b10c:	bf00      	nop
  }

  return ret;
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	889b      	ldrh	r3, [r3, #4]
 800b12a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b134:	2b40      	cmp	r3, #64	; 0x40
 800b136:	d007      	beq.n	800b148 <USBD_StdEPReq+0x30>
 800b138:	2b40      	cmp	r3, #64	; 0x40
 800b13a:	f200 817f 	bhi.w	800b43c <USBD_StdEPReq+0x324>
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d02a      	beq.n	800b198 <USBD_StdEPReq+0x80>
 800b142:	2b20      	cmp	r3, #32
 800b144:	f040 817a 	bne.w	800b43c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff fe83 	bl	800ae58 <USBD_CoreFindEP>
 800b152:	4603      	mov	r3, r0
 800b154:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b156:	7b7b      	ldrb	r3, [r7, #13]
 800b158:	2bff      	cmp	r3, #255	; 0xff
 800b15a:	f000 8174 	beq.w	800b446 <USBD_StdEPReq+0x32e>
 800b15e:	7b7b      	ldrb	r3, [r7, #13]
 800b160:	2b00      	cmp	r3, #0
 800b162:	f040 8170 	bne.w	800b446 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b166:	7b7a      	ldrb	r2, [r7, #13]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b16e:	7b7a      	ldrb	r2, [r7, #13]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	32ae      	adds	r2, #174	; 0xae
 800b174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 8163 	beq.w	800b446 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b180:	7b7a      	ldrb	r2, [r7, #13]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	32ae      	adds	r2, #174	; 0xae
 800b186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	4798      	blx	r3
 800b192:	4603      	mov	r3, r0
 800b194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b196:	e156      	b.n	800b446 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	785b      	ldrb	r3, [r3, #1]
 800b19c:	2b03      	cmp	r3, #3
 800b19e:	d008      	beq.n	800b1b2 <USBD_StdEPReq+0x9a>
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	f300 8145 	bgt.w	800b430 <USBD_StdEPReq+0x318>
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f000 809b 	beq.w	800b2e2 <USBD_StdEPReq+0x1ca>
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d03c      	beq.n	800b22a <USBD_StdEPReq+0x112>
 800b1b0:	e13e      	b.n	800b430 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d002      	beq.n	800b1c4 <USBD_StdEPReq+0xac>
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d016      	beq.n	800b1f0 <USBD_StdEPReq+0xd8>
 800b1c2:	e02c      	b.n	800b21e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1c4:	7bbb      	ldrb	r3, [r7, #14]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00d      	beq.n	800b1e6 <USBD_StdEPReq+0xce>
 800b1ca:	7bbb      	ldrb	r3, [r7, #14]
 800b1cc:	2b80      	cmp	r3, #128	; 0x80
 800b1ce:	d00a      	beq.n	800b1e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1d0:	7bbb      	ldrb	r3, [r7, #14]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f00d fcab 	bl	8018b30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1da:	2180      	movs	r1, #128	; 0x80
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f00d fca7 	bl	8018b30 <USBD_LL_StallEP>
 800b1e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1e4:	e020      	b.n	800b228 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fc7a 	bl	800bae2 <USBD_CtlError>
              break;
 800b1ee:	e01b      	b.n	800b228 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	885b      	ldrh	r3, [r3, #2]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10e      	bne.n	800b216 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00b      	beq.n	800b216 <USBD_StdEPReq+0xfe>
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	2b80      	cmp	r3, #128	; 0x80
 800b202:	d008      	beq.n	800b216 <USBD_StdEPReq+0xfe>
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	88db      	ldrh	r3, [r3, #6]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d104      	bne.n	800b216 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f00d fc8d 	bl	8018b30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fd2e 	bl	800bc78 <USBD_CtlSendStatus>

              break;
 800b21c:	e004      	b.n	800b228 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fc5e 	bl	800bae2 <USBD_CtlError>
              break;
 800b226:	bf00      	nop
          }
          break;
 800b228:	e107      	b.n	800b43a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b02      	cmp	r3, #2
 800b234:	d002      	beq.n	800b23c <USBD_StdEPReq+0x124>
 800b236:	2b03      	cmp	r3, #3
 800b238:	d016      	beq.n	800b268 <USBD_StdEPReq+0x150>
 800b23a:	e04b      	b.n	800b2d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00d      	beq.n	800b25e <USBD_StdEPReq+0x146>
 800b242:	7bbb      	ldrb	r3, [r7, #14]
 800b244:	2b80      	cmp	r3, #128	; 0x80
 800b246:	d00a      	beq.n	800b25e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b248:	7bbb      	ldrb	r3, [r7, #14]
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f00d fc6f 	bl	8018b30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b252:	2180      	movs	r1, #128	; 0x80
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f00d fc6b 	bl	8018b30 <USBD_LL_StallEP>
 800b25a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b25c:	e040      	b.n	800b2e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fc3e 	bl	800bae2 <USBD_CtlError>
              break;
 800b266:	e03b      	b.n	800b2e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	885b      	ldrh	r3, [r3, #2]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d136      	bne.n	800b2de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b276:	2b00      	cmp	r3, #0
 800b278:	d004      	beq.n	800b284 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b27a:	7bbb      	ldrb	r3, [r7, #14]
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f00d fc75 	bl	8018b6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fcf7 	bl	800bc78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7ff fde2 	bl	800ae58 <USBD_CoreFindEP>
 800b294:	4603      	mov	r3, r0
 800b296:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b298:	7b7b      	ldrb	r3, [r7, #13]
 800b29a:	2bff      	cmp	r3, #255	; 0xff
 800b29c:	d01f      	beq.n	800b2de <USBD_StdEPReq+0x1c6>
 800b29e:	7b7b      	ldrb	r3, [r7, #13]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d11c      	bne.n	800b2de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b2a4:	7b7a      	ldrb	r2, [r7, #13]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b2ac:	7b7a      	ldrb	r2, [r7, #13]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	32ae      	adds	r2, #174	; 0xae
 800b2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d010      	beq.n	800b2de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b2bc:	7b7a      	ldrb	r2, [r7, #13]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	32ae      	adds	r2, #174	; 0xae
 800b2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	4798      	blx	r3
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b2d2:	e004      	b.n	800b2de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fc03 	bl	800bae2 <USBD_CtlError>
              break;
 800b2dc:	e000      	b.n	800b2e0 <USBD_StdEPReq+0x1c8>
              break;
 800b2de:	bf00      	nop
          }
          break;
 800b2e0:	e0ab      	b.n	800b43a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d002      	beq.n	800b2f4 <USBD_StdEPReq+0x1dc>
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d032      	beq.n	800b358 <USBD_StdEPReq+0x240>
 800b2f2:	e097      	b.n	800b424 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d007      	beq.n	800b30a <USBD_StdEPReq+0x1f2>
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	2b80      	cmp	r3, #128	; 0x80
 800b2fe:	d004      	beq.n	800b30a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fbed 	bl	800bae2 <USBD_CtlError>
                break;
 800b308:	e091      	b.n	800b42e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b30a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	da0b      	bge.n	800b32a <USBD_StdEPReq+0x212>
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b318:	4613      	mov	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	3310      	adds	r3, #16
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	4413      	add	r3, r2
 800b326:	3304      	adds	r3, #4
 800b328:	e00b      	b.n	800b342 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b330:	4613      	mov	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4413      	add	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	4413      	add	r3, r2
 800b340:	3304      	adds	r3, #4
 800b342:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	2202      	movs	r2, #2
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fc37 	bl	800bbc4 <USBD_CtlSendData>
              break;
 800b356:	e06a      	b.n	800b42e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	da11      	bge.n	800b384 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b360:	7bbb      	ldrb	r3, [r7, #14]
 800b362:	f003 020f 	and.w	r2, r3, #15
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	4613      	mov	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	440b      	add	r3, r1
 800b372:	3324      	adds	r3, #36	; 0x24
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d117      	bne.n	800b3aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fbb0 	bl	800bae2 <USBD_CtlError>
                  break;
 800b382:	e054      	b.n	800b42e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b384:	7bbb      	ldrb	r3, [r7, #14]
 800b386:	f003 020f 	and.w	r2, r3, #15
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	4613      	mov	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	440b      	add	r3, r1
 800b396:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d104      	bne.n	800b3aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fb9d 	bl	800bae2 <USBD_CtlError>
                  break;
 800b3a8:	e041      	b.n	800b42e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	da0b      	bge.n	800b3ca <USBD_StdEPReq+0x2b2>
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	3310      	adds	r3, #16
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	e00b      	b.n	800b3e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
 800b3cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	4413      	add	r3, r2
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3e4:	7bbb      	ldrb	r3, [r7, #14]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <USBD_StdEPReq+0x2d8>
 800b3ea:	7bbb      	ldrb	r3, [r7, #14]
 800b3ec:	2b80      	cmp	r3, #128	; 0x80
 800b3ee:	d103      	bne.n	800b3f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	e00e      	b.n	800b416 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3f8:	7bbb      	ldrb	r3, [r7, #14]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f00d fbd5 	bl	8018bac <USBD_LL_IsStallEP>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	2201      	movs	r2, #1
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	e002      	b.n	800b416 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2202      	movs	r2, #2
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fbd1 	bl	800bbc4 <USBD_CtlSendData>
              break;
 800b422:	e004      	b.n	800b42e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fb5b 	bl	800bae2 <USBD_CtlError>
              break;
 800b42c:	bf00      	nop
          }
          break;
 800b42e:	e004      	b.n	800b43a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 fb55 	bl	800bae2 <USBD_CtlError>
          break;
 800b438:	bf00      	nop
      }
      break;
 800b43a:	e005      	b.n	800b448 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fb4f 	bl	800bae2 <USBD_CtlError>
      break;
 800b444:	e000      	b.n	800b448 <USBD_StdEPReq+0x330>
      break;
 800b446:	bf00      	nop
  }

  return ret;
 800b448:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
	...

0800b454 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b45e:	2300      	movs	r3, #0
 800b460:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b466:	2300      	movs	r3, #0
 800b468:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	885b      	ldrh	r3, [r3, #2]
 800b46e:	0a1b      	lsrs	r3, r3, #8
 800b470:	b29b      	uxth	r3, r3
 800b472:	3b01      	subs	r3, #1
 800b474:	2b06      	cmp	r3, #6
 800b476:	f200 8128 	bhi.w	800b6ca <USBD_GetDescriptor+0x276>
 800b47a:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <USBD_GetDescriptor+0x2c>)
 800b47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b480:	0800b49d 	.word	0x0800b49d
 800b484:	0800b4b5 	.word	0x0800b4b5
 800b488:	0800b4f5 	.word	0x0800b4f5
 800b48c:	0800b6cb 	.word	0x0800b6cb
 800b490:	0800b6cb 	.word	0x0800b6cb
 800b494:	0800b66b 	.word	0x0800b66b
 800b498:	0800b697 	.word	0x0800b697
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	7c12      	ldrb	r2, [r2, #16]
 800b4a8:	f107 0108 	add.w	r1, r7, #8
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	4798      	blx	r3
 800b4b0:	60f8      	str	r0, [r7, #12]
      break;
 800b4b2:	e112      	b.n	800b6da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	7c1b      	ldrb	r3, [r3, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10d      	bne.n	800b4d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c4:	f107 0208 	add.w	r2, r7, #8
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	4798      	blx	r3
 800b4cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4d6:	e100      	b.n	800b6da <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e0:	f107 0208 	add.w	r2, r7, #8
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	4798      	blx	r3
 800b4e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	701a      	strb	r2, [r3, #0]
      break;
 800b4f2:	e0f2      	b.n	800b6da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	885b      	ldrh	r3, [r3, #2]
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b05      	cmp	r3, #5
 800b4fc:	f200 80ac 	bhi.w	800b658 <USBD_GetDescriptor+0x204>
 800b500:	a201      	add	r2, pc, #4	; (adr r2, 800b508 <USBD_GetDescriptor+0xb4>)
 800b502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b506:	bf00      	nop
 800b508:	0800b521 	.word	0x0800b521
 800b50c:	0800b555 	.word	0x0800b555
 800b510:	0800b589 	.word	0x0800b589
 800b514:	0800b5bd 	.word	0x0800b5bd
 800b518:	0800b5f1 	.word	0x0800b5f1
 800b51c:	0800b625 	.word	0x0800b625
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	7c12      	ldrb	r2, [r2, #16]
 800b538:	f107 0108 	add.w	r1, r7, #8
 800b53c:	4610      	mov	r0, r2
 800b53e:	4798      	blx	r3
 800b540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b542:	e091      	b.n	800b668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 facb 	bl	800bae2 <USBD_CtlError>
            err++;
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	3301      	adds	r3, #1
 800b550:	72fb      	strb	r3, [r7, #11]
          break;
 800b552:	e089      	b.n	800b668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b576:	e077      	b.n	800b668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fab1 	bl	800bae2 <USBD_CtlError>
            err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
          break;
 800b586:	e06f      	b.n	800b668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59a:	68db      	ldr	r3, [r3, #12]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	7c12      	ldrb	r2, [r2, #16]
 800b5a0:	f107 0108 	add.w	r1, r7, #8
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
 800b5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5aa:	e05d      	b.n	800b668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa97 	bl	800bae2 <USBD_CtlError>
            err++;
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ba:	e055      	b.n	800b668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00b      	beq.n	800b5e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	7c12      	ldrb	r2, [r2, #16]
 800b5d4:	f107 0108 	add.w	r1, r7, #8
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5de:	e043      	b.n	800b668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa7d 	bl	800bae2 <USBD_CtlError>
            err++;
 800b5e8:	7afb      	ldrb	r3, [r7, #11]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ee:	e03b      	b.n	800b668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00b      	beq.n	800b614 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b602:	695b      	ldr	r3, [r3, #20]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	7c12      	ldrb	r2, [r2, #16]
 800b608:	f107 0108 	add.w	r1, r7, #8
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
 800b610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b612:	e029      	b.n	800b668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa63 	bl	800bae2 <USBD_CtlError>
            err++;
 800b61c:	7afb      	ldrb	r3, [r7, #11]
 800b61e:	3301      	adds	r3, #1
 800b620:	72fb      	strb	r3, [r7, #11]
          break;
 800b622:	e021      	b.n	800b668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00b      	beq.n	800b648 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	7c12      	ldrb	r2, [r2, #16]
 800b63c:	f107 0108 	add.w	r1, r7, #8
 800b640:	4610      	mov	r0, r2
 800b642:	4798      	blx	r3
 800b644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b646:	e00f      	b.n	800b668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fa49 	bl	800bae2 <USBD_CtlError>
            err++;
 800b650:	7afb      	ldrb	r3, [r7, #11]
 800b652:	3301      	adds	r3, #1
 800b654:	72fb      	strb	r3, [r7, #11]
          break;
 800b656:	e007      	b.n	800b668 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b658:	6839      	ldr	r1, [r7, #0]
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fa41 	bl	800bae2 <USBD_CtlError>
          err++;
 800b660:	7afb      	ldrb	r3, [r7, #11]
 800b662:	3301      	adds	r3, #1
 800b664:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b666:	bf00      	nop
      }
      break;
 800b668:	e037      	b.n	800b6da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	7c1b      	ldrb	r3, [r3, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d109      	bne.n	800b686 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67a:	f107 0208 	add.w	r2, r7, #8
 800b67e:	4610      	mov	r0, r2
 800b680:	4798      	blx	r3
 800b682:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b684:	e029      	b.n	800b6da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fa2a 	bl	800bae2 <USBD_CtlError>
        err++;
 800b68e:	7afb      	ldrb	r3, [r7, #11]
 800b690:	3301      	adds	r3, #1
 800b692:	72fb      	strb	r3, [r7, #11]
      break;
 800b694:	e021      	b.n	800b6da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	7c1b      	ldrb	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10d      	bne.n	800b6ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a6:	f107 0208 	add.w	r2, r7, #8
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4798      	blx	r3
 800b6ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	2207      	movs	r2, #7
 800b6b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6b8:	e00f      	b.n	800b6da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fa10 	bl	800bae2 <USBD_CtlError>
        err++;
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6c8:	e007      	b.n	800b6da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fa08 	bl	800bae2 <USBD_CtlError>
      err++;
 800b6d2:	7afb      	ldrb	r3, [r7, #11]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6d8:	bf00      	nop
  }

  if (err != 0U)
 800b6da:	7afb      	ldrb	r3, [r7, #11]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d11e      	bne.n	800b71e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	88db      	ldrh	r3, [r3, #6]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d016      	beq.n	800b716 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b6e8:	893b      	ldrh	r3, [r7, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00e      	beq.n	800b70c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	88da      	ldrh	r2, [r3, #6]
 800b6f2:	893b      	ldrh	r3, [r7, #8]
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	bf28      	it	cs
 800b6f8:	4613      	movcs	r3, r2
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6fe:	893b      	ldrh	r3, [r7, #8]
 800b700:	461a      	mov	r2, r3
 800b702:	68f9      	ldr	r1, [r7, #12]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fa5d 	bl	800bbc4 <USBD_CtlSendData>
 800b70a:	e009      	b.n	800b720 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f9e7 	bl	800bae2 <USBD_CtlError>
 800b714:	e004      	b.n	800b720 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 faae 	bl	800bc78 <USBD_CtlSendStatus>
 800b71c:	e000      	b.n	800b720 <USBD_GetDescriptor+0x2cc>
    return;
 800b71e:	bf00      	nop
  }
}
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop

0800b728 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	889b      	ldrh	r3, [r3, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d131      	bne.n	800b79e <USBD_SetAddress+0x76>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	88db      	ldrh	r3, [r3, #6]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d12d      	bne.n	800b79e <USBD_SetAddress+0x76>
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	885b      	ldrh	r3, [r3, #2]
 800b746:	2b7f      	cmp	r3, #127	; 0x7f
 800b748:	d829      	bhi.n	800b79e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	885b      	ldrh	r3, [r3, #2]
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b754:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	2b03      	cmp	r3, #3
 800b760:	d104      	bne.n	800b76c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f9bc 	bl	800bae2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b76a:	e01d      	b.n	800b7a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	7bfa      	ldrb	r2, [r7, #15]
 800b770:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f00d fa43 	bl	8018c04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fa7a 	bl	800bc78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d004      	beq.n	800b794 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2202      	movs	r2, #2
 800b78e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b792:	e009      	b.n	800b7a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b79c:	e004      	b.n	800b7a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f99e 	bl	800bae2 <USBD_CtlError>
  }
}
 800b7a6:	bf00      	nop
 800b7a8:	bf00      	nop
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	885b      	ldrh	r3, [r3, #2]
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	4b4e      	ldr	r3, [pc, #312]	; (800b900 <USBD_SetConfig+0x150>)
 800b7c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7c8:	4b4d      	ldr	r3, [pc, #308]	; (800b900 <USBD_SetConfig+0x150>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d905      	bls.n	800b7dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f985 	bl	800bae2 <USBD_CtlError>
    return USBD_FAIL;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e08c      	b.n	800b8f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d002      	beq.n	800b7ee <USBD_SetConfig+0x3e>
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d029      	beq.n	800b840 <USBD_SetConfig+0x90>
 800b7ec:	e075      	b.n	800b8da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7ee:	4b44      	ldr	r3, [pc, #272]	; (800b900 <USBD_SetConfig+0x150>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d020      	beq.n	800b838 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b7f6:	4b42      	ldr	r3, [pc, #264]	; (800b900 <USBD_SetConfig+0x150>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b800:	4b3f      	ldr	r3, [pc, #252]	; (800b900 <USBD_SetConfig+0x150>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	4619      	mov	r1, r3
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7fe ffe7 	bl	800a7da <USBD_SetClassConfig>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b810:	7bfb      	ldrb	r3, [r7, #15]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d008      	beq.n	800b828 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 f962 	bl	800bae2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2202      	movs	r2, #2
 800b822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b826:	e065      	b.n	800b8f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 fa25 	bl	800bc78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2203      	movs	r2, #3
 800b832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b836:	e05d      	b.n	800b8f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 fa1d 	bl	800bc78 <USBD_CtlSendStatus>
      break;
 800b83e:	e059      	b.n	800b8f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b840:	4b2f      	ldr	r3, [pc, #188]	; (800b900 <USBD_SetConfig+0x150>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d112      	bne.n	800b86e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2202      	movs	r2, #2
 800b84c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b850:	4b2b      	ldr	r3, [pc, #172]	; (800b900 <USBD_SetConfig+0x150>)
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	461a      	mov	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b85a:	4b29      	ldr	r3, [pc, #164]	; (800b900 <USBD_SetConfig+0x150>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	4619      	mov	r1, r3
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7fe ffd6 	bl	800a812 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fa06 	bl	800bc78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b86c:	e042      	b.n	800b8f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b86e:	4b24      	ldr	r3, [pc, #144]	; (800b900 <USBD_SetConfig+0x150>)
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d02a      	beq.n	800b8d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7fe ffc4 	bl	800a812 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b88a:	4b1d      	ldr	r3, [pc, #116]	; (800b900 <USBD_SetConfig+0x150>)
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b894:	4b1a      	ldr	r3, [pc, #104]	; (800b900 <USBD_SetConfig+0x150>)
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	4619      	mov	r1, r3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7fe ff9d 	bl	800a7da <USBD_SetClassConfig>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00f      	beq.n	800b8ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f918 	bl	800bae2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7fe ffa9 	bl	800a812 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8c8:	e014      	b.n	800b8f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f9d4 	bl	800bc78 <USBD_CtlSendStatus>
      break;
 800b8d0:	e010      	b.n	800b8f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f9d0 	bl	800bc78 <USBD_CtlSendStatus>
      break;
 800b8d8:	e00c      	b.n	800b8f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f900 	bl	800bae2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8e2:	4b07      	ldr	r3, [pc, #28]	; (800b900 <USBD_SetConfig+0x150>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7fe ff92 	bl	800a812 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f2:	bf00      	nop
  }

  return ret;
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20002a28 	.word	0x20002a28

0800b904 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	88db      	ldrh	r3, [r3, #6]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d004      	beq.n	800b920 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f8e2 	bl	800bae2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b91e:	e023      	b.n	800b968 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b02      	cmp	r3, #2
 800b92a:	dc02      	bgt.n	800b932 <USBD_GetConfig+0x2e>
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	dc03      	bgt.n	800b938 <USBD_GetConfig+0x34>
 800b930:	e015      	b.n	800b95e <USBD_GetConfig+0x5a>
 800b932:	2b03      	cmp	r3, #3
 800b934:	d00b      	beq.n	800b94e <USBD_GetConfig+0x4a>
 800b936:	e012      	b.n	800b95e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	3308      	adds	r3, #8
 800b942:	2201      	movs	r2, #1
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f93c 	bl	800bbc4 <USBD_CtlSendData>
        break;
 800b94c:	e00c      	b.n	800b968 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3304      	adds	r3, #4
 800b952:	2201      	movs	r2, #1
 800b954:	4619      	mov	r1, r3
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f934 	bl	800bbc4 <USBD_CtlSendData>
        break;
 800b95c:	e004      	b.n	800b968 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 f8be 	bl	800bae2 <USBD_CtlError>
        break;
 800b966:	bf00      	nop
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b980:	b2db      	uxtb	r3, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	2b02      	cmp	r3, #2
 800b986:	d81e      	bhi.n	800b9c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	88db      	ldrh	r3, [r3, #6]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d004      	beq.n	800b99a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f8a5 	bl	800bae2 <USBD_CtlError>
        break;
 800b998:	e01a      	b.n	800b9d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d005      	beq.n	800b9b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	f043 0202 	orr.w	r2, r3, #2
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	330c      	adds	r3, #12
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	4619      	mov	r1, r3
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f900 	bl	800bbc4 <USBD_CtlSendData>
      break;
 800b9c4:	e004      	b.n	800b9d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 f88a 	bl	800bae2 <USBD_CtlError>
      break;
 800b9ce:	bf00      	nop
  }
}
 800b9d0:	bf00      	nop
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	885b      	ldrh	r3, [r3, #2]
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d107      	bne.n	800b9fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f940 	bl	800bc78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b9f8:	e013      	b.n	800ba22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	885b      	ldrh	r3, [r3, #2]
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d10b      	bne.n	800ba1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	889b      	ldrh	r3, [r3, #4]
 800ba06:	0a1b      	lsrs	r3, r3, #8
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	b2da      	uxtb	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f930 	bl	800bc78 <USBD_CtlSendStatus>
}
 800ba18:	e003      	b.n	800ba22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f860 	bl	800bae2 <USBD_CtlError>
}
 800ba22:	bf00      	nop
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b082      	sub	sp, #8
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d80b      	bhi.n	800ba5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	885b      	ldrh	r3, [r3, #2]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d10c      	bne.n	800ba64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f910 	bl	800bc78 <USBD_CtlSendStatus>
      }
      break;
 800ba58:	e004      	b.n	800ba64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f840 	bl	800bae2 <USBD_CtlError>
      break;
 800ba62:	e000      	b.n	800ba66 <USBD_ClrFeature+0x3c>
      break;
 800ba64:	bf00      	nop
  }
}
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	781a      	ldrb	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3301      	adds	r3, #1
 800ba88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	781a      	ldrb	r2, [r3, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	3301      	adds	r3, #1
 800ba96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7ff fa41 	bl	800af20 <SWAPBYTE>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	461a      	mov	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3301      	adds	r3, #1
 800baaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	3301      	adds	r3, #1
 800bab0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f7ff fa34 	bl	800af20 <SWAPBYTE>
 800bab8:	4603      	mov	r3, r0
 800baba:	461a      	mov	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	3301      	adds	r3, #1
 800bac4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3301      	adds	r3, #1
 800baca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f7ff fa27 	bl	800af20 <SWAPBYTE>
 800bad2:	4603      	mov	r3, r0
 800bad4:	461a      	mov	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	80da      	strh	r2, [r3, #6]
}
 800bada:	bf00      	nop
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b082      	sub	sp, #8
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800baec:	2180      	movs	r1, #128	; 0x80
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f00d f81e 	bl	8018b30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800baf4:	2100      	movs	r1, #0
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f00d f81a 	bl	8018b30 <USBD_LL_StallEP>
}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d036      	beq.n	800bb88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb1e:	6938      	ldr	r0, [r7, #16]
 800bb20:	f000 f836 	bl	800bb90 <USBD_GetLen>
 800bb24:	4603      	mov	r3, r0
 800bb26:	3301      	adds	r3, #1
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	005b      	lsls	r3, r3, #1
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	4413      	add	r3, r2
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	7812      	ldrb	r2, [r2, #0]
 800bb3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	3301      	adds	r3, #1
 800bb42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	4413      	add	r3, r2
 800bb4a:	2203      	movs	r2, #3
 800bb4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb4e:	7dfb      	ldrb	r3, [r7, #23]
 800bb50:	3301      	adds	r3, #1
 800bb52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb54:	e013      	b.n	800bb7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	7812      	ldrb	r2, [r2, #0]
 800bb60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	3301      	adds	r3, #1
 800bb66:	613b      	str	r3, [r7, #16]
    idx++;
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	4413      	add	r3, r2
 800bb74:	2200      	movs	r2, #0
 800bb76:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb78:	7dfb      	ldrb	r3, [r7, #23]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e7      	bne.n	800bb56 <USBD_GetString+0x52>
 800bb86:	e000      	b.n	800bb8a <USBD_GetString+0x86>
    return;
 800bb88:	bf00      	nop
  }
}
 800bb8a:	3718      	adds	r7, #24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bba0:	e005      	b.n	800bbae <USBD_GetLen+0x1e>
  {
    len++;
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
 800bba4:	3301      	adds	r3, #1
 800bba6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1f5      	bne.n	800bba2 <USBD_GetLen+0x12>
  }

  return len;
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	2100      	movs	r1, #0
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f00d f829 	bl	8018c42 <USBD_LL_Transmit>

  return USBD_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	60f8      	str	r0, [r7, #12]
 800bc02:	60b9      	str	r1, [r7, #8]
 800bc04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f00d f818 	bl	8018c42 <USBD_LL_Transmit>

  return USBD_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2203      	movs	r2, #3
 800bc2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	2100      	movs	r1, #0
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f00d f81c 	bl	8018c84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b084      	sub	sp, #16
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	60f8      	str	r0, [r7, #12]
 800bc5e:	60b9      	str	r1, [r7, #8]
 800bc60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	2100      	movs	r1, #0
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f00d f80b 	bl	8018c84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2204      	movs	r2, #4
 800bc84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc88:	2300      	movs	r3, #0
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f00c ffd7 	bl	8018c42 <USBD_LL_Transmit>

  return USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2205      	movs	r2, #5
 800bcaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcae:	2300      	movs	r3, #0
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f00c ffe5 	bl	8018c84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b08b      	sub	sp, #44	; 0x2c
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	ed87 0a02 	vstr	s0, [r7, #8]
 800bcd0:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	881b      	ldrh	r3, [r3, #0]
 800bce2:	461a      	mov	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	885b      	ldrh	r3, [r3, #2]
 800bce8:	fb02 f303 	mul.w	r3, r2, r3
 800bcec:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bcf2:	e010      	b.n	800bd16 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	1d1a      	adds	r2, r3, #4
 800bcf8:	627a      	str	r2, [r7, #36]	; 0x24
 800bcfa:	ed93 7a00 	vldr	s14, [r3]
 800bcfe:	6a3b      	ldr	r3, [r7, #32]
 800bd00:	1d1a      	adds	r2, r3, #4
 800bd02:	623a      	str	r2, [r7, #32]
 800bd04:	edd7 7a02 	vldr	s15, [r7, #8]
 800bd08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd0c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	3b01      	subs	r3, #1
 800bd14:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1eb      	bne.n	800bcf4 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800bd20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	372c      	adds	r7, #44	; 0x2c
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b08b      	sub	sp, #44	; 0x2c
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	885b      	ldrh	r3, [r3, #2]
 800bd50:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800bd52:	89fb      	ldrh	r3, [r7, #14]
 800bd54:	61bb      	str	r3, [r7, #24]
 800bd56:	2300      	movs	r3, #0
 800bd58:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	4413      	add	r3, r2
 800bd62:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800bd64:	89bb      	ldrh	r3, [r7, #12]
 800bd66:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800bd68:	e00d      	b.n	800bd86 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	1d1a      	adds	r2, r3, #4
 800bd6e:	627a      	str	r2, [r7, #36]	; 0x24
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800bd76:	89fb      	ldrh	r3, [r7, #14]
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	6a3a      	ldr	r2, [r7, #32]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	3b01      	subs	r3, #1
 800bd84:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1ee      	bne.n	800bd6a <arm_mat_trans_f32+0x3a>
      }

      i++;
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1dd      	bne.n	800bd5a <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800bda2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	372c      	adds	r7, #44	; 0x2c
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <arm_max_f32>:
void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b089      	sub	sp, #36	; 0x24
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	607a      	str	r2, [r7, #4]
 800bdbe:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	1d1a      	adds	r2, r3, #4
 800bdc8:	60fa      	str	r2, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800bdd4:	e016      	b.n	800be04 <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	1d1a      	adds	r2, r3, #4
 800bdda:	60fa      	str	r2, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 800bde0:	ed97 7a07 	vldr	s14, [r7, #28]
 800bde4:	edd7 7a04 	vldr	s15, [r7, #16]
 800bde8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf0:	d505      	bpl.n	800bdfe <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	3b01      	subs	r3, #1
 800be02:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e5      	bne.n	800bdd6 <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69fa      	ldr	r2, [r7, #28]
 800be0e:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	601a      	str	r2, [r3, #0]
}
 800be16:	bf00      	nop
 800be18:	3724      	adds	r7, #36	; 0x24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800be22:	b480      	push	{r7}
 800be24:	b087      	sub	sp, #28
 800be26:	af00      	add	r7, sp, #0
 800be28:	60f8      	str	r0, [r7, #12]
 800be2a:	60b9      	str	r1, [r7, #8]
 800be2c:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800be2e:	f04f 0300 	mov.w	r3, #0
 800be32:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800be38:	e00d      	b.n	800be56 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	1d1a      	adds	r2, r3, #4
 800be3e:	60fa      	str	r2, [r7, #12]
 800be40:	edd3 7a00 	vldr	s15, [r3]
 800be44:	ed97 7a04 	vldr	s14, [r7, #16]
 800be48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be4c:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	3b01      	subs	r3, #1
 800be54:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1ee      	bne.n	800be3a <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be66:	edd7 6a04 	vldr	s13, [r7, #16]
 800be6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	edc3 7a00 	vstr	s15, [r3]
}
 800be74:	bf00      	nop
 800be76:	371c      	adds	r7, #28
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <arm_min_f32>:
void arm_min_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 800be80:	b480      	push	{r7}
 800be82:	b089      	sub	sp, #36	; 0x24
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	1d1a      	adds	r2, r3, #4
 800be96:	60fa      	str	r2, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800bea2:	e016      	b.n	800bed2 <arm_min_f32+0x52>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal = *pSrc++;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	1d1a      	adds	r2, r3, #4
 800bea8:	60fa      	str	r2, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if (out > minVal)
 800beae:	ed97 7a07 	vldr	s14, [r7, #28]
 800beb2:	edd7 7a04 	vldr	s15, [r7, #16]
 800beb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800beba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bebe:	dd05      	ble.n	800becc <arm_min_f32+0x4c>
    {
      /* Update the minimum value and it's index */
      out = minVal;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	3b01      	subs	r3, #1
 800bed0:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1e5      	bne.n	800bea4 <arm_min_f32+0x24>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	69fa      	ldr	r2, [r7, #28]
 800bedc:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	601a      	str	r2, [r3, #0]
}
 800bee4:	bf00      	nop
 800bee6:	3724      	adds	r7, #36	; 0x24
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b08a      	sub	sp, #40	; 0x28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800befc:	f04f 0300 	mov.w	r3, #0
 800bf00:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800bf06:	e011      	b.n	800bf2c <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	1d1a      	adds	r2, r3, #4
 800bf0c:	60fa      	str	r2, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800bf12:	edd7 7a07 	vldr	s15, [r7, #28]
 800bf16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bf1a:	ed97 7a08 	vldr	s14, [r7, #32]
 800bf1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf22:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1ea      	bne.n	800bf08 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	ee07 3a90 	vmov	s15, r3
 800bf38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bf3c:	edd7 6a08 	vldr	s13, [r7, #32]
 800bf40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf44:	edc7 7a06 	vstr	s15, [r7, #24]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800bf4c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bf50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf58:	db09      	blt.n	800bf6e <arm_rms_f32+0x7e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800bf5a:	ed97 0a06 	vldr	s0, [r7, #24]
 800bf5e:	f00d f921 	bl	80191a4 <sqrtf>
 800bf62:	eef0 7a40 	vmov.f32	s15, s0
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800bf6c:	e004      	b.n	800bf78 <arm_rms_f32+0x88>
    }
    else
    {
      *pOut = 0.0f;
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f04f 0200 	mov.w	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800bf76:	bf00      	nop
}
 800bf78:	bf00      	nop
 800bf7a:	3728      	adds	r7, #40	; 0x28
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 800bf80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf82:	b093      	sub	sp, #76	; 0x4c
 800bf84:	af0a      	add	r7, sp, #40	; 0x28
 800bf86:	6178      	str	r0, [r7, #20]
 800bf88:	6139      	str	r1, [r7, #16]
 800bf8a:	60fa      	str	r2, [r7, #12]
 800bf8c:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 800bf94:	e033      	b.n	800bffe <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	607b      	str	r3, [r7, #4]
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	6852      	ldr	r2, [r2, #4]
 800bfa0:	6939      	ldr	r1, [r7, #16]
 800bfa2:	6889      	ldr	r1, [r1, #8]
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	6800      	ldr	r0, [r0, #0]
 800bfa8:	68fc      	ldr	r4, [r7, #12]
 800bfaa:	6864      	ldr	r4, [r4, #4]
 800bfac:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800bfae:	682d      	ldr	r5, [r5, #0]
 800bfb0:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800bfb2:	68f6      	ldr	r6, [r6, #12]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	603b      	str	r3, [r7, #0]
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	9308      	str	r3, [sp, #32]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	9606      	str	r6, [sp, #24]
 800bfc6:	9505      	str	r5, [sp, #20]
 800bfc8:	9404      	str	r4, [sp, #16]
 800bfca:	9003      	str	r0, [sp, #12]
 800bfcc:	9102      	str	r1, [sp, #8]
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfdc:	f000 f822 	bl	800c024 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe8:	4413      	add	r3, r2
 800bfea:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 800bfec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	461a      	mov	r2, r3
 800bff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bff4:	4413      	add	r3, r2
 800bff6:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1c8      	bne.n	800bf96 <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3724      	adds	r7, #36	; 0x24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c00e <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 800c00e:	b480      	push	{r7}
 800c010:	b083      	sub	sp, #12
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800c024:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c028:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 800c032:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 800c036:	6020      	str	r0, [r4, #0]
 800c038:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 800c03c:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 800c040:	6001      	str	r1, [r0, #0]
 800c042:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c046:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 800c04a:	600a      	str	r2, [r1, #0]
 800c04c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c050:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 800c054:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 800c056:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c05a:	3b04      	subs	r3, #4
 800c05c:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 800c060:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800c064:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 800c068:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800c06c:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800c070:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800c074:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800c078:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800c07c:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 800c080:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 800c084:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800c088:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800c08c:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800c090:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800c094:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800c098:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800c09c:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800c0a0:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800c0a4:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 800c0a8:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 800c0ac:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800c0b0:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800c0b4:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800c0b8:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800c0bc:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800c0c6:	f001 bd13 	b.w	800daf0 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800c0ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ce:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800c0d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0d6:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800c0de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0e2:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 800c0e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ea:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 800c0fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c102:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01b      	beq.n	800c144 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 800c10c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c110:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c114:	6819      	ldr	r1, [r3, #0]
 800c116:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c11a:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800c11e:	1d0b      	adds	r3, r1, #4
 800c120:	6013      	str	r3, [r2, #0]
 800c122:	680b      	ldr	r3, [r1, #0]
 800c124:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 800c128:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c12c:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c130:	6819      	ldr	r1, [r3, #0]
 800c132:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c136:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800c13a:	1d0b      	adds	r3, r1, #4
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	680b      	ldr	r3, [r1, #0]
 800c140:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 800c144:	2300      	movs	r3, #0
 800c146:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800c14a:	f001 b9db 	b.w	800d504 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 800c14e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c152:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800c156:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c15a:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800c15c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c160:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c170:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800c174:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c17a:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	1d1a      	adds	r2, r3, #4
 800c184:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c188:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	601a      	str	r2, [r3, #0]

    return (val);
 800c190:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c194:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800c198:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c19a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800c19e:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c1a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1a6:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 800c1aa:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c1ae:	6013      	str	r3, [r2, #0]
 800c1b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1b4:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800c1b8:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c1ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1be:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1c8:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	fa22 f283 	sxtab16	r2, r2, r3
 800c1d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1d6:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800c1da:	601a      	str	r2, [r3, #0]
  return(result);
 800c1dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1e0:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c1ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1ee:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800c1f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c1f6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c1f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1fc:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c20c:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800c210:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c212:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c216:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	1d1a      	adds	r2, r3, #4
 800c220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c224:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	601a      	str	r2, [r3, #0]
    return (val);
 800c22c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c230:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800c234:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c236:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c23a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c23e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c242:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800c246:	601a      	str	r2, [r3, #0]
 800c248:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c24c:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800c250:	2308      	movs	r3, #8
 800c252:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c254:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c258:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800c25c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c260:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f003 031f 	and.w	r3, r3, #31
 800c26a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c26c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c270:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d105      	bne.n	800c286 <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 800c27a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c27e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800c282:	6819      	ldr	r1, [r3, #0]
 800c284:	e00b      	b.n	800c29e <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c286:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c28a:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800c28e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c292:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800c296:	6812      	ldr	r2, [r2, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	fa62 f103 	ror.w	r1, r2, r3
 800c29e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2a2:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 800c2a6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c2aa:	6013      	str	r3, [r2, #0]
 800c2ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2b0:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800c2b4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c2b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2ba:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2c4:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	fa22 f283 	sxtab16	r2, r2, r3
 800c2ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2d2:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800c2d6:	601a      	str	r2, [r3, #0]
  return(result);
 800c2d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2dc:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800c2e6:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c2ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2ee:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 800c2f2:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2fc:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800c300:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c302:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c306:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c310:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	fa22 f283 	sxtab16	r2, r2, r3
 800c31a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c31e:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800c322:	601a      	str	r2, [r3, #0]
  return(result);
 800c324:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c328:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800c332:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c336:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c340:	441a      	add	r2, r3
 800c342:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c346:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800c34a:	601a      	str	r2, [r3, #0]
 800c34c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c350:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 800c35a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c35e:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800c362:	601a      	str	r2, [r3, #0]

    return (val);
 800c364:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c368:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800c372:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c376:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c37a:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800c37e:	601a      	str	r2, [r3, #0]
 800c380:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c384:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800c388:	2308      	movs	r3, #8
 800c38a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c38c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c390:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800c394:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c398:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 031f 	and.w	r3, r3, #31
 800c3a2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c3a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3a8:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d105      	bne.n	800c3be <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 800c3b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3b6:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800c3ba:	6819      	ldr	r1, [r3, #0]
 800c3bc:	e00b      	b.n	800c3d6 <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c3be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3c2:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800c3c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3ca:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800c3ce:	6812      	ldr	r2, [r2, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	fa62 f103 	ror.w	r1, r2, r3
 800c3d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3da:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800c3de:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c3e2:	6013      	str	r3, [r2, #0]
 800c3e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3e8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800c3ec:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c3ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3f2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3fc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	fa22 f283 	sxtab16	r2, r2, r3
 800c406:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c40a:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800c40e:	601a      	str	r2, [r3, #0]
  return(result);
 800c410:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c414:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800c41e:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c422:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800c426:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c42a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c42e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c438:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800c43c:	6019      	str	r1, [r3, #0]
 800c43e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c442:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800c446:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c448:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c44c:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800c450:	6819      	ldr	r1, [r3, #0]
 800c452:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c456:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c460:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	fb21 3202 	smlad	r2, r1, r2, r3
 800c46a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c46e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800c472:	601a      	str	r2, [r3, #0]
  return(result);
 800c474:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c478:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800c482:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c486:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c48a:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800c48e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c492:	6013      	str	r3, [r2, #0]
 800c494:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c498:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800c49c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c49e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4a2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4ac:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	fa22 f283 	sxtab16	r2, r2, r3
 800c4b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4ba:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800c4be:	601a      	str	r2, [r3, #0]
  return(result);
 800c4c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4c4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800c4ce:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c4d2:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c4d6:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c4da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4de:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4e8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800c4ec:	6019      	str	r1, [r3, #0]
 800c4ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4f2:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800c4f6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c4f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4fc:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800c500:	6819      	ldr	r1, [r3, #0]
 800c502:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c506:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c510:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	fb21 3202 	smlad	r2, r1, r2, r3
 800c51a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c51e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800c522:	601a      	str	r2, [r3, #0]
  return(result);
 800c524:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c528:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800c532:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800c536:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c53a:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c544:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800c548:	2308      	movs	r3, #8
 800c54a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c54c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c550:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800c554:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c558:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 031f 	and.w	r3, r3, #31
 800c562:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c568:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d105      	bne.n	800c57e <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 800c572:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c576:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800c57a:	6819      	ldr	r1, [r3, #0]
 800c57c:	e00b      	b.n	800c596 <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c57e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c582:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800c586:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c58a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800c58e:	6812      	ldr	r2, [r2, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	fa62 f103 	ror.w	r1, r2, r3
 800c596:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c59a:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800c59e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5a8:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800c5ac:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c5ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5b2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5bc:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	fa22 f283 	sxtab16	r2, r2, r3
 800c5c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5ca:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800c5ce:	601a      	str	r2, [r3, #0]
  return(result);
 800c5d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5d4:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800c5de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5e2:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800c5e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c5ea:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c5ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5f0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c600:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800c604:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c606:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c60a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	1d1a      	adds	r2, r3, #4
 800c614:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c618:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	601a      	str	r2, [r3, #0]
    return (val);
 800c620:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c624:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800c628:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c62a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800c62e:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c632:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800c636:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c63a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c63e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c648:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800c64c:	6019      	str	r1, [r3, #0]
 800c64e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c652:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800c656:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c658:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c65c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800c660:	6819      	ldr	r1, [r3, #0]
 800c662:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c666:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c670:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	fb21 3202 	smlad	r2, r1, r2, r3
 800c67a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c67e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800c682:	601a      	str	r2, [r3, #0]
  return(result);
 800c684:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c688:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800c692:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c696:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c69a:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800c69e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6a2:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6ac:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800c6b0:	6019      	str	r1, [r3, #0]
 800c6b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6b6:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800c6ba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c6bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6c0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800c6c4:	6819      	ldr	r1, [r3, #0]
 800c6c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6ca:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6d4:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	fb21 3202 	smlad	r2, r1, r2, r3
 800c6de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6e2:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800c6e6:	601a      	str	r2, [r3, #0]
  return(result);
 800c6e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6ec:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800c6f6:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800c6fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6fe:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 800c702:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c706:	6013      	str	r3, [r2, #0]
 800c708:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c70c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800c710:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c712:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c716:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c720:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	fa22 f283 	sxtab16	r2, r2, r3
 800c72a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c72e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800c732:	601a      	str	r2, [r3, #0]
  return(result);
 800c734:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c738:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800c742:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c746:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 800c74a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c74e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800c750:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c754:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c764:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800c768:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c76a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c76e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	1d1a      	adds	r2, r3, #4
 800c778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c77c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	601a      	str	r2, [r3, #0]
    return (val);
 800c784:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c788:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800c78c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c78e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c792:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800c796:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c79a:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800c79e:	601a      	str	r2, [r3, #0]
 800c7a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7a4:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800c7a8:	2308      	movs	r3, #8
 800c7aa:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c7ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7b0:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800c7b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7b8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 031f 	and.w	r3, r3, #31
 800c7c2:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c7c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7c8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d105      	bne.n	800c7de <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 800c7d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7d6:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800c7da:	6819      	ldr	r1, [r3, #0]
 800c7dc:	e00b      	b.n	800c7f6 <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c7de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7e2:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 800c7e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7ea:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800c7ee:	6812      	ldr	r2, [r2, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	fa62 f103 	ror.w	r1, r2, r3
 800c7f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7fa:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800c7fe:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c802:	6013      	str	r3, [r2, #0]
 800c804:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c808:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800c80c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c80e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c812:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c81c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	fa22 f283 	sxtab16	r2, r2, r3
 800c826:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c82a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800c82e:	601a      	str	r2, [r3, #0]
  return(result);
 800c830:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c834:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800c83e:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c842:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c846:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800c84a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c854:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800c858:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c85a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c85e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c868:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	fa22 f283 	sxtab16	r2, r2, r3
 800c872:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c876:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800c87a:	601a      	str	r2, [r3, #0]
  return(result);
 800c87c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c880:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800c88a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c88e:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c898:	441a      	add	r2, r3
 800c89a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c89e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800c8a2:	601a      	str	r2, [r3, #0]
 800c8a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800c8b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8b6:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800c8ba:	601a      	str	r2, [r3, #0]
    return (val);
 800c8bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8c0:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800c8ca:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800c8ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8dc:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800c8e0:	2308      	movs	r3, #8
 800c8e2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800c8e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8e8:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800c8ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8f0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f003 031f 	and.w	r3, r3, #31
 800c8fa:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800c8fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c900:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d105      	bne.n	800c916 <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 800c90a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c90e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800c912:	6819      	ldr	r1, [r3, #0]
 800c914:	e00b      	b.n	800c92e <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c916:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c91a:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800c91e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c922:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800c926:	6812      	ldr	r2, [r2, #0]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	fa62 f103 	ror.w	r1, r2, r3
 800c92e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c932:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 800c936:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800c93a:	6013      	str	r3, [r2, #0]
 800c93c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c940:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800c944:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c946:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c94a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c954:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	fa22 f283 	sxtab16	r2, r2, r3
 800c95e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c962:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800c966:	601a      	str	r2, [r3, #0]
  return(result);
 800c968:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c96c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800c976:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800c97a:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800c97e:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800c982:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c986:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c990:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800c994:	6019      	str	r1, [r3, #0]
 800c996:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c99a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800c99e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c9a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9a4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800c9a8:	6819      	ldr	r1, [r3, #0]
 800c9aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ae:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9b8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	fb21 3202 	smlad	r2, r1, r2, r3
 800c9c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9c6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800c9ca:	601a      	str	r2, [r3, #0]
  return(result);
 800c9cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9d0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800c9da:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800c9de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9e2:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800c9e6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800c9ea:	6013      	str	r3, [r2, #0]
 800c9ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9f0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800c9f4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c9f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9fa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca04:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	fa22 f283 	sxtab16	r2, r2, r3
 800ca0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca12:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800ca16:	601a      	str	r2, [r3, #0]
  return(result);
 800ca18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca1c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800ca26:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800ca2a:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800ca2e:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800ca32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca36:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca40:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ca44:	6019      	str	r1, [r3, #0]
 800ca46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca4a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ca4e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ca50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca54:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ca58:	6819      	ldr	r1, [r3, #0]
 800ca5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca5e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca68:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	fb21 3202 	smlad	r2, r1, r2, r3
 800ca72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca76:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ca7a:	601a      	str	r2, [r3, #0]
  return(result);
 800ca7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca80:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800ca8a:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800ca8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800ca96:	601a      	str	r2, [r3, #0]
 800ca98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca9c:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800caa0:	2308      	movs	r3, #8
 800caa2:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800caa4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caa8:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800caac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cab0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f003 031f 	and.w	r3, r3, #31
 800caba:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800cabc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cac0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d105      	bne.n	800cad6 <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 800caca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cace:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800cad2:	6819      	ldr	r1, [r3, #0]
 800cad4:	e00b      	b.n	800caee <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cad6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cada:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800cade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cae2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800cae6:	6812      	ldr	r2, [r2, #0]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	fa62 f103 	ror.w	r1, r2, r3
 800caee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caf2:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800caf6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb04:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cb06:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb0a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	fa22 f283 	sxtab16	r2, r2, r3
 800cb1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb22:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800cb26:	601a      	str	r2, [r3, #0]
  return(result);
 800cb28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb2c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800cb36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb3a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800cb3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800cb42:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800cb44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb48:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	461a      	mov	r2, r3
 800cb54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb58:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800cb5c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cb5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb62:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	1d1a      	adds	r2, r3, #4
 800cb6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb70:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	601a      	str	r2, [r3, #0]
    return (val);
 800cb78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb7c:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800cb80:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800cb82:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800cb86:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800cb8a:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800cb8e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800cb92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb96:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cba0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800cba4:	6019      	str	r1, [r3, #0]
 800cba6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbaa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800cbae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cbb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbb4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800cbb8:	6819      	ldr	r1, [r3, #0]
 800cbba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbbe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbc8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	fb21 3202 	smlad	r2, r1, r2, r3
 800cbd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbd6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800cbda:	601a      	str	r2, [r3, #0]
  return(result);
 800cbdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbe0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800cbea:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cbee:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800cbf2:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800cbf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbfa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800cc08:	6019      	str	r1, [r3, #0]
 800cc0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800cc12:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cc14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc18:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800cc1c:	6819      	ldr	r1, [r3, #0]
 800cc1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc22:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	fb21 3202 	smlad	r2, r1, r2, r3
 800cc36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc3a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cc3e:	601a      	str	r2, [r3, #0]
  return(result);
 800cc40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800cc4e:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800cc52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc56:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800cc5a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cc5e:	6013      	str	r3, [r2, #0]
 800cc60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc64:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800cc68:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cc6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc6e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc78:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	fa22 f283 	sxtab16	r2, r2, r3
 800cc82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc86:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800cc8a:	601a      	str	r2, [r3, #0]
  return(result);
 800cc8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc90:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800cc9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc9e:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800cca2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800cca6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800cca8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccbc:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800ccc0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ccc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccc6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	1d1a      	adds	r2, r3, #4
 800ccd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccd4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	601a      	str	r2, [r3, #0]
    return (val);
 800ccdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cce0:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800cce4:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800cce6:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800ccea:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800ccee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccf2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ccf6:	601a      	str	r2, [r3, #0]
 800ccf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccfc:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800cd00:	2308      	movs	r3, #8
 800cd02:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800cd04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd08:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800cd0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd10:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 031f 	and.w	r3, r3, #31
 800cd1a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800cd1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd20:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d105      	bne.n	800cd36 <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 800cd2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd2e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800cd32:	6819      	ldr	r1, [r3, #0]
 800cd34:	e00b      	b.n	800cd4e <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cd36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd3a:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800cd3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd42:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800cd46:	6812      	ldr	r2, [r2, #0]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	fa62 f103 	ror.w	r1, r2, r3
 800cd4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd52:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800cd56:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd60:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800cd64:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cd66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	fa22 f283 	sxtab16	r2, r2, r3
 800cd7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800cd86:	601a      	str	r2, [r3, #0]
  return(result);
 800cd88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd8c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800cd96:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800cd9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd9e:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800cda2:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800cda6:	6013      	str	r3, [r2, #0]
 800cda8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdac:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800cdb0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cdb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdb6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdc0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	fa22 f283 	sxtab16	r2, r2, r3
 800cdca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cdd2:	601a      	str	r2, [r3, #0]
  return(result);
 800cdd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdd8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800cde2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cde6:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800cdf0:	441a      	add	r2, r3
 800cdf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdf6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800cdfa:	601a      	str	r2, [r3, #0]
 800cdfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce00:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800ce0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce0e:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800ce12:	601a      	str	r2, [r3, #0]
    return (val);
 800ce14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce18:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800ce22:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800ce26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800ce2e:	601a      	str	r2, [r3, #0]
 800ce30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce34:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800ce38:	2308      	movs	r3, #8
 800ce3a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ce3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce40:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800ce44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce48:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 031f 	and.w	r3, r3, #31
 800ce52:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ce54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce58:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d105      	bne.n	800ce6e <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 800ce62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce66:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800ce6a:	6819      	ldr	r1, [r3, #0]
 800ce6c:	e00b      	b.n	800ce86 <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ce6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce72:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800ce76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ce7e:	6812      	ldr	r2, [r2, #0]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	fa62 f103 	ror.w	r1, r2, r3
 800ce86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce8a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800ce8e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800ce9c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ce9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cea2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	fa22 f283 	sxtab16	r2, r2, r3
 800ceb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800cebe:	601a      	str	r2, [r3, #0]
  return(result);
 800cec0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cec4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800cece:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800ced2:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800ced6:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800ceda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cede:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cee8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800ceec:	6019      	str	r1, [r3, #0]
 800ceee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cef2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800cef6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cef8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cefc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800cf00:	6819      	ldr	r1, [r3, #0]
 800cf02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf06:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	fb21 3202 	smlad	r2, r1, r2, r3
 800cf1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf1e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800cf22:	601a      	str	r2, [r3, #0]
  return(result);
 800cf24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf28:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800cf32:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800cf36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf3a:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800cf3e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800cf42:	6013      	str	r3, [r2, #0]
 800cf44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf48:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800cf4c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cf4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	fa22 f283 	sxtab16	r2, r2, r3
 800cf66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf6a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800cf6e:	601a      	str	r2, [r3, #0]
  return(result);
 800cf70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf74:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800cf7e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800cf82:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800cf86:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800cf8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf8e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cf9c:	6019      	str	r1, [r3, #0]
 800cf9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfa2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cfa6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cfa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfac:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800cfb0:	6819      	ldr	r1, [r3, #0]
 800cfb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfb6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfc0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	fb21 3202 	smlad	r2, r1, r2, r3
 800cfca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800cfd2:	601a      	str	r2, [r3, #0]
  return(result);
 800cfd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfd8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800cfe2:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800cfe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfea:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800cfee:	601a      	str	r2, [r3, #0]
 800cff0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cff4:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800cff8:	2308      	movs	r3, #8
 800cffa:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800cffc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d000:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800d004:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d008:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f003 031f 	and.w	r3, r3, #31
 800d012:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d014:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d018:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d105      	bne.n	800d02e <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 800d022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d026:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d02a:	6819      	ldr	r1, [r3, #0]
 800d02c:	e00b      	b.n	800d046 <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d02e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d032:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800d036:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d03a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d03e:	6812      	ldr	r2, [r2, #0]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	fa62 f103 	ror.w	r1, r2, r3
 800d046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d04a:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800d04e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d052:	6013      	str	r3, [r2, #0]
 800d054:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d058:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d05c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d05e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d062:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d06c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	fa22 f283 	sxtab16	r2, r2, r3
 800d076:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d07a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d07e:	601a      	str	r2, [r3, #0]
  return(result);
 800d080:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d084:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800d08e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d092:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800d096:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d09a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d09c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0b0:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800d0b4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d0b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0ba:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	1d1a      	adds	r2, r3, #4
 800d0c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	601a      	str	r2, [r3, #0]
    return (val);
 800d0d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0d4:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800d0d8:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800d0da:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800d0de:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800d0e2:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800d0e6:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800d0ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d0fc:	6019      	str	r1, [r3, #0]
 800d0fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d102:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d106:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d108:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d10c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d110:	6819      	ldr	r1, [r3, #0]
 800d112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d116:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d120:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	fb21 3202 	smlad	r2, r1, r2, r3
 800d12a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d12e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d132:	601a      	str	r2, [r3, #0]
  return(result);
 800d134:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d138:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800d142:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d146:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800d14a:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800d14e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d152:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d156:	601a      	str	r2, [r3, #0]
 800d158:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d15c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d160:	6019      	str	r1, [r3, #0]
 800d162:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d16a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d16c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d170:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d174:	6819      	ldr	r1, [r3, #0]
 800d176:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d17a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	fb21 3202 	smlad	r2, r1, r2, r3
 800d18e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d192:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d196:	601a      	str	r2, [r3, #0]
  return(result);
 800d198:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d19c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800d1a6:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800d1aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1ae:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800d1b2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d1c0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d1c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	fa22 f283 	sxtab16	r2, r2, r3
 800d1da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d1e2:	601a      	str	r2, [r3, #0]
  return(result);
 800d1e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800d1f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1f6:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800d1fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800d1fe:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800d200:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d204:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d214:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800d218:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800d21a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d21e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	1d1a      	adds	r2, r3, #4
 800d228:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d22c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	601a      	str	r2, [r3, #0]
    return (val);
 800d234:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d238:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800d23c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800d23e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800d242:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800d246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d24a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d254:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800d258:	2308      	movs	r3, #8
 800d25a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800d25c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d260:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800d264:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d268:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f003 031f 	and.w	r3, r3, #31
 800d272:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800d274:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d278:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d105      	bne.n	800d28e <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 800d282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d286:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d28a:	6819      	ldr	r1, [r3, #0]
 800d28c:	e00b      	b.n	800d2a6 <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d28e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d292:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800d296:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d29a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d29e:	6812      	ldr	r2, [r2, #0]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	fa62 f103 	ror.w	r1, r2, r3
 800d2a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2aa:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800d2ae:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d2b2:	6013      	str	r3, [r2, #0]
 800d2b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2bc:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d2be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	fa22 f283 	sxtab16	r2, r2, r3
 800d2d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d2de:	601a      	str	r2, [r3, #0]
  return(result);
 800d2e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800d2ee:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d2f2:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d2f6:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800d2fa:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d2fe:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800d302:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800d306:	fa22 f283 	sxtab16	r2, r2, r3
 800d30a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d30e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d312:	601a      	str	r2, [r3, #0]
  return(result);
 800d314:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d318:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800d322:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d326:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800d330:	4413      	add	r3, r2
 800d332:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800d336:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800d33e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d342:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800d346:	601a      	str	r2, [r3, #0]
    return (val);
 800d348:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d34c:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800d356:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800d35a:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800d35e:	2308      	movs	r3, #8
 800d360:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 800d364:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d368:	f003 031f 	and.w	r3, r3, #31
 800d36c:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 800d370:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d374:	2b00      	cmp	r3, #0
 800d376:	d102      	bne.n	800d37e <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 800d378:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800d37c:	e004      	b.n	800d388 <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d37e:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800d382:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d386:	41da      	rors	r2, r3
 800d388:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d38c:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800d390:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d394:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 800d398:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800d39c:	fa22 f383 	sxtab16	r3, r2, r3
 800d3a0:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 800d3a4:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800d3a8:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800d3ac:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800d3b0:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 800d3b4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d3b8:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800d3bc:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800d3c0:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d3c4:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800d3c8:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800d3cc:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800d3d0:	fb21 3302 	smlad	r3, r1, r2, r3
 800d3d4:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 800d3d8:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800d3dc:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800d3e0:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800d3e4:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d3e8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800d3ec:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d3f0:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800d3f4:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800d3f8:	fa22 f383 	sxtab16	r3, r2, r3
 800d3fc:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 800d400:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800d404:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800d408:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800d40c:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800d410:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d414:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 800d418:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800d41c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d420:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800d424:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800d428:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d42c:	fb21 3302 	smlad	r3, r1, r2, r3
 800d430:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 800d434:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800d438:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800d43c:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800d440:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800d444:	2308      	movs	r3, #8
 800d446:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 800d44a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800d44e:	f003 031f 	and.w	r3, r3, #31
 800d452:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 800d456:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d102      	bne.n	800d464 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 800d45e:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800d462:	e004      	b.n	800d46e <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d464:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800d468:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800d46c:	41da      	rors	r2, r3
 800d46e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800d472:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800d476:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d47a:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 800d47e:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800d482:	fa22 f383 	sxtab16	r3, r2, r3
 800d486:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 800d48a:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800d48e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 800d492:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800d496:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 800d49a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d49e:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800d4a2:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 800d4a6:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d4aa:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800d4ae:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800d4b2:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 800d4b6:	fb21 3302 	smlad	r3, r1, r2, r3
 800d4ba:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 800d4be:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800d4c2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800d4c6:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800d4ca:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800d4ce:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d4d2:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800d4d6:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 800d4da:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d4de:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800d4e2:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800d4e6:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800d4ea:	fb21 3302 	smlad	r3, r1, r2, r3
 800d4ee:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 800d4f2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800d4f6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800d4fa:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800d4fe:	3310      	adds	r3, #16
 800d500:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800d504:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d508:	f1a3 020f 	sub.w	r2, r3, #15
 800d50c:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800d510:	4293      	cmp	r3, r2
 800d512:	f6fe ae1c 	blt.w	800c14e <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d516:	e05a      	b.n	800d5ce <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800d518:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d51c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f993 3000 	ldrsb.w	r3, [r3]
 800d526:	461a      	mov	r2, r3
 800d528:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800d52c:	4413      	add	r3, r2
 800d52e:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800d532:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d536:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d540:	4413      	add	r3, r2
 800d542:	f993 3000 	ldrsb.w	r3, [r3]
 800d546:	461a      	mov	r2, r3
 800d548:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800d54c:	4413      	add	r3, r2
 800d54e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800d552:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d556:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f993 3000 	ldrsb.w	r3, [r3]
 800d560:	461a      	mov	r2, r3
 800d562:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800d566:	4413      	add	r3, r2
 800d568:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 800d56c:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800d570:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800d574:	fb03 f202 	mul.w	r2, r3, r2
 800d578:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d57c:	4413      	add	r3, r2
 800d57e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 800d582:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800d586:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800d58a:	fb03 f202 	mul.w	r2, r3, r2
 800d58e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d592:	4413      	add	r3, r2
 800d594:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 800d598:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d59c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	1c5a      	adds	r2, r3, #1
 800d5a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5a8:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800d5ac:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800d5ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5b2:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	1c5a      	adds	r2, r3, #1
 800d5ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5be:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800d5c2:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d5c4:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800d5ce:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800d5d2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	db9e      	blt.n	800d518 <arm_nn_vec_mat_mult_t_s8+0x14f4>
 800d5da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5de:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800d5e2:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800d5e6:	6013      	str	r3, [r2, #0]
 800d5e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5ec:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 800d5f0:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800d5f4:	6013      	str	r3, [r2, #0]
 800d5f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d5fa:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800d5fe:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800d602:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d604:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d608:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800d612:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d616:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	fa03 f202 	lsl.w	r2, r3, r2
 800d620:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d624:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800d628:	601a      	str	r2, [r3, #0]
 800d62a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d62e:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800d632:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d636:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d63e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d642:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800d646:	2300      	movs	r3, #0
 800d648:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800d64a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d64e:	461a      	mov	r2, r3
 800d650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d654:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800d656:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d65a:	461a      	mov	r2, r3
 800d65c:	2300      	movs	r3, #0
 800d65e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800d660:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d664:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d668:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d66c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	17da      	asrs	r2, r3, #31
 800d674:	633b      	str	r3, [r7, #48]	; 0x30
 800d676:	637a      	str	r2, [r7, #52]	; 0x34
 800d678:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d67c:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	17da      	asrs	r2, r3, #31
 800d684:	62bb      	str	r3, [r7, #40]	; 0x28
 800d686:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d68c:	fb02 f203 	mul.w	r2, r2, r3
 800d690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d692:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d694:	fb04 f303 	mul.w	r3, r4, r3
 800d698:	4413      	add	r3, r2
 800d69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d69c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800d69e:	fba2 5604 	umull	r5, r6, r2, r4
 800d6a2:	4433      	add	r3, r6
 800d6a4:	461e      	mov	r6, r3
 800d6a6:	1943      	adds	r3, r0, r5
 800d6a8:	61bb      	str	r3, [r7, #24]
 800d6aa:	eb41 0306 	adc.w	r3, r1, r6
 800d6ae:	61fb      	str	r3, [r7, #28]
 800d6b0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d6b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d6b8:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800d6bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	f04f 0000 	mov.w	r0, #0
 800d6c8:	f04f 0100 	mov.w	r1, #0
 800d6cc:	0fd0      	lsrs	r0, r2, #31
 800d6ce:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d6d2:	17d9      	asrs	r1, r3, #31
 800d6d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6d8:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800d6dc:	4603      	mov	r3, r0
 800d6de:	6013      	str	r3, [r2, #0]
    return result;
 800d6e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6e4:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800d6e8:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d6ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6ee:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	dc06      	bgt.n	800d706 <arm_nn_vec_mat_mult_t_s8+0x16e2>
 800d6f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d6fc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	425a      	negs	r2, r3
 800d704:	e000      	b.n	800d708 <arm_nn_vec_mat_mult_t_s8+0x16e4>
 800d706:	2200      	movs	r2, #0
 800d708:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d70c:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800d710:	6019      	str	r1, [r3, #0]
 800d712:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d716:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800d71a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800d71c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d720:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800d724:	2300      	movs	r3, #0
 800d726:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d728:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d72c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800d730:	2201      	movs	r2, #1
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	fa02 f103 	lsl.w	r1, r2, r3
 800d738:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d73c:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 800d740:	1e4b      	subs	r3, r1, #1
 800d742:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800d744:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d748:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 800d74c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d750:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800d754:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d758:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800d75c:	6812      	ldr	r2, [r2, #0]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4013      	ands	r3, r2
 800d762:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800d764:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d768:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 800d76c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d770:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800d774:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d778:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800d77c:	6812      	ldr	r2, [r2, #0]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	fa42 f303 	asr.w	r3, r2, r3
 800d784:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800d786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d78a:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800d78e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d792:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	105b      	asrs	r3, r3, #1
 800d79a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800d79c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7a0:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	da0a      	bge.n	800d7c0 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 800d7aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7ae:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800d7b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7b6:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800d7c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7c4:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 800d7c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7cc:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800d7d0:	6812      	ldr	r2, [r2, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	dd0a      	ble.n	800d7ee <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 800d7d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7dc:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800d7e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7e4:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	6013      	str	r3, [r2, #0]
    return result;
 800d7ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d7f2:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800d7f6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d7f8:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800d7fa:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800d7fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d802:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 800d806:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d810:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800d814:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800d818:	6013      	str	r3, [r2, #0]
 800d81a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d81e:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800d822:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d82c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800d836:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d83a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	fa03 f202 	lsl.w	r2, r3, r2
 800d844:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d848:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d852:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800d856:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d85a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d862:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d866:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800d86a:	2300      	movs	r3, #0
 800d86c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800d86e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d872:	461a      	mov	r2, r3
 800d874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d878:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800d87c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d880:	461a      	mov	r2, r3
 800d882:	2300      	movs	r3, #0
 800d884:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800d888:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d88c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d890:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d894:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	17da      	asrs	r2, r3, #31
 800d89c:	643b      	str	r3, [r7, #64]	; 0x40
 800d89e:	647a      	str	r2, [r7, #68]	; 0x44
 800d8a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d8a4:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	17da      	asrs	r2, r3, #31
 800d8ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d8b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8b4:	fb02 f203 	mul.w	r2, r2, r3
 800d8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ba:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d8bc:	fb04 f303 	mul.w	r3, r4, r3
 800d8c0:	4413      	add	r3, r2
 800d8c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8c4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d8c6:	fba2 ab04 	umull	sl, fp, r2, r4
 800d8ca:	445b      	add	r3, fp
 800d8cc:	469b      	mov	fp, r3
 800d8ce:	eb10 030a 	adds.w	r3, r0, sl
 800d8d2:	623b      	str	r3, [r7, #32]
 800d8d4:	eb41 030b 	adc.w	r3, r1, fp
 800d8d8:	627b      	str	r3, [r7, #36]	; 0x24
 800d8da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d8de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d8e2:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800d8e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d8ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8ee:	f04f 0000 	mov.w	r0, #0
 800d8f2:	f04f 0100 	mov.w	r1, #0
 800d8f6:	0fd0      	lsrs	r0, r2, #31
 800d8f8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d8fc:	17d9      	asrs	r1, r3, #31
 800d8fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d902:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800d906:	4603      	mov	r3, r0
 800d908:	6013      	str	r3, [r2, #0]
    return result;
 800d90a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d90e:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800d912:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d914:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d918:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	dc06      	bgt.n	800d930 <arm_nn_vec_mat_mult_t_s8+0x190c>
 800d922:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d926:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	425a      	negs	r2, r3
 800d92e:	e000      	b.n	800d932 <arm_nn_vec_mat_mult_t_s8+0x190e>
 800d930:	2200      	movs	r2, #0
 800d932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d936:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800d93a:	6019      	str	r1, [r3, #0]
 800d93c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d940:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800d944:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800d946:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d94a:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800d94e:	2300      	movs	r3, #0
 800d950:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d952:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d956:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800d95a:	2201      	movs	r2, #1
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	fa02 f103 	lsl.w	r1, r2, r3
 800d962:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d966:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 800d96a:	1e4b      	subs	r3, r1, #1
 800d96c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800d96e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d972:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 800d976:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d97a:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800d97e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d982:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800d986:	6812      	ldr	r2, [r2, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4013      	ands	r3, r2
 800d98c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800d98e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d992:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 800d996:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d99a:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800d99e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9a2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800d9a6:	6812      	ldr	r2, [r2, #0]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	fa42 f303 	asr.w	r3, r2, r3
 800d9ae:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800d9b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9b4:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800d9b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9bc:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	105b      	asrs	r3, r3, #1
 800d9c4:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800d9c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9ca:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	da0a      	bge.n	800d9ea <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 800d9d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9d8:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800d9dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9e0:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800d9ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9ee:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 800d9f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d9f6:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800d9fa:	6812      	ldr	r2, [r2, #0]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	dd0a      	ble.n	800da18 <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 800da02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da06:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800da0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da0e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	3301      	adds	r3, #1
 800da16:	6013      	str	r3, [r2, #0]
    return result;
 800da18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da1c:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800da20:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800da22:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 800da24:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 800da28:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800da2c:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800da30:	4413      	add	r3, r2
 800da32:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 800da36:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800da3a:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800da3e:	4413      	add	r3, r2
 800da40:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800da44:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800da48:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800da4c:	4293      	cmp	r3, r2
 800da4e:	bfb8      	it	lt
 800da50:	4613      	movlt	r3, r2
 800da52:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 800da56:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800da5a:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800da5e:	4293      	cmp	r3, r2
 800da60:	bfa8      	it	ge
 800da62:	4613      	movge	r3, r2
 800da64:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 800da68:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800da6c:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800da70:	4293      	cmp	r3, r2
 800da72:	bfb8      	it	lt
 800da74:	4613      	movlt	r3, r2
 800da76:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 800da7a:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800da7e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800da82:	4293      	cmp	r3, r2
 800da84:	bfa8      	it	ge
 800da86:	4613      	movge	r3, r2
 800da88:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 800da8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da90:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800da94:	6819      	ldr	r1, [r3, #0]
 800da96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800da9a:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800da9e:	1c4b      	adds	r3, r1, #1
 800daa0:	6013      	str	r3, [r2, #0]
 800daa2:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800daa6:	b25b      	sxtb	r3, r3
 800daa8:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 800daaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800daae:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800dab2:	6819      	ldr	r1, [r3, #0]
 800dab4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dab8:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800dabc:	1c4b      	adds	r3, r1, #1
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800dac4:	b25b      	sxtb	r3, r3
 800dac6:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 800dac8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	4619      	mov	r1, r3
 800dad0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dad4:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 800dad8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dadc:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	440b      	add	r3, r1
 800dae4:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800dae6:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800daea:	3302      	adds	r3, #2
 800daec:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800daf0:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800daf4:	1e5a      	subs	r2, r3, #1
 800daf6:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800dafa:	4293      	cmp	r3, r2
 800dafc:	f6fe aae5 	blt.w	800c0ca <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 800db00:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800db04:	f003 0301 	and.w	r3, r3, #1
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f001 806e 	beq.w	800ebea <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800db0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db12:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800db16:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db1a:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800db1e:	6812      	ldr	r2, [r2, #0]
 800db20:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800db22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db26:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800db2a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db2e:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800db32:	6812      	ldr	r2, [r2, #0]
 800db34:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800db36:	2300      	movs	r3, #0
 800db38:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 800db3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db40:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00d      	beq.n	800db66 <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 800db4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db4e:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800db58:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 800db5c:	1d19      	adds	r1, r3, #4
 800db5e:	6011      	str	r1, [r2, #0]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800db6c:	f000 beb5 	b.w	800e8da <arm_nn_vec_mat_mult_t_s8+0x28b6>
 800db70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db74:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800db78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800db7c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800db7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db82:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	461a      	mov	r2, r3
 800db8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db92:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800db96:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800db98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800db9c:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	1d1a      	adds	r2, r3, #4
 800dba6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbaa:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	601a      	str	r2, [r3, #0]
    return (val);
 800dbb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbb6:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800dbba:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800dbbc:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800dbc0:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800dbc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbc8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800dbcc:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800dbd0:	6019      	str	r1, [r3, #0]
 800dbd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbd6:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800dbda:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dbdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbe0:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dbea:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 800dbee:	6812      	ldr	r2, [r2, #0]
 800dbf0:	fa23 f282 	sxtab16	r2, r3, r2
 800dbf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dbf8:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800dbfc:	601a      	str	r2, [r3, #0]
  return(result);
 800dbfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc02:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800dc0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc10:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc14:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800dc18:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800dc1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc1e:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc2e:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800dc32:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800dc34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc38:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	1d1a      	adds	r2, r3, #4
 800dc42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc46:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	601a      	str	r2, [r3, #0]
    return (val);
 800dc4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc52:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800dc56:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800dc58:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800dc5c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800dc60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc64:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800dc68:	601a      	str	r2, [r3, #0]
 800dc6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc6e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc72:	2208      	movs	r2, #8
 800dc74:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800dc76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc7a:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc7e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dc82:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800dc86:	6812      	ldr	r2, [r2, #0]
 800dc88:	f002 021f 	and.w	r2, r2, #31
 800dc8c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dc8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dc92:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d105      	bne.n	800dca8 <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 800dc9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dca0:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	e00b      	b.n	800dcc0 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dca8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcac:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 800dcb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcb4:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800dcb8:	6812      	ldr	r2, [r2, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	fa62 f303 	ror.w	r3, r2, r3
 800dcc0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dcc4:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 800dcc8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800dccc:	6011      	str	r1, [r2, #0]
 800dcce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dcd2:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800dcd6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dcd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcdc:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dce6:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800dcea:	6812      	ldr	r2, [r2, #0]
 800dcec:	fa23 f282 	sxtab16	r2, r3, r2
 800dcf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcf4:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800dcf8:	601a      	str	r2, [r3, #0]
  return(result);
 800dcfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dcfe:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800dd08:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800dd0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd10:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800dd14:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800dd18:	6019      	str	r1, [r3, #0]
 800dd1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd1e:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800dd22:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800dd24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd28:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dd32:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800dd36:	6812      	ldr	r2, [r2, #0]
 800dd38:	fa23 f282 	sxtab16	r2, r3, r2
 800dd3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd40:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800dd44:	601a      	str	r2, [r3, #0]
  return(result);
 800dd46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd4a:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800dd54:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800dd58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd5c:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd66:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd6a:	2208      	movs	r2, #8
 800dd6c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800dd6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd72:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd76:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dd7a:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 800dd7e:	6812      	ldr	r2, [r2, #0]
 800dd80:	f002 021f 	and.w	r2, r2, #31
 800dd84:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dd86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd8a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d105      	bne.n	800dda0 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 800dd94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dd98:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	e00b      	b.n	800ddb8 <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 800dda0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dda4:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 800dda8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddac:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800ddb0:	6812      	ldr	r2, [r2, #0]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	fa62 f303 	ror.w	r3, r2, r3
 800ddb8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ddbc:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 800ddc0:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800ddc4:	6011      	str	r1, [r2, #0]
 800ddc6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ddca:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800ddce:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ddd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddd4:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ddde:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800dde2:	6812      	ldr	r2, [r2, #0]
 800dde4:	fa23 f282 	sxtab16	r2, r3, r2
 800dde8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddec:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800ddf0:	601a      	str	r2, [r3, #0]
  return(result);
 800ddf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ddf6:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800de00:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800de04:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800de08:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800de0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de10:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800de14:	6018      	str	r0, [r3, #0]
 800de16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de1a:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800de1e:	6019      	str	r1, [r3, #0]
 800de20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de24:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800de28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800de2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de2e:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800de38:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 800de3c:	6812      	ldr	r2, [r2, #0]
 800de3e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800de42:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 800de46:	6809      	ldr	r1, [r1, #0]
 800de48:	fb23 1202 	smlad	r2, r3, r2, r1
 800de4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de50:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800de54:	601a      	str	r2, [r3, #0]
  return(result);
 800de56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de5a:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800de64:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800de68:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800de6c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800de70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de74:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800de78:	6018      	str	r0, [r3, #0]
 800de7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de7e:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800de82:	6019      	str	r1, [r3, #0]
 800de84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de88:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800de8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800de8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800de92:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800de9c:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 800dea0:	6812      	ldr	r2, [r2, #0]
 800dea2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800dea6:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 800deaa:	6809      	ldr	r1, [r1, #0]
 800deac:	fb23 1202 	smlad	r2, r3, r2, r1
 800deb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800deb4:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800deb8:	601a      	str	r2, [r3, #0]
  return(result);
 800deba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800debe:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800dec8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800decc:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800ded0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800ded4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800ded6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800deda:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	461a      	mov	r2, r3
 800dee6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800deea:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800deee:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800def0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800def4:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	1d1a      	adds	r2, r3, #4
 800defe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df02:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	601a      	str	r2, [r3, #0]
    return (val);
 800df0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df0e:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800df12:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800df14:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800df18:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800df1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df20:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800df24:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800df28:	6019      	str	r1, [r3, #0]
 800df2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df2e:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800df32:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800df34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df38:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800df42:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800df46:	6812      	ldr	r2, [r2, #0]
 800df48:	fa23 f282 	sxtab16	r2, r3, r2
 800df4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df50:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800df54:	601a      	str	r2, [r3, #0]
  return(result);
 800df56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df5a:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800df64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df68:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df6c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800df70:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800df72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df76:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	461a      	mov	r2, r3
 800df82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df86:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800df8a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800df8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df90:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	1d1a      	adds	r2, r3, #4
 800df9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800df9e:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	601a      	str	r2, [r3, #0]
    return (val);
 800dfa6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfaa:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800dfae:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800dfb0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800dfb4:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800dfb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfbc:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfc6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800dfca:	2208      	movs	r2, #8
 800dfcc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800dfce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfd2:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800dfd6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800dfda:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 800dfde:	6812      	ldr	r2, [r2, #0]
 800dfe0:	f002 021f 	and.w	r2, r2, #31
 800dfe4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800dfe6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dfea:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d105      	bne.n	800e000 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 800dff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800dff8:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	e00b      	b.n	800e018 <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e000:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e004:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 800e008:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e00c:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800e010:	6812      	ldr	r2, [r2, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	fa62 f303 	ror.w	r3, r2, r3
 800e018:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e01c:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 800e020:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e024:	6011      	str	r1, [r2, #0]
 800e026:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e02a:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800e02e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e030:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e034:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e03e:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800e042:	6812      	ldr	r2, [r2, #0]
 800e044:	fa23 f282 	sxtab16	r2, r3, r2
 800e048:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e04c:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800e050:	601a      	str	r2, [r3, #0]
  return(result);
 800e052:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e056:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e060:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e064:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e068:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800e06c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e070:	6019      	str	r1, [r3, #0]
 800e072:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e076:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800e07a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e07c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e080:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e08a:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 800e08e:	6812      	ldr	r2, [r2, #0]
 800e090:	fa23 f282 	sxtab16	r2, r3, r2
 800e094:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e098:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800e09c:	601a      	str	r2, [r3, #0]
  return(result);
 800e09e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0a2:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e0ac:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e0b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0b4:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0be:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e0c2:	2208      	movs	r2, #8
 800e0c4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e0c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0ca:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e0ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e0d2:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 800e0d6:	6812      	ldr	r2, [r2, #0]
 800e0d8:	f002 021f 	and.w	r2, r2, #31
 800e0dc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e0de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0e2:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d105      	bne.n	800e0f8 <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 800e0ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0f0:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	e00b      	b.n	800e110 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e0f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e0fc:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800e100:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e104:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800e108:	6812      	ldr	r2, [r2, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	fa62 f303 	ror.w	r3, r2, r3
 800e110:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e114:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800e118:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e11c:	6011      	str	r1, [r2, #0]
 800e11e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e122:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800e126:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e128:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e12c:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e136:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800e13a:	6812      	ldr	r2, [r2, #0]
 800e13c:	fa23 f282 	sxtab16	r2, r3, r2
 800e140:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e144:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800e148:	601a      	str	r2, [r3, #0]
  return(result);
 800e14a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e14e:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e158:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e15c:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e160:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e164:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e168:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800e16c:	6018      	str	r0, [r3, #0]
 800e16e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e172:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800e176:	6019      	str	r1, [r3, #0]
 800e178:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e17c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800e180:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e182:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e186:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e190:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 800e194:	6812      	ldr	r2, [r2, #0]
 800e196:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e19a:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800e19e:	6809      	ldr	r1, [r1, #0]
 800e1a0:	fb23 1202 	smlad	r2, r3, r2, r1
 800e1a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1a8:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800e1ac:	601a      	str	r2, [r3, #0]
  return(result);
 800e1ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1b2:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e1bc:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e1c0:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e1c4:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e1c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1cc:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800e1d0:	6018      	str	r0, [r3, #0]
 800e1d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1d6:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800e1da:	6019      	str	r1, [r3, #0]
 800e1dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1e0:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800e1e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e1e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e1ea:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e1f4:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800e1f8:	6812      	ldr	r2, [r2, #0]
 800e1fa:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e1fe:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 800e202:	6809      	ldr	r1, [r1, #0]
 800e204:	fb23 1202 	smlad	r2, r3, r2, r1
 800e208:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e20c:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800e210:	601a      	str	r2, [r3, #0]
  return(result);
 800e212:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e216:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800e220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e224:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e228:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e22c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e22e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e232:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	461a      	mov	r2, r3
 800e23e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e242:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800e246:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e248:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e24c:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	1d1a      	adds	r2, r3, #4
 800e256:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e25a:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	601a      	str	r2, [r3, #0]
    return (val);
 800e262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e266:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800e26a:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800e26c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800e270:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e274:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e278:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800e27c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e280:	6019      	str	r1, [r3, #0]
 800e282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e286:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800e28a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e28c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e290:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e29a:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 800e29e:	6812      	ldr	r2, [r2, #0]
 800e2a0:	fa23 f282 	sxtab16	r2, r3, r2
 800e2a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2a8:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800e2ac:	601a      	str	r2, [r3, #0]
  return(result);
 800e2ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2b2:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800e2bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2c0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e2c4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800e2c8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e2ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2ce:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2de:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800e2e2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e2e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2e8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	1d1a      	adds	r2, r3, #4
 800e2f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e2f6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	601a      	str	r2, [r3, #0]
    return (val);
 800e2fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e302:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800e306:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800e308:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800e30c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e310:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e314:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800e318:	601a      	str	r2, [r3, #0]
 800e31a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e31e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e322:	2208      	movs	r2, #8
 800e324:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e326:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e32a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e32e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e332:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800e336:	6812      	ldr	r2, [r2, #0]
 800e338:	f002 021f 	and.w	r2, r2, #31
 800e33c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e33e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e342:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d105      	bne.n	800e358 <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 800e34c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e350:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	e00b      	b.n	800e370 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e358:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e35c:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800e360:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e364:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800e368:	6812      	ldr	r2, [r2, #0]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	fa62 f303 	ror.w	r3, r2, r3
 800e370:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e374:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 800e378:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e37c:	6011      	str	r1, [r2, #0]
 800e37e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e382:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800e386:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e388:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e38c:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e396:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800e39a:	6812      	ldr	r2, [r2, #0]
 800e39c:	fa23 f282 	sxtab16	r2, r3, r2
 800e3a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3a4:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800e3a8:	601a      	str	r2, [r3, #0]
  return(result);
 800e3aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3ae:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e3b8:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e3bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3c0:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800e3c4:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e3c8:	6019      	str	r1, [r3, #0]
 800e3ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3ce:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800e3d2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e3d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3d8:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e3e2:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 800e3e6:	6812      	ldr	r2, [r2, #0]
 800e3e8:	fa23 f282 	sxtab16	r2, r3, r2
 800e3ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3f0:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800e3f4:	601a      	str	r2, [r3, #0]
  return(result);
 800e3f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e3fa:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e404:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e408:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e40c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e410:	601a      	str	r2, [r3, #0]
 800e412:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e416:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e41a:	2208      	movs	r2, #8
 800e41c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e41e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e422:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e426:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e42a:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 800e42e:	6812      	ldr	r2, [r2, #0]
 800e430:	f002 021f 	and.w	r2, r2, #31
 800e434:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e43a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d105      	bne.n	800e450 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 800e444:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e448:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	e00b      	b.n	800e468 <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e450:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e454:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 800e458:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e45c:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800e460:	6812      	ldr	r2, [r2, #0]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	fa62 f303 	ror.w	r3, r2, r3
 800e468:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e46c:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 800e470:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e474:	6011      	str	r1, [r2, #0]
 800e476:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e47a:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800e47e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e480:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e484:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e48e:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800e492:	6812      	ldr	r2, [r2, #0]
 800e494:	fa23 f282 	sxtab16	r2, r3, r2
 800e498:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e49c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800e4a0:	601a      	str	r2, [r3, #0]
  return(result);
 800e4a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4a6:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e4b0:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e4b4:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e4b8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e4bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4c0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800e4c4:	6018      	str	r0, [r3, #0]
 800e4c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4ca:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800e4ce:	6019      	str	r1, [r3, #0]
 800e4d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4d4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800e4d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e4da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e4de:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e4e8:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 800e4ec:	6812      	ldr	r2, [r2, #0]
 800e4ee:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e4f2:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 800e4f6:	6809      	ldr	r1, [r1, #0]
 800e4f8:	fb23 1202 	smlad	r2, r3, r2, r1
 800e4fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e500:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800e504:	601a      	str	r2, [r3, #0]
  return(result);
 800e506:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e50a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e514:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e518:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e51c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e520:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e524:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800e528:	6018      	str	r0, [r3, #0]
 800e52a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e52e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800e532:	6019      	str	r1, [r3, #0]
 800e534:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e538:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e53c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e53e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e542:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e54c:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 800e550:	6812      	ldr	r2, [r2, #0]
 800e552:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e556:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800e55a:	6809      	ldr	r1, [r1, #0]
 800e55c:	fb23 1202 	smlad	r2, r3, r2, r1
 800e560:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e564:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800e568:	601a      	str	r2, [r3, #0]
  return(result);
 800e56a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e56e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800e578:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e57c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e580:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800e584:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e586:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e58a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	461a      	mov	r2, r3
 800e596:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e59a:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800e59e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e5a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5a4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	1d1a      	adds	r2, r3, #4
 800e5ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5b2:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	601a      	str	r2, [r3, #0]
    return (val);
 800e5ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5be:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800e5c2:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800e5c4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800e5c8:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e5cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5d0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e5d4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e5d8:	6019      	str	r1, [r3, #0]
 800e5da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5de:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800e5e2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e5e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e5e8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e5f2:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800e5f6:	6812      	ldr	r2, [r2, #0]
 800e5f8:	fa23 f282 	sxtab16	r2, r3, r2
 800e5fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e600:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800e604:	601a      	str	r2, [r3, #0]
  return(result);
 800e606:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e60a:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800e614:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e618:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e61c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800e620:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800e622:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e626:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	461a      	mov	r2, r3
 800e632:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e636:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800e63a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800e63c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e640:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	1d1a      	adds	r2, r3, #4
 800e64a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e64e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	601a      	str	r2, [r3, #0]
    return (val);
 800e656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e65a:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800e65e:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800e660:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800e664:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800e668:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e66c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e676:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e67a:	2208      	movs	r2, #8
 800e67c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e67e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e682:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e686:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e68a:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 800e68e:	6812      	ldr	r2, [r2, #0]
 800e690:	f002 021f 	and.w	r2, r2, #31
 800e694:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e696:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e69a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d105      	bne.n	800e6b0 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 800e6a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6a8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	e00b      	b.n	800e6c8 <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e6b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6b4:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 800e6b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6bc:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800e6c0:	6812      	ldr	r2, [r2, #0]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	fa62 f303 	ror.w	r3, r2, r3
 800e6c8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e6cc:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800e6d0:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800e6d4:	6011      	str	r1, [r2, #0]
 800e6d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e6da:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800e6de:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e6e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6e4:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e6ee:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800e6f2:	6812      	ldr	r2, [r2, #0]
 800e6f4:	fa23 f282 	sxtab16	r2, r3, r2
 800e6f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e6fc:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800e700:	601a      	str	r2, [r3, #0]
  return(result);
 800e702:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e706:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800e710:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e714:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e718:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800e71c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e720:	6019      	str	r1, [r3, #0]
 800e722:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e726:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800e72a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e72c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e730:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e73a:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 800e73e:	6812      	ldr	r2, [r2, #0]
 800e740:	fa23 f282 	sxtab16	r2, r3, r2
 800e744:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e748:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800e74c:	601a      	str	r2, [r3, #0]
  return(result);
 800e74e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e752:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800e75c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800e760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e764:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800e768:	601a      	str	r2, [r3, #0]
 800e76a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e76e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e772:	2208      	movs	r2, #8
 800e774:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800e776:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e77a:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e77e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e782:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 800e786:	6812      	ldr	r2, [r2, #0]
 800e788:	f002 021f 	and.w	r2, r2, #31
 800e78c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800e78e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e792:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d105      	bne.n	800e7a8 <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 800e79c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7a0:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	e00b      	b.n	800e7c0 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800e7a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7ac:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 800e7b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7b4:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800e7b8:	6812      	ldr	r2, [r2, #0]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	fa62 f303 	ror.w	r3, r2, r3
 800e7c0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e7c4:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 800e7c8:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800e7cc:	6011      	str	r1, [r2, #0]
 800e7ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e7d2:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800e7d6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800e7d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7dc:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e7e6:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800e7ea:	6812      	ldr	r2, [r2, #0]
 800e7ec:	fa23 f282 	sxtab16	r2, r3, r2
 800e7f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7f4:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800e7f8:	601a      	str	r2, [r3, #0]
  return(result);
 800e7fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e7fe:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800e808:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800e80c:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800e810:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e814:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e818:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e81c:	6018      	str	r0, [r3, #0]
 800e81e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e822:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800e826:	6019      	str	r1, [r3, #0]
 800e828:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e82c:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800e830:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e832:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e836:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e840:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 800e844:	6812      	ldr	r2, [r2, #0]
 800e846:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e84a:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 800e84e:	6809      	ldr	r1, [r1, #0]
 800e850:	fb23 1202 	smlad	r2, r3, r2, r1
 800e854:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e858:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800e85c:	601a      	str	r2, [r3, #0]
  return(result);
 800e85e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e862:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800e86c:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800e870:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800e874:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e878:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e87c:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800e880:	6018      	str	r0, [r3, #0]
 800e882:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e886:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800e88a:	6019      	str	r1, [r3, #0]
 800e88c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e890:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800e894:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e896:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e89a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e8a4:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 800e8a8:	6812      	ldr	r2, [r2, #0]
 800e8aa:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800e8ae:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 800e8b2:	6809      	ldr	r1, [r1, #0]
 800e8b4:	fb23 1202 	smlad	r2, r3, r2, r1
 800e8b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8bc:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800e8c0:	601a      	str	r2, [r3, #0]
  return(result);
 800e8c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8c6:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800e8d0:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800e8d4:	3310      	adds	r3, #16
 800e8d6:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800e8da:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800e8de:	3b0f      	subs	r3, #15
 800e8e0:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	f6ff a943 	blt.w	800db70 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800e8ea:	e03f      	b.n	800e96c <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800e8ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e8f0:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f993 3000 	ldrsb.w	r3, [r3]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800e900:	4413      	add	r3, r2
 800e902:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800e906:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e90a:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f993 3000 	ldrsb.w	r3, [r3]
 800e914:	461a      	mov	r2, r3
 800e916:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800e91a:	4413      	add	r3, r2
 800e91c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 800e920:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800e924:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 800e928:	fb02 f303 	mul.w	r3, r2, r3
 800e92c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e930:	4413      	add	r3, r2
 800e932:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 800e936:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e93a:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	1c5a      	adds	r2, r3, #1
 800e942:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e946:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800e94a:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800e94c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e950:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	1c5a      	adds	r2, r3, #1
 800e958:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e95c:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800e960:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800e962:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800e966:	3301      	adds	r3, #1
 800e968:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800e96c:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800e970:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800e974:	429a      	cmp	r2, r3
 800e976:	dbb9      	blt.n	800e8ec <arm_nn_vec_mat_mult_t_s8+0x28c8>
 800e978:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e97c:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 800e980:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800e984:	601a      	str	r2, [r3, #0]
 800e986:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e98a:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800e98e:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800e992:	601a      	str	r2, [r3, #0]
 800e994:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e998:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800e99c:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800e9a0:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e9a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9a6:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e9b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e9b4:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 800e9b8:	6812      	ldr	r2, [r2, #0]
 800e9ba:	409a      	lsls	r2, r3
 800e9bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9c0:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9ca:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800e9ce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800e9d2:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 800e9d6:	6812      	ldr	r2, [r2, #0]
 800e9d8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800e9da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800e9de:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800e9e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e9f0:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800e9f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ea00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea04:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea08:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ea0c:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 800ea10:	6809      	ldr	r1, [r1, #0]
 800ea12:	17c8      	asrs	r0, r1, #31
 800ea14:	6139      	str	r1, [r7, #16]
 800ea16:	6178      	str	r0, [r7, #20]
 800ea18:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ea1c:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 800ea20:	6809      	ldr	r1, [r1, #0]
 800ea22:	17c8      	asrs	r0, r1, #31
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800ea32:	4650      	mov	r0, sl
 800ea34:	fb00 f001 	mul.w	r0, r0, r1
 800ea38:	4659      	mov	r1, fp
 800ea3a:	462c      	mov	r4, r5
 800ea3c:	fb04 f101 	mul.w	r1, r4, r1
 800ea40:	4401      	add	r1, r0
 800ea42:	4628      	mov	r0, r5
 800ea44:	4654      	mov	r4, sl
 800ea46:	fba0 8904 	umull	r8, r9, r0, r4
 800ea4a:	4449      	add	r1, r9
 800ea4c:	4689      	mov	r9, r1
 800ea4e:	eb12 0108 	adds.w	r1, r2, r8
 800ea52:	6039      	str	r1, [r7, #0]
 800ea54:	eb43 0309 	adc.w	r3, r3, r9
 800ea58:	607b      	str	r3, [r7, #4]
 800ea5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ea62:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800ea66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ea6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ea6e:	f04f 0200 	mov.w	r2, #0
 800ea72:	f04f 0300 	mov.w	r3, #0
 800ea76:	0fc2      	lsrs	r2, r0, #31
 800ea78:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ea7c:	17cb      	asrs	r3, r1, #31
 800ea7e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ea82:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 800ea86:	4613      	mov	r3, r2
 800ea88:	600b      	str	r3, [r1, #0]
    return result;
 800ea8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea8e:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800ea92:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ea94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ea98:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	dc06      	bgt.n	800eab0 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 800eaa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaa6:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	425b      	negs	r3, r3
 800eaae:	e000      	b.n	800eab2 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 800eab0:	2300      	movs	r3, #0
 800eab2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eab6:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 800eaba:	6011      	str	r1, [r2, #0]
 800eabc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eac0:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800eac4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800eac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaca:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eace:	2200      	movs	r2, #0
 800ead0:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ead2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ead6:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800eada:	2201      	movs	r2, #1
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	409a      	lsls	r2, r3
 800eae0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eae4:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800eae8:	3a01      	subs	r2, #1
 800eaea:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800eaec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eaf0:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800eaf4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eaf8:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800eafc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb00:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800eb04:	6809      	ldr	r1, [r1, #0]
 800eb06:	6812      	ldr	r2, [r2, #0]
 800eb08:	400a      	ands	r2, r1
 800eb0a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800eb0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb10:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb14:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb18:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800eb1c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb20:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800eb24:	6809      	ldr	r1, [r1, #0]
 800eb26:	6812      	ldr	r2, [r2, #0]
 800eb28:	fa41 f202 	asr.w	r2, r1, r2
 800eb2c:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800eb2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb32:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800eb36:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb3a:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800eb3e:	6812      	ldr	r2, [r2, #0]
 800eb40:	1052      	asrs	r2, r2, #1
 800eb42:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800eb44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb48:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	da0a      	bge.n	800eb68 <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 800eb52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb56:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800eb5a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb5e:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 800eb62:	6812      	ldr	r2, [r2, #0]
 800eb64:	3201      	adds	r2, #1
 800eb66:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800eb68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb6c:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 800eb70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb74:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800eb78:	6812      	ldr	r2, [r2, #0]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	dd0a      	ble.n	800eb96 <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 800eb80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb84:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb88:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800eb8c:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 800eb90:	6812      	ldr	r2, [r2, #0]
 800eb92:	3201      	adds	r2, #1
 800eb94:	601a      	str	r2, [r3, #0]
    return result;
 800eb96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800eb9a:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800eb9e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800eba0:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800eba2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 800eba6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ebaa:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800ebae:	4413      	add	r3, r2
 800ebb0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800ebb4:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ebb8:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	bfb8      	it	lt
 800ebc0:	4613      	movlt	r3, r2
 800ebc2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 800ebc6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ebca:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	bfa8      	it	ge
 800ebd2:	4613      	movge	r3, r2
 800ebd4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 800ebd8:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800ebdc:	b25a      	sxtb	r2, r3
 800ebde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ebe2:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 800ebea:	2300      	movs	r3, #0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ebf8:	4770      	bx	lr
 800ebfa:	0000      	movs	r0, r0
 800ebfc:	0000      	movs	r0, r0
	...

0800ec00 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 800ec00:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ec04:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 800ec0e:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 800ec12:	6020      	str	r0, [r4, #0]
 800ec14:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 800ec18:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 800ec1c:	6001      	str	r1, [r0, #0]
 800ec1e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800ec22:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 800ec26:	600a      	str	r2, [r1, #0]
 800ec28:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 800ec2c:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800ec30:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 800ec32:	2201      	movs	r2, #1
 800ec34:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800ec38:	fa02 f303 	lsl.w	r3, r2, r3
 800ec3c:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800ec46:	2300      	movs	r3, #0
 800ec48:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 800ec4c:	f004 b863 	b.w	8012d16 <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 800ec50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec54:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 800ec60:	2301      	movs	r3, #1
 800ec62:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ec66:	e015      	b.n	800ec94 <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 800ec68:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800ec6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec70:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4413      	add	r3, r2
 800ec78:	f993 2000 	ldrsb.w	r2, [r3]
 800ec7c:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800ec80:	4293      	cmp	r3, r2
 800ec82:	bfb8      	it	lt
 800ec84:	4613      	movlt	r3, r2
 800ec86:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 800ec8a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800ec8e:	3301      	adds	r3, #1
 800ec90:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ec94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec98:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800ec9c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	dbe0      	blt.n	800ec68 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ecb8:	f001 ba24 	b.w	8010104 <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 800ecbc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800ecc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecc4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4413      	add	r3, r2
 800eccc:	f993 3000 	ldrsb.w	r3, [r3]
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 800ecdc:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800ece0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800ece4:	429a      	cmp	r2, r3
 800ece6:	f2c1 8208 	blt.w	80100fa <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800ecea:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800ecee:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 800ecf2:	fb03 f202 	mul.w	r2, r3, r2
 800ecf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecfa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ecfe:	601a      	str	r2, [r3, #0]
 800ed00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed04:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800ed08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed0c:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ed14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed18:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ed20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ed24:	f04f 0300 	mov.w	r3, #0
 800ed28:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800ed2c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ed30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed34:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	0fdb      	lsrs	r3, r3, #31
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed42:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	0fdb      	lsrs	r3, r3, #31
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	4053      	eors	r3, r2
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d012      	beq.n	800ed7a <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 800ed54:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5c:	2100      	movs	r1, #0
 800ed5e:	f1d2 0001 	rsbs	r0, r2, #1
 800ed62:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 800ed66:	eb61 0303 	sbc.w	r3, r1, r3
 800ed6a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800ed6e:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800ed72:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800ed76:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ed7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed7e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	17da      	asrs	r2, r3, #31
 800ed86:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800ed8a:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 800ed8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	17da      	asrs	r2, r3, #31
 800ed9a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800ed9e:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 800eda2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800eda6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800edaa:	460b      	mov	r3, r1
 800edac:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800edb0:	fb02 f203 	mul.w	r2, r2, r3
 800edb4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800edb8:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 800edbc:	e9c4 0100 	strd	r0, r1, [r4]
 800edc0:	4601      	mov	r1, r0
 800edc2:	fb01 f303 	mul.w	r3, r1, r3
 800edc6:	4413      	add	r3, r2
 800edc8:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800edcc:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 800edd0:	fba2 1201 	umull	r1, r2, r2, r1
 800edd4:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 800edd8:	460a      	mov	r2, r1
 800edda:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 800edde:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 800ede2:	4413      	add	r3, r2
 800ede4:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800ede8:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800edec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf0:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800edf4:	1851      	adds	r1, r2, r1
 800edf6:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800edfa:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800edfe:	414b      	adcs	r3, r1
 800ee00:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800ee04:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800ee08:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800ee0c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ee10:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	da0a      	bge.n	800ee32 <arm_softmax_s8+0x232>
 800ee1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee20:	1851      	adds	r1, r2, r1
 800ee22:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800ee26:	f143 0300 	adc.w	r3, r3, #0
 800ee2a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800ee2e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800ee32:	f04f 0000 	mov.w	r0, #0
 800ee36:	f04f 0100 	mov.w	r1, #0
 800ee3a:	0fd0      	lsrs	r0, r2, #31
 800ee3c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ee40:	17d9      	asrs	r1, r3, #31
 800ee42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee46:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ee4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee52:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800ee56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee5a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ee5e:	6812      	ldr	r2, [r2, #0]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d10e      	bne.n	800ee84 <arm_softmax_s8+0x284>
 800ee66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee6a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee74:	d106      	bne.n	800ee84 <arm_softmax_s8+0x284>
        result = Q31_MAX;
 800ee76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee7a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800ee7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee82:	6013      	str	r3, [r2, #0]
    return result;
 800ee84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee88:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 800ee92:	2300      	movs	r3, #0
 800ee94:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 800ee98:	2318      	movs	r3, #24
 800ee9a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800ee9e:	2201      	movs	r2, #1
 800eea0:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800eea4:	fa02 f303 	lsl.w	r3, r2, r3
 800eea8:	1e5a      	subs	r2, r3, #1
 800eeaa:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800eeae:	ea02 0103 	and.w	r1, r2, r3
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800eeb8:	fa02 f303 	lsl.w	r3, r2, r3
 800eebc:	1acb      	subs	r3, r1, r3
 800eebe:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 800eec2:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 800eec6:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800eed0:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 800eed4:	015b      	lsls	r3, r3, #5
 800eed6:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800eeda:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800eede:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800eee2:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800eee6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800eeea:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 800eef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eef8:	f04f 0300 	mov.w	r3, #0
 800eefc:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800ef00:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ef04:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800ef08:	0fdb      	lsrs	r3, r3, #31
 800ef0a:	b2da      	uxtb	r2, r3
 800ef0c:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800ef10:	0fdb      	lsrs	r3, r3, #31
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	4053      	eors	r3, r2
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d012      	beq.n	800ef42 <arm_softmax_s8+0x342>
        mult = 1 - mult;
 800ef1c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef24:	2100      	movs	r1, #0
 800ef26:	f1d2 0001 	rsbs	r0, r2, #1
 800ef2a:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 800ef2e:	eb61 0303 	sbc.w	r3, r1, r3
 800ef32:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800ef36:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800ef3a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800ef3e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ef42:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800ef46:	17da      	asrs	r2, r3, #31
 800ef48:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800ef4c:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 800ef50:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800ef54:	17da      	asrs	r2, r3, #31
 800ef56:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 800ef5a:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 800ef5e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800ef62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef66:	460b      	mov	r3, r1
 800ef68:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800ef6c:	fb02 f203 	mul.w	r2, r2, r3
 800ef70:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800ef74:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 800ef78:	e9c4 0100 	strd	r0, r1, [r4]
 800ef7c:	4601      	mov	r1, r0
 800ef7e:	fb01 f303 	mul.w	r3, r1, r3
 800ef82:	4413      	add	r3, r2
 800ef84:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800ef88:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 800ef8c:	fba2 8901 	umull	r8, r9, r2, r1
 800ef90:	444b      	add	r3, r9
 800ef92:	4699      	mov	r9, r3
 800ef94:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800ef98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9c:	eb12 0108 	adds.w	r1, r2, r8
 800efa0:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 800efa4:	eb43 0309 	adc.w	r3, r3, r9
 800efa8:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800efac:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800efb0:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800efb4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800efb8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800efbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	da0a      	bge.n	800efda <arm_softmax_s8+0x3da>
 800efc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efc8:	1851      	adds	r1, r2, r1
 800efca:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 800efce:	f143 0300 	adc.w	r3, r3, #0
 800efd2:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800efd6:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800efda:	f04f 0000 	mov.w	r0, #0
 800efde:	f04f 0100 	mov.w	r1, #0
 800efe2:	0fd0      	lsrs	r0, r2, #31
 800efe4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800efe8:	17d9      	asrs	r1, r3, #31
 800efea:	4602      	mov	r2, r0
 800efec:	460b      	mov	r3, r1
 800efee:	4613      	mov	r3, r2
 800eff0:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800eff4:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 800eff8:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800effc:	429a      	cmp	r2, r3
 800effe:	d108      	bne.n	800f012 <arm_softmax_s8+0x412>
 800f000:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800f004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f008:	d103      	bne.n	800f012 <arm_softmax_s8+0x412>
        result = Q31_MAX;
 800f00a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f00e:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 800f012:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 800f016:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800f01a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f01e:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 800f022:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f026:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 800f030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f034:	f04f 0300 	mov.w	r3, #0
 800f038:	f607 1128 	addw	r1, r7, #2344	; 0x928
 800f03c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f040:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800f044:	0fdb      	lsrs	r3, r3, #31
 800f046:	b2da      	uxtb	r2, r3
 800f048:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800f04c:	0fdb      	lsrs	r3, r3, #31
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	4053      	eors	r3, r2
 800f052:	b2db      	uxtb	r3, r3
 800f054:	2b00      	cmp	r3, #0
 800f056:	d012      	beq.n	800f07e <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 800f058:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f060:	2100      	movs	r1, #0
 800f062:	f1d2 0001 	rsbs	r0, r2, #1
 800f066:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 800f06a:	eb61 0303 	sbc.w	r3, r1, r3
 800f06e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800f072:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800f076:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800f07a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f07e:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800f082:	17da      	asrs	r2, r3, #31
 800f084:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800f088:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 800f08c:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800f090:	17da      	asrs	r2, r3, #31
 800f092:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 800f096:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 800f09a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800f09e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 800f0a8:	fb02 f203 	mul.w	r2, r2, r3
 800f0ac:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800f0b0:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 800f0b4:	e9c4 0100 	strd	r0, r1, [r4]
 800f0b8:	4601      	mov	r1, r0
 800f0ba:	fb01 f303 	mul.w	r3, r1, r3
 800f0be:	4413      	add	r3, r2
 800f0c0:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800f0c4:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800f0c8:	fba2 ab01 	umull	sl, fp, r2, r1
 800f0cc:	445b      	add	r3, fp
 800f0ce:	469b      	mov	fp, r3
 800f0d0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d8:	eb12 010a 	adds.w	r1, r2, sl
 800f0dc:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 800f0e0:	eb43 030b 	adc.w	r3, r3, fp
 800f0e4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800f0e8:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800f0ec:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800f0f0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f0f4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	da0a      	bge.n	800f116 <arm_softmax_s8+0x516>
 800f100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f104:	1851      	adds	r1, r2, r1
 800f106:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 800f10a:	f143 0300 	adc.w	r3, r3, #0
 800f10e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800f112:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800f116:	f04f 0000 	mov.w	r0, #0
 800f11a:	f04f 0100 	mov.w	r1, #0
 800f11e:	0fd0      	lsrs	r0, r2, #31
 800f120:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f124:	17d9      	asrs	r1, r3, #31
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	4613      	mov	r3, r2
 800f12c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f130:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 800f134:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800f138:	429a      	cmp	r2, r3
 800f13a:	d108      	bne.n	800f14e <arm_softmax_s8+0x54e>
 800f13c:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800f140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f144:	d103      	bne.n	800f14e <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 800f146:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f14a:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 800f14e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 800f152:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 800f156:	2300      	movs	r3, #0
 800f158:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f15c:	2304      	movs	r3, #4
 800f15e:	3b01      	subs	r3, #1
 800f160:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 800f164:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 800f168:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800f16c:	4013      	ands	r3, r2
 800f16e:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 800f172:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800f176:	109b      	asrs	r3, r3, #2
 800f178:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 800f17c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800f180:	105b      	asrs	r3, r3, #1
 800f182:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 800f186:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	da04      	bge.n	800f198 <arm_softmax_s8+0x598>
        threshold++;
 800f18e:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800f192:	3301      	adds	r3, #1
 800f194:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 800f198:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 800f19c:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	dd04      	ble.n	800f1ae <arm_softmax_s8+0x5ae>
        result++;
 800f1a4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 800f1ae:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 800f1b2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f1b6:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800f1ba:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800f1be:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 800f1c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f1cc:	f04f 0300 	mov.w	r3, #0
 800f1d0:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800f1d4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f1d8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800f1dc:	0fdb      	lsrs	r3, r3, #31
 800f1de:	b2da      	uxtb	r2, r3
 800f1e0:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800f1e4:	0fdb      	lsrs	r3, r3, #31
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	4053      	eors	r3, r2
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d012      	beq.n	800f216 <arm_softmax_s8+0x616>
        mult = 1 - mult;
 800f1f0:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	f1d2 0001 	rsbs	r0, r2, #1
 800f1fe:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 800f202:	eb61 0303 	sbc.w	r3, r1, r3
 800f206:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800f20a:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800f20e:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800f212:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 800f216:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800f21a:	17da      	asrs	r2, r3, #31
 800f21c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800f220:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 800f224:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800f228:	17da      	asrs	r2, r3, #31
 800f22a:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 800f22e:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 800f232:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800f236:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f23a:	460b      	mov	r3, r1
 800f23c:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 800f240:	fb02 f203 	mul.w	r2, r2, r3
 800f244:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800f248:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 800f24c:	e9cc 0100 	strd	r0, r1, [ip]
 800f250:	4601      	mov	r1, r0
 800f252:	fb01 f303 	mul.w	r3, r1, r3
 800f256:	4413      	add	r3, r2
 800f258:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 800f25c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 800f260:	fba2 5601 	umull	r5, r6, r2, r1
 800f264:	4433      	add	r3, r6
 800f266:	461e      	mov	r6, r3
 800f268:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f270:	1951      	adds	r1, r2, r5
 800f272:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 800f276:	4173      	adcs	r3, r6
 800f278:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800f27c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800f280:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800f284:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 800f288:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	2b00      	cmp	r3, #0
 800f292:	da0a      	bge.n	800f2aa <arm_softmax_s8+0x6aa>
 800f294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f298:	1851      	adds	r1, r2, r1
 800f29a:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 800f29e:	f143 0300 	adc.w	r3, r3, #0
 800f2a2:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800f2a6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800f2aa:	f04f 0000 	mov.w	r0, #0
 800f2ae:	f04f 0100 	mov.w	r1, #0
 800f2b2:	0fd0      	lsrs	r0, r2, #31
 800f2b4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f2b8:	17d9      	asrs	r1, r3, #31
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	460b      	mov	r3, r1
 800f2be:	4613      	mov	r3, r2
 800f2c0:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f2c4:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 800f2c8:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d108      	bne.n	800f2e2 <arm_softmax_s8+0x6e2>
 800f2d0:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800f2d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2d8:	d103      	bne.n	800f2e2 <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 800f2da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f2de:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 800f2e2:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f2e6:	4423      	add	r3, r4
 800f2e8:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 800f2f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f2f6:	f04f 0300 	mov.w	r3, #0
 800f2fa:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 800f2fe:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f302:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800f306:	0fdb      	lsrs	r3, r3, #31
 800f308:	b2da      	uxtb	r2, r3
 800f30a:	2300      	movs	r3, #0
 800f30c:	4053      	eors	r3, r2
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	2b00      	cmp	r3, #0
 800f312:	d012      	beq.n	800f33a <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 800f314:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31c:	2100      	movs	r1, #0
 800f31e:	f1d2 0001 	rsbs	r0, r2, #1
 800f322:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 800f326:	eb61 0303 	sbc.w	r3, r1, r3
 800f32a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800f32e:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800f332:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800f336:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f33a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800f33e:	17da      	asrs	r2, r3, #31
 800f340:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 800f344:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 800f348:	a3f0      	add	r3, pc, #960	; (adr r3, 800f70c <arm_softmax_s8+0xb0c>)
 800f34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34e:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 800f352:	fb02 f001 	mul.w	r0, r2, r1
 800f356:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 800f35a:	fb01 f103 	mul.w	r1, r1, r3
 800f35e:	4401      	add	r1, r0
 800f360:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 800f364:	fba0 2302 	umull	r2, r3, r0, r2
 800f368:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800f36c:	4613      	mov	r3, r2
 800f36e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 800f372:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800f376:	18cb      	adds	r3, r1, r3
 800f378:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800f37c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f384:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 800f388:	1851      	adds	r1, r2, r1
 800f38a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800f38e:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 800f392:	414b      	adcs	r3, r1
 800f394:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800f398:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800f39c:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800f3a0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f3a4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	da0a      	bge.n	800f3c6 <arm_softmax_s8+0x7c6>
 800f3b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3b4:	1851      	adds	r1, r2, r1
 800f3b6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800f3ba:	f143 0300 	adc.w	r3, r3, #0
 800f3be:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800f3c2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800f3c6:	f04f 0000 	mov.w	r0, #0
 800f3ca:	f04f 0100 	mov.w	r1, #0
 800f3ce:	0fd0      	lsrs	r0, r2, #31
 800f3d0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f3d4:	17d9      	asrs	r1, r3, #31
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	460b      	mov	r3, r1
 800f3da:	4613      	mov	r3, r2
 800f3dc:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f3e0:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 800f3e4:	4bc6      	ldr	r3, [pc, #792]	; (800f700 <arm_softmax_s8+0xb00>)
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d108      	bne.n	800f3fc <arm_softmax_s8+0x7fc>
 800f3ea:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800f3ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3f2:	d103      	bne.n	800f3fc <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 800f3f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f3f8:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 800f3fc:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f400:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800f404:	4413      	add	r3, r2
 800f406:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f410:	2302      	movs	r3, #2
 800f412:	3b01      	subs	r3, #1
 800f414:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 800f418:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 800f41c:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800f420:	4013      	ands	r3, r2
 800f422:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 800f426:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 800f42a:	105b      	asrs	r3, r3, #1
 800f42c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 800f430:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800f434:	105b      	asrs	r3, r3, #1
 800f436:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 800f43a:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800f43e:	2b00      	cmp	r3, #0
 800f440:	da04      	bge.n	800f44c <arm_softmax_s8+0x84c>
        threshold++;
 800f442:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800f446:	3301      	adds	r3, #1
 800f448:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 800f44c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 800f450:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800f454:	429a      	cmp	r2, r3
 800f456:	dd04      	ble.n	800f462 <arm_softmax_s8+0x862>
        result++;
 800f458:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800f45c:	3301      	adds	r3, #1
 800f45e:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 800f462:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800f466:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800f46a:	4413      	add	r3, r2
 800f46c:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 800f470:	2300      	movs	r3, #0
 800f472:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 800f476:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f47a:	f04f 0300 	mov.w	r3, #0
 800f47e:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800f482:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f486:	2200      	movs	r2, #0
 800f488:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800f48c:	0fdb      	lsrs	r3, r3, #31
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	4053      	eors	r3, r2
 800f492:	b2db      	uxtb	r3, r3
 800f494:	2b00      	cmp	r3, #0
 800f496:	d012      	beq.n	800f4be <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 800f498:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800f49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	f1d2 0001 	rsbs	r0, r2, #1
 800f4a6:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 800f4aa:	eb61 0303 	sbc.w	r3, r1, r3
 800f4ae:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800f4b2:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800f4b6:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800f4ba:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f4be:	a18c      	add	r1, pc, #560	; (adr r1, 800f6f0 <arm_softmax_s8+0xaf0>)
 800f4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4c4:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800f4c8:	17da      	asrs	r2, r3, #31
 800f4ca:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 800f4ce:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 800f4d2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800f4d6:	fb03 f201 	mul.w	r2, r3, r1
 800f4da:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800f4de:	fb00 f303 	mul.w	r3, r0, r3
 800f4e2:	4413      	add	r3, r2
 800f4e4:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800f4e8:	fba0 1202 	umull	r1, r2, r0, r2
 800f4ec:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 800f4f0:	460a      	mov	r2, r1
 800f4f2:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 800f4f6:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800f4fa:	4413      	add	r3, r2
 800f4fc:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800f500:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800f504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f508:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800f50c:	1851      	adds	r1, r2, r1
 800f50e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800f512:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 800f516:	414b      	adcs	r3, r1
 800f518:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800f51c:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800f520:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800f524:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f528:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800f52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f530:	2b00      	cmp	r3, #0
 800f532:	da0a      	bge.n	800f54a <arm_softmax_s8+0x94a>
 800f534:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f538:	1851      	adds	r1, r2, r1
 800f53a:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 800f53e:	f143 0300 	adc.w	r3, r3, #0
 800f542:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800f546:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800f54a:	f04f 0000 	mov.w	r0, #0
 800f54e:	f04f 0100 	mov.w	r1, #0
 800f552:	0fd0      	lsrs	r0, r2, #31
 800f554:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f558:	17d9      	asrs	r1, r3, #31
 800f55a:	4602      	mov	r2, r0
 800f55c:	460b      	mov	r3, r1
 800f55e:	4613      	mov	r3, r2
 800f560:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 800f564:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 800f568:	4b66      	ldr	r3, [pc, #408]	; (800f704 <arm_softmax_s8+0xb04>)
 800f56a:	4413      	add	r3, r2
 800f56c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 800f570:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f574:	1c53      	adds	r3, r2, #1
 800f576:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f57a:	2301      	movs	r3, #1
 800f57c:	fa03 f202 	lsl.w	r2, r3, r2
 800f580:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f584:	4013      	ands	r3, r2
 800f586:	2b00      	cmp	r3, #0
 800f588:	d002      	beq.n	800f590 <arm_softmax_s8+0x990>
 800f58a:	f04f 33ff 	mov.w	r3, #4294967295
 800f58e:	e000      	b.n	800f592 <arm_softmax_s8+0x992>
 800f590:	2300      	movs	r3, #0
 800f592:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f596:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f59a:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 800f5a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f5a8:	f04f 0300 	mov.w	r3, #0
 800f5ac:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800f5b0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f5b4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800f5b8:	0fdb      	lsrs	r3, r3, #31
 800f5ba:	b2da      	uxtb	r2, r3
 800f5bc:	2300      	movs	r3, #0
 800f5be:	4053      	eors	r3, r2
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d012      	beq.n	800f5ec <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 800f5c6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	f1d2 0001 	rsbs	r0, r2, #1
 800f5d4:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 800f5d8:	eb61 0303 	sbc.w	r3, r1, r3
 800f5dc:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800f5e0:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800f5e4:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800f5e8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f5ec:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800f5f0:	17da      	asrs	r2, r3, #31
 800f5f2:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800f5f6:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 800f5fa:	a33f      	add	r3, pc, #252	; (adr r3, 800f6f8 <arm_softmax_s8+0xaf8>)
 800f5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f600:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800f604:	fb02 f001 	mul.w	r0, r2, r1
 800f608:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 800f60c:	fb01 f103 	mul.w	r1, r1, r3
 800f610:	4401      	add	r1, r0
 800f612:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 800f616:	fba0 2302 	umull	r2, r3, r0, r2
 800f61a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800f61e:	4613      	mov	r3, r2
 800f620:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 800f624:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800f628:	18cb      	adds	r3, r1, r3
 800f62a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800f62e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f636:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800f63a:	1851      	adds	r1, r2, r1
 800f63c:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 800f640:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800f644:	414b      	adcs	r3, r1
 800f646:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800f64a:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800f64e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800f652:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f656:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	da0a      	bge.n	800f678 <arm_softmax_s8+0xa78>
 800f662:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f666:	1851      	adds	r1, r2, r1
 800f668:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 800f66c:	f143 0300 	adc.w	r3, r3, #0
 800f670:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800f674:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800f678:	f04f 0000 	mov.w	r0, #0
 800f67c:	f04f 0100 	mov.w	r1, #0
 800f680:	0fd0      	lsrs	r0, r2, #31
 800f682:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f686:	17d9      	asrs	r1, r3, #31
 800f688:	4602      	mov	r2, r0
 800f68a:	460b      	mov	r3, r1
 800f68c:	4613      	mov	r3, r2
 800f68e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f692:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800f696:	4b1c      	ldr	r3, [pc, #112]	; (800f708 <arm_softmax_s8+0xb08>)
 800f698:	429a      	cmp	r2, r3
 800f69a:	d108      	bne.n	800f6ae <arm_softmax_s8+0xaae>
 800f69c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800f6a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f6a4:	d103      	bne.n	800f6ae <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 800f6a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f6aa:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 800f6ae:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 800f6b2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f6b6:	ea02 0103 	and.w	r1, r2, r3
 800f6ba:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f6be:	43da      	mvns	r2, r3
 800f6c0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f6c4:	4013      	ands	r3, r2
 800f6c6:	404b      	eors	r3, r1
 800f6c8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 800f6cc:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f6d0:	1c53      	adds	r3, r2, #1
 800f6d2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	fa03 f202 	lsl.w	r2, r3, r2
 800f6dc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f6e0:	4013      	ands	r3, r2
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d016      	beq.n	800f714 <arm_softmax_s8+0xb14>
 800f6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ea:	e014      	b.n	800f716 <arm_softmax_s8+0xb16>
 800f6ec:	f3af 8000 	nop.w
 800f6f0:	70f5a894 	.word	0x70f5a894
 800f6f4:	00000000 	.word	0x00000000
 800f6f8:	63afbe7b 	.word	0x63afbe7b
 800f6fc:	00000000 	.word	0x00000000
 800f700:	2aaaaaab 	.word	0x2aaaaaab
 800f704:	70f5a894 	.word	0x70f5a894
 800f708:	63afbe7b 	.word	0x63afbe7b
 800f70c:	2aaaaaab 	.word	0x2aaaaaab
 800f710:	00000000 	.word	0x00000000
 800f714:	2300      	movs	r3, #0
 800f716:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f71a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f71e:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 800f722:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f726:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800f72a:	2300      	movs	r3, #0
 800f72c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f72e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f732:	f04f 0300 	mov.w	r3, #0
 800f736:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 800f73a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f73e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800f742:	0fdb      	lsrs	r3, r3, #31
 800f744:	b2da      	uxtb	r2, r3
 800f746:	2300      	movs	r3, #0
 800f748:	4053      	eors	r3, r2
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d012      	beq.n	800f776 <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 800f750:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f758:	2100      	movs	r1, #0
 800f75a:	f1d2 0001 	rsbs	r0, r2, #1
 800f75e:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 800f762:	eb61 0303 	sbc.w	r3, r1, r3
 800f766:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800f76a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800f76e:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800f772:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f776:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800f77a:	17da      	asrs	r2, r3, #31
 800f77c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800f780:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 800f784:	a3a8      	add	r3, pc, #672	; (adr r3, 800fa28 <arm_softmax_s8+0xe28>)
 800f786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78a:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 800f78e:	fb02 f001 	mul.w	r0, r2, r1
 800f792:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800f796:	fb01 f103 	mul.w	r1, r1, r3
 800f79a:	4401      	add	r1, r0
 800f79c:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 800f7a0:	fba0 2302 	umull	r2, r3, r0, r2
 800f7a4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800f7ae:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 800f7b2:	18cb      	adds	r3, r1, r3
 800f7b4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800f7b8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c0:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800f7c4:	1851      	adds	r1, r2, r1
 800f7c6:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 800f7ca:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800f7ce:	414b      	adcs	r3, r1
 800f7d0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800f7d4:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800f7d8:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800f7dc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f7e0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	da0a      	bge.n	800f802 <arm_softmax_s8+0xc02>
 800f7ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f7f0:	1851      	adds	r1, r2, r1
 800f7f2:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800f7f6:	f143 0300 	adc.w	r3, r3, #0
 800f7fa:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800f7fe:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800f802:	f04f 0000 	mov.w	r0, #0
 800f806:	f04f 0100 	mov.w	r1, #0
 800f80a:	0fd0      	lsrs	r0, r2, #31
 800f80c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f810:	17d9      	asrs	r1, r3, #31
 800f812:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f816:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800f81a:	4603      	mov	r3, r0
 800f81c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f81e:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 800f822:	4b7f      	ldr	r3, [pc, #508]	; (800fa20 <arm_softmax_s8+0xe20>)
 800f824:	429a      	cmp	r2, r3
 800f826:	d10b      	bne.n	800f840 <arm_softmax_s8+0xc40>
 800f828:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800f82c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f830:	d106      	bne.n	800f840 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 800f832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f836:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800f83a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f83e:	6013      	str	r3, [r2, #0]
    return result;
 800f840:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f844:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f848:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800f84a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f84e:	ea02 0103 	and.w	r1, r2, r3
 800f852:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f856:	43da      	mvns	r2, r3
 800f858:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f85c:	4013      	ands	r3, r2
 800f85e:	404b      	eors	r3, r1
 800f860:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 800f864:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f868:	1c53      	adds	r3, r2, #1
 800f86a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f86e:	2301      	movs	r3, #1
 800f870:	fa03 f202 	lsl.w	r2, r3, r2
 800f874:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800f878:	4013      	ands	r3, r2
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d002      	beq.n	800f884 <arm_softmax_s8+0xc84>
 800f87e:	f04f 33ff 	mov.w	r3, #4294967295
 800f882:	e000      	b.n	800f886 <arm_softmax_s8+0xc86>
 800f884:	2300      	movs	r3, #0
 800f886:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800f88a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f88e:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800f892:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f896:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f898:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f89c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f8a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f8a8:	f04f 0300 	mov.w	r3, #0
 800f8ac:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 800f8b0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f8b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	0fdb      	lsrs	r3, r3, #31
 800f8c0:	b2da      	uxtb	r2, r3
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	4053      	eors	r3, r2
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d012      	beq.n	800f8f2 <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 800f8cc:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	f1d2 0001 	rsbs	r0, r2, #1
 800f8da:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 800f8de:	eb61 0303 	sbc.w	r3, r1, r3
 800f8e2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800f8e6:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800f8ea:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800f8ee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f8f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	17da      	asrs	r2, r3, #31
 800f8fe:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800f902:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 800f906:	a344      	add	r3, pc, #272	; (adr r3, 800fa18 <arm_softmax_s8+0xe18>)
 800f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90c:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 800f910:	fb02 f001 	mul.w	r0, r2, r1
 800f914:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 800f918:	fb01 f103 	mul.w	r1, r1, r3
 800f91c:	4401      	add	r1, r0
 800f91e:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 800f922:	fba0 2302 	umull	r2, r3, r0, r2
 800f926:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800f92a:	4613      	mov	r3, r2
 800f92c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800f930:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800f934:	18cb      	adds	r3, r1, r3
 800f936:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800f93a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f942:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800f946:	1851      	adds	r1, r2, r1
 800f948:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 800f94c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800f950:	414b      	adcs	r3, r1
 800f952:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800f956:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800f95a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800f95e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f962:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	da0a      	bge.n	800f984 <arm_softmax_s8+0xd84>
 800f96e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f972:	1851      	adds	r1, r2, r1
 800f974:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800f978:	f143 0300 	adc.w	r3, r3, #0
 800f97c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800f980:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800f984:	f04f 0000 	mov.w	r0, #0
 800f988:	f04f 0100 	mov.w	r1, #0
 800f98c:	0fd0      	lsrs	r0, r2, #31
 800f98e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f992:	17d9      	asrs	r1, r3, #31
 800f994:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f998:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800f99c:	4603      	mov	r3, r0
 800f99e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f9a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	4b1e      	ldr	r3, [pc, #120]	; (800fa24 <arm_softmax_s8+0xe24>)
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d10e      	bne.n	800f9ce <arm_softmax_s8+0xdce>
 800f9b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9be:	d106      	bne.n	800f9ce <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 800f9c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9c4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800f9c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f9cc:	6013      	str	r3, [r2, #0]
    return result;
 800f9ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800f9d6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 800f9d8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f9dc:	ea02 0103 	and.w	r1, r2, r3
 800f9e0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800f9e4:	43da      	mvns	r2, r3
 800f9e6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800f9ea:	4013      	ands	r3, r2
 800f9ec:	404b      	eors	r3, r1
 800f9ee:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 800f9f2:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800f9f6:	1c53      	adds	r3, r2, #1
 800f9f8:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	fa03 f202 	lsl.w	r2, r3, r2
 800fa02:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800fa06:	4013      	ands	r3, r2
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d011      	beq.n	800fa30 <arm_softmax_s8+0xe30>
 800fa0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa10:	e00f      	b.n	800fa32 <arm_softmax_s8+0xe32>
 800fa12:	bf00      	nop
 800fa14:	f3af 8000 	nop.w
 800fa18:	2f16ac6c 	.word	0x2f16ac6c
 800fa1c:	00000000 	.word	0x00000000
 800fa20:	4da2cbf2 	.word	0x4da2cbf2
 800fa24:	2f16ac6c 	.word	0x2f16ac6c
 800fa28:	4da2cbf2 	.word	0x4da2cbf2
 800fa2c:	00000000 	.word	0x00000000
 800fa30:	2300      	movs	r3, #0
 800fa32:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800fa36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa3a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800fa3e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fa42:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fa44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa48:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fa50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fa54:	f04f 0300 	mov.w	r3, #0
 800fa58:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 800fa5c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fa60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	0fdb      	lsrs	r3, r3, #31
 800fa6c:	b2da      	uxtb	r2, r3
 800fa6e:	2300      	movs	r3, #0
 800fa70:	4053      	eors	r3, r2
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d012      	beq.n	800fa9e <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 800fa78:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800fa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa80:	2100      	movs	r1, #0
 800fa82:	f1d2 0001 	rsbs	r0, r2, #1
 800fa86:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 800fa8a:	eb61 0303 	sbc.w	r3, r1, r3
 800fa8e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800fa92:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800fa96:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800fa9a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fa9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faa2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	17da      	asrs	r2, r3, #31
 800faaa:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800faae:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 800fab2:	a3ab      	add	r3, pc, #684	; (adr r3, 800fd60 <arm_softmax_s8+0x1160>)
 800fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab8:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 800fabc:	fb02 f001 	mul.w	r0, r2, r1
 800fac0:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 800fac4:	fb01 f103 	mul.w	r1, r1, r3
 800fac8:	4401      	add	r1, r0
 800faca:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 800face:	fba0 2302 	umull	r2, r3, r0, r2
 800fad2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800fad6:	4613      	mov	r3, r2
 800fad8:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 800fadc:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800fae0:	18cb      	adds	r3, r1, r3
 800fae2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800fae6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800faea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faee:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 800faf2:	1851      	adds	r1, r2, r1
 800faf4:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 800faf8:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 800fafc:	414b      	adcs	r3, r1
 800fafe:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800fb02:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800fb06:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800fb0a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fb0e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	da0a      	bge.n	800fb30 <arm_softmax_s8+0xf30>
 800fb1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fb1e:	1851      	adds	r1, r2, r1
 800fb20:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 800fb24:	f143 0300 	adc.w	r3, r3, #0
 800fb28:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800fb2c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800fb30:	f04f 0000 	mov.w	r0, #0
 800fb34:	f04f 0100 	mov.w	r1, #0
 800fb38:	0fd0      	lsrs	r0, r2, #31
 800fb3a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fb3e:	17d9      	asrs	r1, r3, #31
 800fb40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb44:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800fb48:	4603      	mov	r3, r0
 800fb4a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fb4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	4b80      	ldr	r3, [pc, #512]	; (800fd58 <arm_softmax_s8+0x1158>)
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d10e      	bne.n	800fb7a <arm_softmax_s8+0xf7a>
 800fb5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb6a:	d106      	bne.n	800fb7a <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 800fb6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb70:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800fb74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fb78:	6013      	str	r3, [r2, #0]
    return result;
 800fb7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb7e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800fb82:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 800fb84:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fb88:	ea02 0103 	and.w	r1, r2, r3
 800fb8c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fb90:	43da      	mvns	r2, r3
 800fb92:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fb96:	4013      	ands	r3, r2
 800fb98:	404b      	eors	r3, r1
 800fb9a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 800fb9e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800fba2:	1c53      	adds	r3, r2, #1
 800fba4:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fba8:	2301      	movs	r3, #1
 800fbaa:	fa03 f202 	lsl.w	r2, r3, r2
 800fbae:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d002      	beq.n	800fbbe <arm_softmax_s8+0xfbe>
 800fbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbbc:	e000      	b.n	800fbc0 <arm_softmax_s8+0xfc0>
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800fbc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbc8:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800fbcc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fbd0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fbd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbd6:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800fbda:	2300      	movs	r3, #0
 800fbdc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fbde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fbe2:	f04f 0300 	mov.w	r3, #0
 800fbe6:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 800fbea:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fbee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	0fdb      	lsrs	r3, r3, #31
 800fbfa:	b2da      	uxtb	r2, r3
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	4053      	eors	r3, r2
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d012      	beq.n	800fc2c <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 800fc06:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800fc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0e:	2100      	movs	r1, #0
 800fc10:	f1d2 0001 	rsbs	r0, r2, #1
 800fc14:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 800fc18:	eb61 0303 	sbc.w	r3, r1, r3
 800fc1c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800fc20:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800fc24:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800fc28:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fc2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	17da      	asrs	r2, r3, #31
 800fc38:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800fc3c:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 800fc40:	a343      	add	r3, pc, #268	; (adr r3, 800fd50 <arm_softmax_s8+0x1150>)
 800fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc46:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 800fc4a:	fb02 f001 	mul.w	r0, r2, r1
 800fc4e:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 800fc52:	fb01 f103 	mul.w	r1, r1, r3
 800fc56:	4401      	add	r1, r0
 800fc58:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 800fc5c:	fba0 2302 	umull	r2, r3, r0, r2
 800fc60:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800fc64:	4613      	mov	r3, r2
 800fc66:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800fc6a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800fc6e:	18cb      	adds	r3, r1, r3
 800fc70:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800fc74:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800fc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800fc80:	1851      	adds	r1, r2, r1
 800fc82:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 800fc86:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800fc8a:	414b      	adcs	r3, r1
 800fc8c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800fc90:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800fc94:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800fc98:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fc9c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800fca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	da0a      	bge.n	800fcbe <arm_softmax_s8+0x10be>
 800fca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fcac:	1851      	adds	r1, r2, r1
 800fcae:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 800fcb2:	f143 0300 	adc.w	r3, r3, #0
 800fcb6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800fcba:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800fcbe:	f04f 0000 	mov.w	r0, #0
 800fcc2:	f04f 0100 	mov.w	r1, #0
 800fcc6:	0fd0      	lsrs	r0, r2, #31
 800fcc8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fccc:	17d9      	asrs	r1, r3, #31
 800fcce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcd2:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fcda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fce2:	681a      	ldr	r2, [r3, #0]
 800fce4:	4b1d      	ldr	r3, [pc, #116]	; (800fd5c <arm_softmax_s8+0x115c>)
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d10e      	bne.n	800fd08 <arm_softmax_s8+0x1108>
 800fcea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fcf8:	d106      	bne.n	800fd08 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 800fcfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcfe:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800fd02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fd06:	6013      	str	r3, [r2, #0]
    return result;
 800fd08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd10:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 800fd12:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fd16:	ea02 0103 	and.w	r1, r2, r3
 800fd1a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fd1e:	43da      	mvns	r2, r3
 800fd20:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fd24:	4013      	ands	r3, r2
 800fd26:	404b      	eors	r3, r1
 800fd28:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 800fd2c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800fd30:	1c53      	adds	r3, r2, #1
 800fd32:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fd36:	2301      	movs	r3, #1
 800fd38:	fa03 f202 	lsl.w	r2, r3, r2
 800fd3c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800fd40:	4013      	ands	r3, r2
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d010      	beq.n	800fd68 <arm_softmax_s8+0x1168>
 800fd46:	f04f 33ff 	mov.w	r3, #4294967295
 800fd4a:	e00e      	b.n	800fd6a <arm_softmax_s8+0x116a>
 800fd4c:	f3af 8000 	nop.w
 800fd50:	02582ab7 	.word	0x02582ab7
 800fd54:	00000000 	.word	0x00000000
 800fd58:	1152aaa4 	.word	0x1152aaa4
 800fd5c:	02582ab7 	.word	0x02582ab7
 800fd60:	1152aaa4 	.word	0x1152aaa4
 800fd64:	00000000 	.word	0x00000000
 800fd68:	2300      	movs	r3, #0
 800fd6a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800fd6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd72:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800fd76:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fd7a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fd7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd80:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800fd84:	2300      	movs	r3, #0
 800fd86:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fd88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fd8c:	f04f 0300 	mov.w	r3, #0
 800fd90:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 800fd94:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fd98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	0fdb      	lsrs	r3, r3, #31
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	2300      	movs	r3, #0
 800fda8:	4053      	eors	r3, r2
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d012      	beq.n	800fdd6 <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 800fdb0:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800fdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb8:	2100      	movs	r1, #0
 800fdba:	f1d2 0001 	rsbs	r0, r2, #1
 800fdbe:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 800fdc2:	eb61 0303 	sbc.w	r3, r1, r3
 800fdc6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800fdca:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800fdce:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800fdd2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fdd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdda:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	17da      	asrs	r2, r3, #31
 800fde2:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800fde6:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 800fdea:	4ad3      	ldr	r2, [pc, #844]	; (8010138 <arm_softmax_s8+0x1538>)
 800fdec:	f04f 0300 	mov.w	r3, #0
 800fdf0:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 800fdf4:	fb02 f001 	mul.w	r0, r2, r1
 800fdf8:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 800fdfc:	fb01 f103 	mul.w	r1, r1, r3
 800fe00:	4401      	add	r1, r0
 800fe02:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800fe06:	fba0 2302 	umull	r2, r3, r0, r2
 800fe0a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800fe0e:	4613      	mov	r3, r2
 800fe10:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 800fe14:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800fe18:	18cb      	adds	r3, r1, r3
 800fe1a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800fe1e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800fe22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe26:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 800fe2a:	1851      	adds	r1, r2, r1
 800fe2c:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800fe30:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 800fe34:	414b      	adcs	r3, r1
 800fe36:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800fe3a:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800fe3e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800fe42:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fe46:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800fe4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	da0a      	bge.n	800fe68 <arm_softmax_s8+0x1268>
 800fe52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe56:	1851      	adds	r1, r2, r1
 800fe58:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 800fe5c:	f143 0300 	adc.w	r3, r3, #0
 800fe60:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800fe64:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800fe68:	f04f 0000 	mov.w	r0, #0
 800fe6c:	f04f 0100 	mov.w	r1, #0
 800fe70:	0fd0      	lsrs	r0, r2, #31
 800fe72:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fe76:	17d9      	asrs	r1, r3, #31
 800fe78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe7c:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800fe80:	4603      	mov	r3, r0
 800fe82:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fe84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	4baa      	ldr	r3, [pc, #680]	; (8010138 <arm_softmax_s8+0x1538>)
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d10e      	bne.n	800feb2 <arm_softmax_s8+0x12b2>
 800fe94:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe98:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fea2:	d106      	bne.n	800feb2 <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 800fea4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fea8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800feac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800feb0:	6013      	str	r3, [r2, #0]
    return result;
 800feb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feb6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800feba:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 800febc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fec0:	ea02 0103 	and.w	r1, r2, r3
 800fec4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800fec8:	43da      	mvns	r2, r3
 800feca:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800fece:	4013      	ands	r3, r2
 800fed0:	404b      	eors	r3, r1
 800fed2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 800fed6:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800feda:	1c53      	adds	r3, r2, #1
 800fedc:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800fee0:	2301      	movs	r3, #1
 800fee2:	fa03 f202 	lsl.w	r2, r3, r2
 800fee6:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800feea:	4013      	ands	r3, r2
 800feec:	2b00      	cmp	r3, #0
 800feee:	d002      	beq.n	800fef6 <arm_softmax_s8+0x12f6>
 800fef0:	f04f 33ff 	mov.w	r3, #4294967295
 800fef4:	e000      	b.n	800fef8 <arm_softmax_s8+0x12f8>
 800fef6:	2300      	movs	r3, #0
 800fef8:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800fefc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff00:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800ff04:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800ff08:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ff0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff0e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800ff12:	2300      	movs	r3, #0
 800ff14:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ff16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ff1a:	f04f 0300 	mov.w	r3, #0
 800ff1e:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 800ff22:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ff26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff2a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	0fdb      	lsrs	r3, r3, #31
 800ff32:	b2da      	uxtb	r2, r3
 800ff34:	2300      	movs	r3, #0
 800ff36:	4053      	eors	r3, r2
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d012      	beq.n	800ff64 <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 800ff3e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff46:	2100      	movs	r1, #0
 800ff48:	f1d2 0001 	rsbs	r0, r2, #1
 800ff4c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 800ff50:	eb61 0303 	sbc.w	r3, r1, r3
 800ff54:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800ff58:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800ff5c:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800ff60:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ff64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	17da      	asrs	r2, r3, #31
 800ff70:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800ff74:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 800ff78:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 800ff7c:	f04f 0300 	mov.w	r3, #0
 800ff80:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 800ff84:	fb02 f001 	mul.w	r0, r2, r1
 800ff88:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 800ff8c:	fb01 f103 	mul.w	r1, r1, r3
 800ff90:	4401      	add	r1, r0
 800ff92:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 800ff96:	fba0 2302 	umull	r2, r3, r0, r2
 800ff9a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800ffa4:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800ffa8:	18cb      	adds	r3, r1, r3
 800ffaa:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800ffae:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ffb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb6:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 800ffba:	1851      	adds	r1, r2, r1
 800ffbc:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800ffc0:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 800ffc4:	414b      	adcs	r3, r1
 800ffc6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800ffca:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800ffce:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800ffd2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ffd6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	da0a      	bge.n	800fff8 <arm_softmax_s8+0x13f8>
 800ffe2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ffe6:	1851      	adds	r1, r2, r1
 800ffe8:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 800ffec:	f143 0300 	adc.w	r3, r3, #0
 800fff0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800fff4:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 800fff8:	f04f 0000 	mov.w	r0, #0
 800fffc:	f04f 0100 	mov.w	r1, #0
 8010000:	0fd0      	lsrs	r0, r2, #31
 8010002:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010006:	17d9      	asrs	r1, r3, #31
 8010008:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801000c:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8010010:	4603      	mov	r3, r0
 8010012:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010014:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010018:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2bf2      	cmp	r3, #242	; 0xf2
 8010020:	d10e      	bne.n	8010040 <arm_softmax_s8+0x1440>
 8010022:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010026:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010030:	d106      	bne.n	8010040 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 8010032:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010036:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 801003a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801003e:	6013      	str	r3, [r2, #0]
    return result;
 8010040:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010044:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8010048:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 801004a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801004e:	ea02 0103 	and.w	r1, r2, r3
 8010052:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010056:	43da      	mvns	r2, r3
 8010058:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801005c:	4013      	ands	r3, r2
 801005e:	404b      	eors	r3, r1
 8010060:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 8010064:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8010068:	2b00      	cmp	r3, #0
 801006a:	d102      	bne.n	8010072 <arm_softmax_s8+0x1472>
 801006c:	f04f 33ff 	mov.w	r3, #4294967295
 8010070:	e000      	b.n	8010074 <arm_softmax_s8+0x1474>
 8010072:	2300      	movs	r3, #0
 8010074:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8010078:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801007c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010080:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8010084:	43da      	mvns	r2, r3
 8010086:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801008a:	4013      	ands	r3, r2
 801008c:	404b      	eors	r3, r1
 801008e:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 8010092:	2300      	movs	r3, #0
 8010094:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 8010098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801009c:	3b01      	subs	r3, #1
 801009e:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 80100a2:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 80100a6:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80100aa:	4013      	ands	r3, r2
 80100ac:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 80100b0:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 80100b4:	131b      	asrs	r3, r3, #12
 80100b6:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 80100ba:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 80100be:	105b      	asrs	r3, r3, #1
 80100c0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 80100c4:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	da04      	bge.n	80100d6 <arm_softmax_s8+0x14d6>
        threshold++;
 80100cc:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80100d0:	3301      	adds	r3, #1
 80100d2:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 80100d6:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 80100da:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80100de:	429a      	cmp	r2, r3
 80100e0:	dd04      	ble.n	80100ec <arm_softmax_s8+0x14ec>
        result++;
 80100e2:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80100e6:	3301      	adds	r3, #1
 80100e8:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 80100ec:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 80100f0:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 80100f4:	4413      	add	r3, r2
 80100f6:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 80100fa:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80100fe:	3301      	adds	r3, #1
 8010100:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8010104:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010108:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801010c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	429a      	cmp	r2, r3
 8010114:	f6fe add2 	blt.w	800ecbc <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 8010118:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 801011c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010120:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010124:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 8010126:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801012a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d103      	bne.n	801013c <arm_softmax_s8+0x153c>
    return 32U;
 8010134:	2320      	movs	r3, #32
 8010136:	e009      	b.n	801014c <arm_softmax_s8+0x154c>
 8010138:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 801013c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010140:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	fab3 f383 	clz	r3, r3
 801014a:	b2db      	uxtb	r3, r3
 801014c:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8010150:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8010154:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8010158:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 801015c:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8010160:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8010164:	fa02 f303 	lsl.w	r3, r2, r3
 8010168:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 801016c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010170:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8010174:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8010176:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801017a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	17da      	asrs	r2, r3, #31
 8010182:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8010186:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 801018a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801018e:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8010192:	4602      	mov	r2, r0
 8010194:	18d3      	adds	r3, r2, r3
 8010196:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801019a:	460b      	mov	r3, r1
 801019c:	f143 0300 	adc.w	r3, r3, #0
 80101a0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80101a4:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 80101a8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80101ac:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 80101b0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80101b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	db04      	blt.n	80101c6 <arm_softmax_s8+0x15c6>
 80101bc:	f04f 0001 	mov.w	r0, #1
 80101c0:	f04f 0100 	mov.w	r1, #0
 80101c4:	e003      	b.n	80101ce <arm_softmax_s8+0x15ce>
 80101c6:	f04f 30ff 	mov.w	r0, #4294967295
 80101ca:	f04f 31ff 	mov.w	r1, #4294967295
 80101ce:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80101d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d6:	1884      	adds	r4, r0, r2
 80101d8:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 80101dc:	eb41 0303 	adc.w	r3, r1, r3
 80101e0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80101e4:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80101e8:	460b      	mov	r3, r1
 80101ea:	0fdb      	lsrs	r3, r3, #31
 80101ec:	2200      	movs	r2, #0
 80101ee:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 80101f2:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 80101f6:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80101fa:	4602      	mov	r2, r0
 80101fc:	189b      	adds	r3, r3, r2
 80101fe:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8010202:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8010206:	460a      	mov	r2, r1
 8010208:	4153      	adcs	r3, r2
 801020a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 801020e:	f04f 0200 	mov.w	r2, #0
 8010212:	f04f 0300 	mov.w	r3, #0
 8010216:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 801021a:	084a      	lsrs	r2, r1, #1
 801021c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8010220:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010224:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8010228:	104b      	asrs	r3, r1, #1
 801022a:	4610      	mov	r0, r2
 801022c:	4619      	mov	r1, r3
 801022e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010232:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8010236:	4603      	mov	r3, r0
 8010238:	6013      	str	r3, [r2, #0]
 801023a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801023e:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8010242:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010246:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801024e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010252:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8010256:	2300      	movs	r3, #0
 8010258:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801025a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801025e:	f04f 0300 	mov.w	r3, #0
 8010262:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8010266:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801026a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801026e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	0fdb      	lsrs	r3, r3, #31
 8010276:	b2da      	uxtb	r2, r3
 8010278:	2301      	movs	r3, #1
 801027a:	4053      	eors	r3, r2
 801027c:	b2db      	uxtb	r3, r3
 801027e:	2b00      	cmp	r3, #0
 8010280:	d012      	beq.n	80102a8 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 8010282:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8010286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028a:	2100      	movs	r1, #0
 801028c:	f1d2 0001 	rsbs	r0, r2, #1
 8010290:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8010294:	eb61 0303 	sbc.w	r3, r1, r3
 8010298:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801029c:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80102a0:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80102a4:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80102a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	17da      	asrs	r2, r3, #31
 80102b4:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 80102b8:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 80102bc:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 80102c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c4:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 80102c8:	fb02 f001 	mul.w	r0, r2, r1
 80102cc:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80102d0:	fb01 f103 	mul.w	r1, r1, r3
 80102d4:	4401      	add	r1, r0
 80102d6:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 80102da:	fba0 2302 	umull	r2, r3, r0, r2
 80102de:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80102e2:	4613      	mov	r3, r2
 80102e4:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 80102e8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80102ec:	18cb      	adds	r3, r1, r3
 80102ee:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80102f2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80102f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fa:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 80102fe:	1851      	adds	r1, r2, r1
 8010300:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8010304:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8010308:	414b      	adcs	r3, r1
 801030a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801030e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8010312:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8010316:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801031a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010322:	2b00      	cmp	r3, #0
 8010324:	da0a      	bge.n	801033c <arm_softmax_s8+0x173c>
 8010326:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801032a:	1851      	adds	r1, r2, r1
 801032c:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8010330:	f143 0300 	adc.w	r3, r3, #0
 8010334:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8010338:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 801033c:	f04f 0000 	mov.w	r0, #0
 8010340:	f04f 0100 	mov.w	r1, #0
 8010344:	0fd0      	lsrs	r0, r2, #31
 8010346:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801034a:	17d9      	asrs	r1, r3, #31
 801034c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010350:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8010354:	4603      	mov	r3, r0
 8010356:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010358:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801035c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8010366:	d10e      	bne.n	8010386 <arm_softmax_s8+0x1786>
 8010368:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801036c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010376:	d106      	bne.n	8010386 <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8010378:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801037c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8010380:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010384:	6013      	str	r3, [r2, #0]
    return result;
 8010386:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801038a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 801038e:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8010390:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010394:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8010398:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 801039c:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 801039e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103a2:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 80103a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80103aa:	6013      	str	r3, [r2, #0]
 80103ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103b0:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 80103b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	6013      	str	r3, [r2, #0]
 80103c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103c4:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 80103c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103cc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80103d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103d8:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 80103dc:	2300      	movs	r3, #0
 80103de:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80103e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80103e4:	f04f 0300 	mov.w	r3, #0
 80103e8:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 80103ec:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80103f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103f4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	0fdb      	lsrs	r3, r3, #31
 80103fc:	b2da      	uxtb	r2, r3
 80103fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010402:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	0fdb      	lsrs	r3, r3, #31
 801040a:	b2db      	uxtb	r3, r3
 801040c:	4053      	eors	r3, r2
 801040e:	b2db      	uxtb	r3, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d012      	beq.n	801043a <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 8010414:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8010418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041c:	2100      	movs	r1, #0
 801041e:	f1d2 0001 	rsbs	r0, r2, #1
 8010422:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8010426:	eb61 0303 	sbc.w	r3, r1, r3
 801042a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 801042e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8010432:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8010436:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801043a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801043e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	17da      	asrs	r2, r3, #31
 8010446:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 801044a:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 801044e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010452:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	17da      	asrs	r2, r3, #31
 801045a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 801045e:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8010462:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8010466:	e9d3 0100 	ldrd	r0, r1, [r3]
 801046a:	460b      	mov	r3, r1
 801046c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8010470:	fb02 f203 	mul.w	r2, r2, r3
 8010474:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8010478:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 801047c:	e9c4 0100 	strd	r0, r1, [r4]
 8010480:	4601      	mov	r1, r0
 8010482:	fb01 f303 	mul.w	r3, r1, r3
 8010486:	4413      	add	r3, r2
 8010488:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 801048c:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8010490:	fba2 1201 	umull	r1, r2, r2, r1
 8010494:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8010498:	460a      	mov	r2, r1
 801049a:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 801049e:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80104a2:	4413      	add	r3, r2
 80104a4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80104a8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80104ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80104b4:	1851      	adds	r1, r2, r1
 80104b6:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 80104ba:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 80104be:	414b      	adcs	r3, r1
 80104c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80104c4:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 80104c8:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80104cc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80104d0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80104d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	da0a      	bge.n	80104f2 <arm_softmax_s8+0x18f2>
 80104dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80104e0:	1851      	adds	r1, r2, r1
 80104e2:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80104e6:	f143 0300 	adc.w	r3, r3, #0
 80104ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80104ee:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80104f2:	f04f 0000 	mov.w	r0, #0
 80104f6:	f04f 0100 	mov.w	r1, #0
 80104fa:	0fd0      	lsrs	r0, r2, #31
 80104fc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010500:	17d9      	asrs	r1, r3, #31
 8010502:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010506:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801050a:	4603      	mov	r3, r0
 801050c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801050e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010512:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8010516:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801051a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801051e:	6812      	ldr	r2, [r2, #0]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	429a      	cmp	r2, r3
 8010524:	d10e      	bne.n	8010544 <arm_softmax_s8+0x1944>
 8010526:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801052a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010534:	d106      	bne.n	8010544 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 8010536:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801053a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 801053e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010542:	6013      	str	r3, [r2, #0]
    return result;
 8010544:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010548:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801054c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801054e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010552:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	1a99      	subs	r1, r3, r2
 801055a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801055e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8010562:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010566:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	6013      	str	r3, [r2, #0]
 801056e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010572:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8010576:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8010578:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801057c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8010580:	2300      	movs	r3, #0
 8010582:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010588:	f04f 0300 	mov.w	r3, #0
 801058c:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8010590:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010594:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010598:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	0fdb      	lsrs	r3, r3, #31
 80105a0:	b2da      	uxtb	r2, r3
 80105a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105a6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	0fdb      	lsrs	r3, r3, #31
 80105ae:	b2db      	uxtb	r3, r3
 80105b0:	4053      	eors	r3, r2
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d012      	beq.n	80105de <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 80105b8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80105bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c0:	2100      	movs	r1, #0
 80105c2:	f1d2 0001 	rsbs	r0, r2, #1
 80105c6:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 80105ca:	eb61 0303 	sbc.w	r3, r1, r3
 80105ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80105d2:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 80105d6:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 80105da:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80105de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105e2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	17da      	asrs	r2, r3, #31
 80105ea:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80105ee:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 80105f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80105f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	17da      	asrs	r2, r3, #31
 80105fe:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8010602:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 8010606:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 801060a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801060e:	460b      	mov	r3, r1
 8010610:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8010614:	fb02 f203 	mul.w	r2, r2, r3
 8010618:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 801061c:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8010620:	e9c4 0100 	strd	r0, r1, [r4]
 8010624:	4601      	mov	r1, r0
 8010626:	fb01 f303 	mul.w	r3, r1, r3
 801062a:	4413      	add	r3, r2
 801062c:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8010630:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8010634:	fba2 1201 	umull	r1, r2, r2, r1
 8010638:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 801063c:	460a      	mov	r2, r1
 801063e:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8010642:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8010646:	4413      	add	r3, r2
 8010648:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 801064c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8010650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010654:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8010658:	1851      	adds	r1, r2, r1
 801065a:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 801065e:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8010662:	414b      	adcs	r3, r1
 8010664:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010668:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 801066c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8010670:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010674:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8010678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067c:	2b00      	cmp	r3, #0
 801067e:	da0a      	bge.n	8010696 <arm_softmax_s8+0x1a96>
 8010680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010684:	1851      	adds	r1, r2, r1
 8010686:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 801068a:	f143 0300 	adc.w	r3, r3, #0
 801068e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8010692:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8010696:	f04f 0000 	mov.w	r0, #0
 801069a:	f04f 0100 	mov.w	r1, #0
 801069e:	0fd0      	lsrs	r0, r2, #31
 80106a0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80106a4:	17d9      	asrs	r1, r3, #31
 80106a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106aa:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80106ae:	4603      	mov	r3, r0
 80106b0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80106b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106b6:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 80106ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80106c2:	6812      	ldr	r2, [r2, #0]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d10e      	bne.n	80106e8 <arm_softmax_s8+0x1ae8>
 80106ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106ce:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80106d8:	d106      	bne.n	80106e8 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 80106da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106de:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80106e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80106e6:	6013      	str	r3, [r2, #0]
    return result;
 80106e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106ec:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80106fa:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80106fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8010700:	4619      	mov	r1, r3
 8010702:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010706:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 801070a:	1e4b      	subs	r3, r1, #1
 801070c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801070e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010712:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8010716:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801071a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010724:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010728:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 801072c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010730:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010734:	6812      	ldr	r2, [r2, #0]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	429a      	cmp	r2, r3
 801073a:	dd02      	ble.n	8010742 <arm_softmax_s8+0x1b42>
 801073c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010740:	e000      	b.n	8010744 <arm_softmax_s8+0x1b44>
 8010742:	2000      	movs	r0, #0
 8010744:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010748:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 801074c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010750:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010754:	6812      	ldr	r2, [r2, #0]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	429a      	cmp	r2, r3
 801075a:	dd01      	ble.n	8010760 <arm_softmax_s8+0x1b60>
 801075c:	2200      	movs	r2, #0
 801075e:	e001      	b.n	8010764 <arm_softmax_s8+0x1b64>
 8010760:	f04f 32ff 	mov.w	r2, #4294967295
 8010764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010768:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	ea02 0103 	and.w	r1, r2, r3
 8010772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010776:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 801077a:	ea81 0300 	eor.w	r3, r1, r0
 801077e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010780:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010784:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	425a      	negs	r2, r3
 801078c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010790:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	4293      	cmp	r3, r2
 8010798:	da02      	bge.n	80107a0 <arm_softmax_s8+0x1ba0>
 801079a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801079e:	e000      	b.n	80107a2 <arm_softmax_s8+0x1ba2>
 80107a0:	2000      	movs	r0, #0
 80107a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	425a      	negs	r2, r3
 80107ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107b2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	4293      	cmp	r3, r2
 80107ba:	da01      	bge.n	80107c0 <arm_softmax_s8+0x1bc0>
 80107bc:	2200      	movs	r2, #0
 80107be:	e001      	b.n	80107c4 <arm_softmax_s8+0x1bc4>
 80107c0:	f04f 32ff 	mov.w	r2, #4294967295
 80107c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	ea02 0103 	and.w	r1, r2, r3
 80107d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107d6:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80107da:	ea81 0300 	eor.w	r3, r1, r0
 80107de:	6013      	str	r3, [r2, #0]
    return result;
 80107e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80107e8:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80107ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107ee:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80107f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107f6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	440b      	add	r3, r1
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010804:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8010808:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801080c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	6013      	str	r3, [r2, #0]
 8010814:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010818:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 801081c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010820:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010828:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801082c:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8010830:	2300      	movs	r3, #0
 8010832:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010838:	f04f 0300 	mov.w	r3, #0
 801083c:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8010840:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010844:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010848:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	0fdb      	lsrs	r3, r3, #31
 8010850:	b2da      	uxtb	r2, r3
 8010852:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010856:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	0fdb      	lsrs	r3, r3, #31
 801085e:	b2db      	uxtb	r3, r3
 8010860:	4053      	eors	r3, r2
 8010862:	b2db      	uxtb	r3, r3
 8010864:	2b00      	cmp	r3, #0
 8010866:	d012      	beq.n	801088e <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8010868:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801086c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010870:	2100      	movs	r1, #0
 8010872:	f1d2 0001 	rsbs	r0, r2, #1
 8010876:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 801087a:	eb61 0303 	sbc.w	r3, r1, r3
 801087e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010882:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8010886:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801088a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801088e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010892:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	17da      	asrs	r2, r3, #31
 801089a:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801089e:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 80108a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108a6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	17da      	asrs	r2, r3, #31
 80108ae:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80108b2:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 80108b6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80108ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108be:	460b      	mov	r3, r1
 80108c0:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80108c4:	fb02 f203 	mul.w	r2, r2, r3
 80108c8:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80108cc:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 80108d0:	e9c4 0100 	strd	r0, r1, [r4]
 80108d4:	4601      	mov	r1, r0
 80108d6:	fb01 f303 	mul.w	r3, r1, r3
 80108da:	4413      	add	r3, r2
 80108dc:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80108e0:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 80108e4:	fba2 1201 	umull	r1, r2, r2, r1
 80108e8:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 80108ec:	460a      	mov	r2, r1
 80108ee:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 80108f2:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80108f6:	4413      	add	r3, r2
 80108f8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80108fc:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8010900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010904:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 8010908:	1851      	adds	r1, r2, r1
 801090a:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 801090e:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8010912:	414b      	adcs	r3, r1
 8010914:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010918:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 801091c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8010920:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010924:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8010928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092c:	2b00      	cmp	r3, #0
 801092e:	da0a      	bge.n	8010946 <arm_softmax_s8+0x1d46>
 8010930:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010934:	1851      	adds	r1, r2, r1
 8010936:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 801093a:	f143 0300 	adc.w	r3, r3, #0
 801093e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8010942:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8010946:	f04f 0000 	mov.w	r0, #0
 801094a:	f04f 0100 	mov.w	r1, #0
 801094e:	0fd0      	lsrs	r0, r2, #31
 8010950:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010954:	17d9      	asrs	r1, r3, #31
 8010956:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801095a:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801095e:	4603      	mov	r3, r0
 8010960:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010962:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010966:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 801096a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801096e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8010972:	6812      	ldr	r2, [r2, #0]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	429a      	cmp	r2, r3
 8010978:	d10e      	bne.n	8010998 <arm_softmax_s8+0x1d98>
 801097a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801097e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010988:	d106      	bne.n	8010998 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 801098a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801098e:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8010992:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010996:	6013      	str	r3, [r2, #0]
    return result;
 8010998:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801099c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80109a0:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80109a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109a6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	1a99      	subs	r1, r3, r2
 80109ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109b2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80109b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	6013      	str	r3, [r2, #0]
 80109c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80109ca:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80109cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109d0:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80109d4:	2300      	movs	r3, #0
 80109d6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80109d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80109dc:	f04f 0300 	mov.w	r3, #0
 80109e0:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80109e4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80109e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109ec:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	0fdb      	lsrs	r3, r3, #31
 80109f4:	b2da      	uxtb	r2, r3
 80109f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	0fdb      	lsrs	r3, r3, #31
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	4053      	eors	r3, r2
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d012      	beq.n	8010a32 <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 8010a0c:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8010a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a14:	2100      	movs	r1, #0
 8010a16:	f1d2 0001 	rsbs	r0, r2, #1
 8010a1a:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8010a1e:	eb61 0303 	sbc.w	r3, r1, r3
 8010a22:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8010a26:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 8010a2a:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8010a2e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010a32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a36:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	17da      	asrs	r2, r3, #31
 8010a3e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8010a42:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 8010a46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a4a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	17da      	asrs	r2, r3, #31
 8010a52:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8010a56:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8010a5a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8010a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a62:	460b      	mov	r3, r1
 8010a64:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8010a68:	fb02 f203 	mul.w	r2, r2, r3
 8010a6c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8010a70:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8010a74:	e9c4 0100 	strd	r0, r1, [r4]
 8010a78:	4601      	mov	r1, r0
 8010a7a:	fb01 f303 	mul.w	r3, r1, r3
 8010a7e:	4413      	add	r3, r2
 8010a80:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8010a84:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8010a88:	fba2 1201 	umull	r1, r2, r2, r1
 8010a8c:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8010a90:	460a      	mov	r2, r1
 8010a92:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 8010a96:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8010a9a:	4413      	add	r3, r2
 8010a9c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8010aa0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8010aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa8:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8010aac:	1851      	adds	r1, r2, r1
 8010aae:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8010ab2:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 8010ab6:	414b      	adcs	r3, r1
 8010ab8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8010abc:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8010ac0:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8010ac4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010ac8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8010acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	da0a      	bge.n	8010aea <arm_softmax_s8+0x1eea>
 8010ad4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ad8:	1851      	adds	r1, r2, r1
 8010ada:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8010ade:	f143 0300 	adc.w	r3, r3, #0
 8010ae2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8010ae6:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8010aea:	f04f 0000 	mov.w	r0, #0
 8010aee:	f04f 0100 	mov.w	r1, #0
 8010af2:	0fd0      	lsrs	r0, r2, #31
 8010af4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010af8:	17d9      	asrs	r1, r3, #31
 8010afa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010afe:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8010b02:	4603      	mov	r3, r0
 8010b04:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010b06:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b0a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 8010b0e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b12:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8010b16:	6812      	ldr	r2, [r2, #0]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d10e      	bne.n	8010b3c <arm_softmax_s8+0x1f3c>
 8010b1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b22:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010b2c:	d106      	bne.n	8010b3c <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 8010b2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b32:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 8010b36:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010b3a:	6013      	str	r3, [r2, #0]
    return result;
 8010b3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b4a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b4e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8010b50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8010b54:	4619      	mov	r1, r3
 8010b56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b5a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8010b5e:	1e4b      	subs	r3, r1, #1
 8010b60:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8010b62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b66:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8010b6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b6e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010b78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b7c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8010b80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b84:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010b88:	6812      	ldr	r2, [r2, #0]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	dd02      	ble.n	8010b96 <arm_softmax_s8+0x1f96>
 8010b90:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010b94:	e000      	b.n	8010b98 <arm_softmax_s8+0x1f98>
 8010b96:	2000      	movs	r0, #0
 8010b98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b9c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8010ba0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ba4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010ba8:	6812      	ldr	r2, [r2, #0]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	429a      	cmp	r2, r3
 8010bae:	dd01      	ble.n	8010bb4 <arm_softmax_s8+0x1fb4>
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	e001      	b.n	8010bb8 <arm_softmax_s8+0x1fb8>
 8010bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8010bb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bbc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	ea02 0103 	and.w	r1, r2, r3
 8010bc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bca:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8010bce:	ea81 0300 	eor.w	r3, r1, r0
 8010bd2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010bd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bd8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	425a      	negs	r2, r3
 8010be0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010be4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4293      	cmp	r3, r2
 8010bec:	da02      	bge.n	8010bf4 <arm_softmax_s8+0x1ff4>
 8010bee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010bf2:	e000      	b.n	8010bf6 <arm_softmax_s8+0x1ff6>
 8010bf4:	2000      	movs	r0, #0
 8010bf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bfa:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	425a      	negs	r2, r3
 8010c02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c06:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	da01      	bge.n	8010c14 <arm_softmax_s8+0x2014>
 8010c10:	2200      	movs	r2, #0
 8010c12:	e001      	b.n	8010c18 <arm_softmax_s8+0x2018>
 8010c14:	f04f 32ff 	mov.w	r2, #4294967295
 8010c18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c1c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	ea02 0103 	and.w	r1, r2, r3
 8010c26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c2a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8010c2e:	ea81 0300 	eor.w	r3, r1, r0
 8010c32:	6013      	str	r3, [r2, #0]
    return result;
 8010c34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c38:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8010c3c:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010c3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c42:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8010c46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c4a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	440b      	add	r3, r1
 8010c52:	6013      	str	r3, [r2, #0]
 8010c54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c58:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8010c5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	6013      	str	r3, [r2, #0]
 8010c68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c6c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8010c70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010c7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c80:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8010c84:	2300      	movs	r3, #0
 8010c86:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010c88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010c8c:	f04f 0300 	mov.w	r3, #0
 8010c90:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8010c94:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010c98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c9c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	0fdb      	lsrs	r3, r3, #31
 8010ca4:	b2da      	uxtb	r2, r3
 8010ca6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010caa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	0fdb      	lsrs	r3, r3, #31
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	4053      	eors	r3, r2
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d012      	beq.n	8010ce2 <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 8010cbc:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8010cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc4:	2100      	movs	r1, #0
 8010cc6:	f1d2 0001 	rsbs	r0, r2, #1
 8010cca:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8010cce:	eb61 0303 	sbc.w	r3, r1, r3
 8010cd2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8010cd6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8010cda:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8010cde:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010ce2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ce6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	17da      	asrs	r2, r3, #31
 8010cee:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8010cf2:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 8010cf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010cfa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	17da      	asrs	r2, r3, #31
 8010d02:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8010d06:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8010d0a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8010d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d12:	460b      	mov	r3, r1
 8010d14:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8010d18:	fb02 f203 	mul.w	r2, r2, r3
 8010d1c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8010d20:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8010d24:	e9c4 0100 	strd	r0, r1, [r4]
 8010d28:	4601      	mov	r1, r0
 8010d2a:	fb01 f303 	mul.w	r3, r1, r3
 8010d2e:	4413      	add	r3, r2
 8010d30:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8010d34:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8010d38:	fba2 1201 	umull	r1, r2, r2, r1
 8010d3c:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8010d40:	460a      	mov	r2, r1
 8010d42:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 8010d46:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8010d4a:	4413      	add	r3, r2
 8010d4c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8010d50:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8010d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d58:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8010d5c:	1851      	adds	r1, r2, r1
 8010d5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8010d62:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8010d66:	414b      	adcs	r3, r1
 8010d68:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8010d6c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8010d70:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8010d74:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010d78:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8010d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	da0a      	bge.n	8010d9a <arm_softmax_s8+0x219a>
 8010d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010d88:	1851      	adds	r1, r2, r1
 8010d8a:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8010d8e:	f143 0300 	adc.w	r3, r3, #0
 8010d92:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8010d96:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8010d9a:	f04f 0000 	mov.w	r0, #0
 8010d9e:	f04f 0100 	mov.w	r1, #0
 8010da2:	0fd0      	lsrs	r0, r2, #31
 8010da4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010da8:	17d9      	asrs	r1, r3, #31
 8010daa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dae:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8010db2:	4603      	mov	r3, r0
 8010db4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010db6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dba:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8010dbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dc2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010dc6:	6812      	ldr	r2, [r2, #0]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d10e      	bne.n	8010dec <arm_softmax_s8+0x21ec>
 8010dce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dd2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010ddc:	d106      	bne.n	8010dec <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 8010dde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010de2:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8010de6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010dea:	6013      	str	r3, [r2, #0]
    return result;
 8010dec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010df0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8010df4:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010df6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dfa:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	1a99      	subs	r1, r3, r2
 8010e02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e06:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8010e0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e0e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	6013      	str	r3, [r2, #0]
 8010e16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e1a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010e1e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8010e20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e24:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8010e28:	2300      	movs	r3, #0
 8010e2a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010e2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010e30:	f04f 0300 	mov.w	r3, #0
 8010e34:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8010e38:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010e3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e40:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	0fdb      	lsrs	r3, r3, #31
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e4e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	0fdb      	lsrs	r3, r3, #31
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	4053      	eors	r3, r2
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d012      	beq.n	8010e86 <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8010e60:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8010e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e68:	2100      	movs	r1, #0
 8010e6a:	f1d2 0001 	rsbs	r0, r2, #1
 8010e6e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 8010e72:	eb61 0303 	sbc.w	r3, r1, r3
 8010e76:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8010e7a:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8010e7e:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8010e82:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010e86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e8a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	17da      	asrs	r2, r3, #31
 8010e92:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8010e96:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 8010e9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e9e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	17da      	asrs	r2, r3, #31
 8010ea6:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8010eaa:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8010eae:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8010eb8:	fb02 f203 	mul.w	r2, r2, r3
 8010ebc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8010ec0:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 8010ec4:	4601      	mov	r1, r0
 8010ec6:	fb01 f303 	mul.w	r3, r1, r3
 8010eca:	4413      	add	r3, r2
 8010ecc:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8010ed0:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 8010ed4:	fba2 1201 	umull	r1, r2, r2, r1
 8010ed8:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 8010edc:	460a      	mov	r2, r1
 8010ede:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 8010ee2:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 8010ee6:	4413      	add	r3, r2
 8010ee8:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8010eec:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8010ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef4:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8010ef8:	1851      	adds	r1, r2, r1
 8010efa:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8010efe:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8010f02:	414b      	adcs	r3, r1
 8010f04:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8010f08:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8010f0c:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 8010f10:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010f14:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8010f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	da0a      	bge.n	8010f36 <arm_softmax_s8+0x2336>
 8010f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f24:	1851      	adds	r1, r2, r1
 8010f26:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8010f2a:	f143 0300 	adc.w	r3, r3, #0
 8010f2e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8010f32:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8010f36:	f04f 0000 	mov.w	r0, #0
 8010f3a:	f04f 0100 	mov.w	r1, #0
 8010f3e:	0fd0      	lsrs	r0, r2, #31
 8010f40:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010f44:	17d9      	asrs	r1, r3, #31
 8010f46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f4a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8010f4e:	4603      	mov	r3, r0
 8010f50:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010f52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f56:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8010f5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f5e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010f62:	6812      	ldr	r2, [r2, #0]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d10e      	bne.n	8010f88 <arm_softmax_s8+0x2388>
 8010f6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f6e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f78:	d106      	bne.n	8010f88 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 8010f7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f7e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8010f82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010f86:	6013      	str	r3, [r2, #0]
    return result;
 8010f88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f8c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8010f90:	681a      	ldr	r2, [r3, #0]
 8010f92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f96:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010f9a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8010f9c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fa6:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8010faa:	1e4b      	subs	r3, r1, #1
 8010fac:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8010fae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fb2:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8010fb6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010fc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fc8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8010fcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fd0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010fd4:	6812      	ldr	r2, [r2, #0]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	dd02      	ble.n	8010fe2 <arm_softmax_s8+0x23e2>
 8010fdc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010fe0:	e000      	b.n	8010fe4 <arm_softmax_s8+0x23e4>
 8010fe2:	2000      	movs	r0, #0
 8010fe4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fe8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8010fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ff0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010ff4:	6812      	ldr	r2, [r2, #0]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	dd01      	ble.n	8011000 <arm_softmax_s8+0x2400>
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	e001      	b.n	8011004 <arm_softmax_s8+0x2404>
 8011000:	f04f 32ff 	mov.w	r2, #4294967295
 8011004:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	ea02 0103 	and.w	r1, r2, r3
 8011012:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011016:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801101a:	ea81 0300 	eor.w	r3, r1, r0
 801101e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8011020:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011024:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	425a      	negs	r2, r3
 801102c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011030:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4293      	cmp	r3, r2
 8011038:	da02      	bge.n	8011040 <arm_softmax_s8+0x2440>
 801103a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801103e:	e000      	b.n	8011042 <arm_softmax_s8+0x2442>
 8011040:	2000      	movs	r0, #0
 8011042:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011046:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	425a      	negs	r2, r3
 801104e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011052:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	4293      	cmp	r3, r2
 801105a:	da05      	bge.n	8011068 <arm_softmax_s8+0x2468>
 801105c:	2200      	movs	r2, #0
 801105e:	e005      	b.n	801106c <arm_softmax_s8+0x246c>
 8011060:	c3c3c3c4 	.word	0xc3c3c3c4
 8011064:	ffffffff 	.word	0xffffffff
 8011068:	f04f 32ff 	mov.w	r2, #4294967295
 801106c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011070:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	ea02 0103 	and.w	r1, r2, r3
 801107a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801107e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 8011082:	ea81 0300 	eor.w	r3, r1, r0
 8011086:	6013      	str	r3, [r2, #0]
    return result;
 8011088:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801108c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8011090:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8011092:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011096:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801109a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801109e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	440b      	add	r3, r1
 80110a6:	6013      	str	r3, [r2, #0]
 80110a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110ac:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80110b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 80110bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80110c0:	4619      	mov	r1, r3
 80110c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110c6:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 80110ca:	1e4b      	subs	r3, r1, #1
 80110cc:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 80110ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110d2:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80110d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110da:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	005b      	lsls	r3, r3, #1
 80110e2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80110e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110e8:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80110ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110f0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80110f4:	6812      	ldr	r2, [r2, #0]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	dd02      	ble.n	8011102 <arm_softmax_s8+0x2502>
 80110fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011100:	e000      	b.n	8011104 <arm_softmax_s8+0x2504>
 8011102:	2000      	movs	r0, #0
 8011104:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011108:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 801110c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011110:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8011114:	6812      	ldr	r2, [r2, #0]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	429a      	cmp	r2, r3
 801111a:	dd01      	ble.n	8011120 <arm_softmax_s8+0x2520>
 801111c:	2200      	movs	r2, #0
 801111e:	e001      	b.n	8011124 <arm_softmax_s8+0x2524>
 8011120:	f04f 32ff 	mov.w	r2, #4294967295
 8011124:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011128:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	ea02 0103 	and.w	r1, r2, r3
 8011132:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011136:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801113a:	ea81 0300 	eor.w	r3, r1, r0
 801113e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8011140:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011144:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	425a      	negs	r2, r3
 801114c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011150:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	4293      	cmp	r3, r2
 8011158:	da02      	bge.n	8011160 <arm_softmax_s8+0x2560>
 801115a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801115e:	e000      	b.n	8011162 <arm_softmax_s8+0x2562>
 8011160:	2000      	movs	r0, #0
 8011162:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011166:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	425a      	negs	r2, r3
 801116e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011172:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	4293      	cmp	r3, r2
 801117a:	da01      	bge.n	8011180 <arm_softmax_s8+0x2580>
 801117c:	2200      	movs	r2, #0
 801117e:	e001      	b.n	8011184 <arm_softmax_s8+0x2584>
 8011180:	f04f 32ff 	mov.w	r2, #4294967295
 8011184:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011188:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	ea02 0103 	and.w	r1, r2, r3
 8011192:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011196:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801119a:	ea81 0300 	eor.w	r3, r1, r0
 801119e:	6013      	str	r3, [r2, #0]
    return result;
 80111a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80111a8:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 80111aa:	bf00      	nop
 80111ac:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 80111b0:	2300      	movs	r3, #0
 80111b2:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80111b6:	f001 bd85 	b.w	8012cc4 <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 80111ba:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80111be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111c2:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	4413      	add	r3, r2
 80111ca:	f993 3000 	ldrsb.w	r3, [r3]
 80111ce:	461a      	mov	r2, r3
 80111d0:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 80111da:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80111de:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80111e2:	429a      	cmp	r2, r3
 80111e4:	f2c1 8562 	blt.w	8012cac <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80111e8:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80111ec:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 80111f0:	fb03 f202 	mul.w	r2, r3, r2
 80111f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111f8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80111fc:	601a      	str	r2, [r3, #0]
 80111fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011202:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8011206:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801120a:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011212:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011216:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 801121a:	2300      	movs	r3, #0
 801121c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801121e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011222:	f04f 0300 	mov.w	r3, #0
 8011226:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 801122a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801122e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011232:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	0fdb      	lsrs	r3, r3, #31
 801123a:	b2da      	uxtb	r2, r3
 801123c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011240:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	0fdb      	lsrs	r3, r3, #31
 8011248:	b2db      	uxtb	r3, r3
 801124a:	4053      	eors	r3, r2
 801124c:	b2db      	uxtb	r3, r3
 801124e:	2b00      	cmp	r3, #0
 8011250:	d012      	beq.n	8011278 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 8011252:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	2100      	movs	r1, #0
 801125c:	f1d2 0001 	rsbs	r0, r2, #1
 8011260:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8011264:	eb61 0303 	sbc.w	r3, r1, r3
 8011268:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801126c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8011270:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8011274:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011278:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801127c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	17da      	asrs	r2, r3, #31
 8011284:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8011288:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 801128c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011290:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	17da      	asrs	r2, r3, #31
 8011298:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 801129c:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 80112a0:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80112a4:	460b      	mov	r3, r1
 80112a6:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80112aa:	fb02 f203 	mul.w	r2, r2, r3
 80112ae:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80112b2:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 80112b6:	4601      	mov	r1, r0
 80112b8:	fb01 f303 	mul.w	r3, r1, r3
 80112bc:	4413      	add	r3, r2
 80112be:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 80112c2:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 80112c6:	fba2 1201 	umull	r1, r2, r2, r1
 80112ca:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 80112ce:	460a      	mov	r2, r1
 80112d0:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 80112d4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 80112d8:	4413      	add	r3, r2
 80112da:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 80112de:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 80112e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e6:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80112ea:	1851      	adds	r1, r2, r1
 80112ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80112f0:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 80112f4:	414b      	adcs	r3, r1
 80112f6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80112fa:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80112fe:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8011302:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011306:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130e:	2b00      	cmp	r3, #0
 8011310:	da0a      	bge.n	8011328 <arm_softmax_s8+0x2728>
 8011312:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011316:	1851      	adds	r1, r2, r1
 8011318:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 801131c:	f143 0300 	adc.w	r3, r3, #0
 8011320:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8011324:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8011328:	f04f 0000 	mov.w	r0, #0
 801132c:	f04f 0100 	mov.w	r1, #0
 8011330:	0fd0      	lsrs	r0, r2, #31
 8011332:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011336:	17d9      	asrs	r1, r3, #31
 8011338:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801133c:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8011340:	4603      	mov	r3, r0
 8011342:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011344:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011348:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 801134c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011350:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8011354:	6812      	ldr	r2, [r2, #0]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	429a      	cmp	r2, r3
 801135a:	d10e      	bne.n	801137a <arm_softmax_s8+0x277a>
 801135c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011360:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801136a:	d106      	bne.n	801137a <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 801136c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011370:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8011374:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011378:	6013      	str	r3, [r2, #0]
    return result;
 801137a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801137e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011388:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801138c:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 801138e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011392:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8011396:	2300      	movs	r3, #0
 8011398:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 801139a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801139e:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80113a2:	2318      	movs	r3, #24
 80113a4:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 80113a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113aa:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80113ae:	2201      	movs	r2, #1
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	fa02 f303 	lsl.w	r3, r2, r3
 80113b6:	1e5a      	subs	r2, r3, #1
 80113b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113bc:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	ea02 0003 	and.w	r0, r2, r3
 80113c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113ca:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80113ce:	2201      	movs	r2, #1
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	fa02 f103 	lsl.w	r1, r2, r3
 80113d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113da:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80113de:	1a43      	subs	r3, r0, r1
 80113e0:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 80113e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113e6:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 80113ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113ee:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80113f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113f6:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80113fa:	6812      	ldr	r2, [r2, #0]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8011402:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011406:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	0159      	lsls	r1, r3, #5
 801140e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011412:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8011416:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 801141a:	6013      	str	r3, [r2, #0]
 801141c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011420:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8011424:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011428:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011434:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8011438:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801143c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011444:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011448:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 801144c:	2300      	movs	r3, #0
 801144e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011454:	f04f 0300 	mov.w	r3, #0
 8011458:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 801145c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011460:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011464:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	0fdb      	lsrs	r3, r3, #31
 801146c:	b2da      	uxtb	r2, r3
 801146e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011472:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	0fdb      	lsrs	r3, r3, #31
 801147a:	b2db      	uxtb	r3, r3
 801147c:	4053      	eors	r3, r2
 801147e:	b2db      	uxtb	r3, r3
 8011480:	2b00      	cmp	r3, #0
 8011482:	d012      	beq.n	80114aa <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 8011484:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8011488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148c:	2100      	movs	r1, #0
 801148e:	f1d2 0001 	rsbs	r0, r2, #1
 8011492:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8011496:	eb61 0303 	sbc.w	r3, r1, r3
 801149a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801149e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80114a2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 80114a6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80114aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114ae:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	17da      	asrs	r2, r3, #31
 80114b6:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80114ba:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 80114be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114c2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	17da      	asrs	r2, r3, #31
 80114ca:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80114ce:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 80114d2:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 80114d6:	460b      	mov	r3, r1
 80114d8:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80114dc:	fb02 f203 	mul.w	r2, r2, r3
 80114e0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80114e4:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 80114e8:	4601      	mov	r1, r0
 80114ea:	fb01 f303 	mul.w	r3, r1, r3
 80114ee:	4413      	add	r3, r2
 80114f0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80114f4:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 80114f8:	fba2 1201 	umull	r1, r2, r2, r1
 80114fc:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8011500:	460a      	mov	r2, r1
 8011502:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 8011506:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 801150a:	4413      	add	r3, r2
 801150c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8011510:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8011514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011518:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 801151c:	1851      	adds	r1, r2, r1
 801151e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8011522:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8011526:	414b      	adcs	r3, r1
 8011528:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801152c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8011530:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8011534:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011538:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011540:	2b00      	cmp	r3, #0
 8011542:	da0a      	bge.n	801155a <arm_softmax_s8+0x295a>
 8011544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011548:	1851      	adds	r1, r2, r1
 801154a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801154e:	f143 0300 	adc.w	r3, r3, #0
 8011552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011556:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801155a:	f04f 0000 	mov.w	r0, #0
 801155e:	f04f 0100 	mov.w	r1, #0
 8011562:	0fd0      	lsrs	r0, r2, #31
 8011564:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011568:	17d9      	asrs	r1, r3, #31
 801156a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801156e:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8011572:	4603      	mov	r3, r0
 8011574:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011576:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801157a:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 801157e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011582:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011586:	6812      	ldr	r2, [r2, #0]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	429a      	cmp	r2, r3
 801158c:	d10e      	bne.n	80115ac <arm_softmax_s8+0x29ac>
 801158e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011592:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801159c:	d106      	bne.n	80115ac <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 801159e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115a2:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 80115a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80115aa:	6013      	str	r3, [r2, #0]
    return result;
 80115ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115b0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80115b4:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 80115b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115ba:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80115be:	601a      	str	r2, [r3, #0]
 80115c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115c4:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 80115c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115cc:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	6013      	str	r3, [r2, #0]
 80115d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115d8:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 80115dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115e0:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80115e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115ec:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 80115f0:	2300      	movs	r3, #0
 80115f2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80115f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80115f8:	f04f 0300 	mov.w	r3, #0
 80115fc:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8011600:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011604:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011608:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	0fdb      	lsrs	r3, r3, #31
 8011610:	b2da      	uxtb	r2, r3
 8011612:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011616:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	0fdb      	lsrs	r3, r3, #31
 801161e:	b2db      	uxtb	r3, r3
 8011620:	4053      	eors	r3, r2
 8011622:	b2db      	uxtb	r3, r3
 8011624:	2b00      	cmp	r3, #0
 8011626:	d012      	beq.n	801164e <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8011628:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 801162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011630:	2100      	movs	r1, #0
 8011632:	f1d2 0001 	rsbs	r0, r2, #1
 8011636:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 801163a:	eb61 0303 	sbc.w	r3, r1, r3
 801163e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8011642:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8011646:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801164a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801164e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011652:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	17da      	asrs	r2, r3, #31
 801165a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 801165e:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8011662:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011666:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	17da      	asrs	r2, r3, #31
 801166e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8011672:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8011676:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 801167a:	460b      	mov	r3, r1
 801167c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8011680:	fb02 f203 	mul.w	r2, r2, r3
 8011684:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8011688:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 801168c:	4601      	mov	r1, r0
 801168e:	fb01 f303 	mul.w	r3, r1, r3
 8011692:	4413      	add	r3, r2
 8011694:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8011698:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 801169c:	fba2 1201 	umull	r1, r2, r2, r1
 80116a0:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 80116a4:	460a      	mov	r2, r1
 80116a6:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 80116aa:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 80116ae:	4413      	add	r3, r2
 80116b0:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80116b4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80116b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116bc:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 80116c0:	1851      	adds	r1, r2, r1
 80116c2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80116c6:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 80116ca:	414b      	adcs	r3, r1
 80116cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80116d0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80116d4:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80116d8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80116dc:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 80116e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	da0a      	bge.n	80116fe <arm_softmax_s8+0x2afe>
 80116e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80116ec:	1851      	adds	r1, r2, r1
 80116ee:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80116f2:	f143 0300 	adc.w	r3, r3, #0
 80116f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80116fa:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80116fe:	f04f 0000 	mov.w	r0, #0
 8011702:	f04f 0100 	mov.w	r1, #0
 8011706:	0fd0      	lsrs	r0, r2, #31
 8011708:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801170c:	17d9      	asrs	r1, r3, #31
 801170e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011712:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8011716:	4603      	mov	r3, r0
 8011718:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801171a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801171e:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8011722:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011726:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801172a:	6812      	ldr	r2, [r2, #0]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	429a      	cmp	r2, r3
 8011730:	d10e      	bne.n	8011750 <arm_softmax_s8+0x2b50>
 8011732:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011736:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011740:	d106      	bne.n	8011750 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8011742:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011746:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801174a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801174e:	6013      	str	r3, [r2, #0]
    return result;
 8011750:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011754:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801175e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011762:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8011764:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011768:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801176c:	2300      	movs	r3, #0
 801176e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8011770:	2104      	movs	r1, #4
 8011772:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011776:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 801177a:	1e4b      	subs	r3, r1, #1
 801177c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801177e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011782:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 8011786:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801178a:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 801178e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011792:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011796:	6812      	ldr	r2, [r2, #0]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	4013      	ands	r3, r2
 801179c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801179e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117a2:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80117a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117aa:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	109b      	asrs	r3, r3, #2
 80117b2:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80117b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117b8:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80117bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117c0:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	105b      	asrs	r3, r3, #1
 80117c8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80117ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117ce:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	da0a      	bge.n	80117ee <arm_softmax_s8+0x2bee>
        threshold++;
 80117d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117dc:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80117e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117e4:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	3301      	adds	r3, #1
 80117ec:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80117ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117f2:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 80117f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80117fa:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80117fe:	6812      	ldr	r2, [r2, #0]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	429a      	cmp	r2, r3
 8011804:	dd0a      	ble.n	801181c <arm_softmax_s8+0x2c1c>
        result++;
 8011806:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801180a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801180e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011812:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	3301      	adds	r3, #1
 801181a:	6013      	str	r3, [r2, #0]
    return result;
 801181c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011820:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011824:	681c      	ldr	r4, [r3, #0]
 8011826:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801182a:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 801182e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011832:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	6013      	str	r3, [r2, #0]
 801183a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801183e:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8011842:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011846:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801184e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011852:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8011856:	2300      	movs	r3, #0
 8011858:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801185a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801185e:	f04f 0300 	mov.w	r3, #0
 8011862:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8011866:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801186a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801186e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	0fdb      	lsrs	r3, r3, #31
 8011876:	b2da      	uxtb	r2, r3
 8011878:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801187c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	0fdb      	lsrs	r3, r3, #31
 8011884:	b2db      	uxtb	r3, r3
 8011886:	4053      	eors	r3, r2
 8011888:	b2db      	uxtb	r3, r3
 801188a:	2b00      	cmp	r3, #0
 801188c:	d012      	beq.n	80118b4 <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 801188e:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8011892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011896:	2100      	movs	r1, #0
 8011898:	f1d2 0001 	rsbs	r0, r2, #1
 801189c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 80118a0:	eb61 0303 	sbc.w	r3, r1, r3
 80118a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80118a8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80118ac:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80118b0:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 80118b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118b8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	17da      	asrs	r2, r3, #31
 80118c0:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80118c4:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80118c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80118cc:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	17da      	asrs	r2, r3, #31
 80118d4:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80118d8:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 80118dc:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80118e0:	460b      	mov	r3, r1
 80118e2:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80118e6:	fb02 f203 	mul.w	r2, r2, r3
 80118ea:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80118ee:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 80118f2:	4601      	mov	r1, r0
 80118f4:	fb01 f303 	mul.w	r3, r1, r3
 80118f8:	4413      	add	r3, r2
 80118fa:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 80118fe:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8011902:	fba2 1201 	umull	r1, r2, r2, r1
 8011906:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 801190a:	460a      	mov	r2, r1
 801190c:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8011910:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8011914:	4413      	add	r3, r2
 8011916:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 801191a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011922:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 8011926:	1851      	adds	r1, r2, r1
 8011928:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 801192c:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8011930:	414b      	adcs	r3, r1
 8011932:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011936:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801193a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 801193e:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8011942:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8011946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194a:	2b00      	cmp	r3, #0
 801194c:	da0a      	bge.n	8011964 <arm_softmax_s8+0x2d64>
 801194e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011952:	1851      	adds	r1, r2, r1
 8011954:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8011958:	f143 0300 	adc.w	r3, r3, #0
 801195c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011960:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8011964:	f04f 0000 	mov.w	r0, #0
 8011968:	f04f 0100 	mov.w	r1, #0
 801196c:	0fd0      	lsrs	r0, r2, #31
 801196e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011972:	17d9      	asrs	r1, r3, #31
 8011974:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011978:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801197c:	4603      	mov	r3, r0
 801197e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011980:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011984:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8011988:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801198c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011990:	6812      	ldr	r2, [r2, #0]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	429a      	cmp	r2, r3
 8011996:	d10e      	bne.n	80119b6 <arm_softmax_s8+0x2db6>
 8011998:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801199c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80119a6:	d106      	bne.n	80119b6 <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 80119a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119ac:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80119b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80119b4:	6013      	str	r3, [r2, #0]
    return result;
 80119b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119ba:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80119be:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80119c0:	18e2      	adds	r2, r4, r3
 80119c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119c6:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80119ca:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80119cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119d0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80119d4:	2300      	movs	r3, #0
 80119d6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80119d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80119dc:	f04f 0300 	mov.w	r3, #0
 80119e0:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80119e4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80119e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80119ec:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	0fdb      	lsrs	r3, r3, #31
 80119f4:	b2da      	uxtb	r2, r3
 80119f6:	2300      	movs	r3, #0
 80119f8:	4053      	eors	r3, r2
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d012      	beq.n	8011a26 <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8011a00:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8011a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a08:	2100      	movs	r1, #0
 8011a0a:	f1d2 0001 	rsbs	r0, r2, #1
 8011a0e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8011a12:	eb61 0303 	sbc.w	r3, r1, r3
 8011a16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011a1a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8011a1e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8011a22:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011a26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011a2a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	17da      	asrs	r2, r3, #31
 8011a32:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8011a36:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8011a3a:	a3c9      	add	r3, pc, #804	; (adr r3, 8011d60 <arm_softmax_s8+0x3160>)
 8011a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a40:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8011a44:	fb02 f001 	mul.w	r0, r2, r1
 8011a48:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8011a4c:	fb01 f103 	mul.w	r1, r1, r3
 8011a50:	4401      	add	r1, r0
 8011a52:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8011a56:	fba0 2302 	umull	r2, r3, r0, r2
 8011a5a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8011a5e:	4613      	mov	r3, r2
 8011a60:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8011a64:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8011a68:	18cb      	adds	r3, r1, r3
 8011a6a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8011a6e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8011a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a76:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 8011a7a:	1851      	adds	r1, r2, r1
 8011a7c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8011a80:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8011a84:	414b      	adcs	r3, r1
 8011a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011a8a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8011a8e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8011a92:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011a96:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8011a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	da0a      	bge.n	8011ab8 <arm_softmax_s8+0x2eb8>
 8011aa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011aa6:	1851      	adds	r1, r2, r1
 8011aa8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8011aac:	f143 0300 	adc.w	r3, r3, #0
 8011ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011ab4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8011ab8:	f04f 0000 	mov.w	r0, #0
 8011abc:	f04f 0100 	mov.w	r1, #0
 8011ac0:	0fd0      	lsrs	r0, r2, #31
 8011ac2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011ac6:	17d9      	asrs	r1, r3, #31
 8011ac8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011acc:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011ad4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ad8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	4b9e      	ldr	r3, [pc, #632]	; (8011d58 <arm_softmax_s8+0x3158>)
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d10e      	bne.n	8011b02 <arm_softmax_s8+0x2f02>
 8011ae4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ae8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011af2:	d106      	bne.n	8011b02 <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8011af4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011af8:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8011afc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011b00:	6013      	str	r3, [r2, #0]
    return result;
 8011b02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b06:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011b0a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8011b0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b10:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	441a      	add	r2, r3
 8011b18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b1c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011b20:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8011b22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b26:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8011b2e:	2102      	movs	r1, #2
 8011b30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b34:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8011b38:	1e4b      	subs	r3, r1, #1
 8011b3a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8011b3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b40:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8011b44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b48:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8011b4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b50:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b54:	6812      	ldr	r2, [r2, #0]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	4013      	ands	r3, r2
 8011b5a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8011b5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b60:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8011b64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b68:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	105b      	asrs	r3, r3, #1
 8011b70:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8011b72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b76:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8011b7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b7e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	105b      	asrs	r3, r3, #1
 8011b86:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8011b88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b8c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	da0a      	bge.n	8011bac <arm_softmax_s8+0x2fac>
        threshold++;
 8011b96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011b9a:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8011b9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ba2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8011bac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bb0:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8011bb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bb8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011bbc:	6812      	ldr	r2, [r2, #0]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	dd0a      	ble.n	8011bda <arm_softmax_s8+0x2fda>
        result++;
 8011bc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bc8:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8011bcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bd0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	6013      	str	r3, [r2, #0]
    return result;
 8011bda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bde:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011be2:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8011be4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011be8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	441a      	add	r2, r3
 8011bf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bf4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011bf8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8011bfa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011bfe:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8011c02:	2300      	movs	r3, #0
 8011c04:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011c0a:	f04f 0300 	mov.w	r3, #0
 8011c0e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8011c12:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011c16:	2200      	movs	r2, #0
 8011c18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c1c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	0fdb      	lsrs	r3, r3, #31
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	4053      	eors	r3, r2
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d012      	beq.n	8011c54 <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 8011c2e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c36:	2100      	movs	r1, #0
 8011c38:	f1d2 0001 	rsbs	r0, r2, #1
 8011c3c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8011c40:	eb61 0303 	sbc.w	r3, r1, r3
 8011c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011c48:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8011c4c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8011c50:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011c54:	a13e      	add	r1, pc, #248	; (adr r1, 8011d50 <arm_softmax_s8+0x3150>)
 8011c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011c5e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	17da      	asrs	r2, r3, #31
 8011c66:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8011c6a:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8011c6e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8011c72:	fb03 f201 	mul.w	r2, r3, r1
 8011c76:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8011c7a:	fb00 f303 	mul.w	r3, r0, r3
 8011c7e:	4413      	add	r3, r2
 8011c80:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8011c84:	fba0 1202 	umull	r1, r2, r0, r2
 8011c88:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 8011c8c:	460a      	mov	r2, r1
 8011c8e:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 8011c92:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8011c96:	4413      	add	r3, r2
 8011c98:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8011c9c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca4:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8011ca8:	1851      	adds	r1, r2, r1
 8011caa:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8011cae:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 8011cb2:	414b      	adcs	r3, r1
 8011cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011cb8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8011cbc:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8011cc0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011cc4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8011cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	da0a      	bge.n	8011ce6 <arm_softmax_s8+0x30e6>
 8011cd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011cd4:	1851      	adds	r1, r2, r1
 8011cd6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8011cda:	f143 0300 	adc.w	r3, r3, #0
 8011cde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011ce2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8011ce6:	f04f 0000 	mov.w	r0, #0
 8011cea:	f04f 0100 	mov.w	r1, #0
 8011cee:	0fd0      	lsrs	r0, r2, #31
 8011cf0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011cf4:	17d9      	asrs	r1, r3, #31
 8011cf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011cfa:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8011cfe:	4603      	mov	r3, r0
 8011d00:	6013      	str	r3, [r2, #0]
    return result;
 8011d02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d06:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8011d0a:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 8011d0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d10:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011d14:	4b11      	ldr	r3, [pc, #68]	; (8011d5c <arm_softmax_s8+0x315c>)
 8011d16:	440b      	add	r3, r1
 8011d18:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8011d1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d1e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011d22:	6819      	ldr	r1, [r3, #0]
 8011d24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d28:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011d2c:	1c4b      	adds	r3, r1, #1
 8011d2e:	6013      	str	r3, [r2, #0]
 8011d30:	2301      	movs	r3, #1
 8011d32:	fa03 f201 	lsl.w	r2, r3, r1
 8011d36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d3a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4013      	ands	r3, r2
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d010      	beq.n	8011d68 <arm_softmax_s8+0x3168>
 8011d46:	f04f 32ff 	mov.w	r2, #4294967295
 8011d4a:	e00e      	b.n	8011d6a <arm_softmax_s8+0x316a>
 8011d4c:	f3af 8000 	nop.w
 8011d50:	70f5a894 	.word	0x70f5a894
 8011d54:	00000000 	.word	0x00000000
 8011d58:	2aaaaaab 	.word	0x2aaaaaab
 8011d5c:	70f5a894 	.word	0x70f5a894
 8011d60:	2aaaaaab 	.word	0x2aaaaaab
 8011d64:	00000000 	.word	0x00000000
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d6e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011d72:	601a      	str	r2, [r3, #0]
 8011d74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d78:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8011d7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d80:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011d88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011d8c:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8011d90:	2300      	movs	r3, #0
 8011d92:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011d98:	f04f 0300 	mov.w	r3, #0
 8011d9c:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8011da0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011da4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011da8:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	0fdb      	lsrs	r3, r3, #31
 8011db0:	b2da      	uxtb	r2, r3
 8011db2:	2300      	movs	r3, #0
 8011db4:	4053      	eors	r3, r2
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d012      	beq.n	8011de2 <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 8011dbc:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	f1d2 0001 	rsbs	r0, r2, #1
 8011dca:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8011dce:	eb61 0303 	sbc.w	r3, r1, r3
 8011dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011dd6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8011dda:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8011dde:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011de2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011de6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	17da      	asrs	r2, r3, #31
 8011dee:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8011df2:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8011df6:	a3c4      	add	r3, pc, #784	; (adr r3, 8012108 <arm_softmax_s8+0x3508>)
 8011df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dfc:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8011e00:	fb02 f001 	mul.w	r0, r2, r1
 8011e04:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8011e08:	fb01 f103 	mul.w	r1, r1, r3
 8011e0c:	4401      	add	r1, r0
 8011e0e:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8011e12:	fba0 2302 	umull	r2, r3, r0, r2
 8011e16:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8011e20:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8011e24:	18cb      	adds	r3, r1, r3
 8011e26:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8011e2a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e32:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8011e36:	1851      	adds	r1, r2, r1
 8011e38:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8011e3c:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8011e40:	414b      	adcs	r3, r1
 8011e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011e46:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8011e4a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8011e4e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011e52:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8011e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	da0a      	bge.n	8011e74 <arm_softmax_s8+0x3274>
 8011e5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e62:	1851      	adds	r1, r2, r1
 8011e64:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8011e68:	f143 0300 	adc.w	r3, r3, #0
 8011e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011e70:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011e74:	f04f 0000 	mov.w	r0, #0
 8011e78:	f04f 0100 	mov.w	r1, #0
 8011e7c:	0fd0      	lsrs	r0, r2, #31
 8011e7e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011e82:	17d9      	asrs	r1, r3, #31
 8011e84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e88:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011e90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011e94:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	4b99      	ldr	r3, [pc, #612]	; (8012100 <arm_softmax_s8+0x3500>)
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d10e      	bne.n	8011ebe <arm_softmax_s8+0x32be>
 8011ea0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ea4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011eae:	d106      	bne.n	8011ebe <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8011eb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011eb4:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8011eb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011ebc:	6013      	str	r3, [r2, #0]
    return result;
 8011ebe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ec2:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8011ec6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8011ec8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ecc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	ea02 0003 	and.w	r0, r2, r3
 8011ed6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011eda:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	43da      	mvns	r2, r3
 8011ee2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ee6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	ea02 0103 	and.w	r1, r2, r3
 8011ef0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011ef4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011ef8:	ea80 0301 	eor.w	r3, r0, r1
 8011efc:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8011efe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f02:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011f06:	6819      	ldr	r1, [r3, #0]
 8011f08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f0c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011f10:	1c4b      	adds	r3, r1, #1
 8011f12:	6013      	str	r3, [r2, #0]
 8011f14:	2301      	movs	r3, #1
 8011f16:	fa03 f201 	lsl.w	r2, r3, r1
 8011f1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f1e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	4013      	ands	r3, r2
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d002      	beq.n	8011f30 <arm_softmax_s8+0x3330>
 8011f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f2e:	e000      	b.n	8011f32 <arm_softmax_s8+0x3332>
 8011f30:	2200      	movs	r2, #0
 8011f32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f36:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011f3a:	601a      	str	r2, [r3, #0]
 8011f3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f40:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 8011f44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f48:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011f50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f54:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8011f58:	2300      	movs	r3, #0
 8011f5a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011f5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011f60:	f04f 0300 	mov.w	r3, #0
 8011f64:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8011f68:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011f6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011f70:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	0fdb      	lsrs	r3, r3, #31
 8011f78:	b2da      	uxtb	r2, r3
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	4053      	eors	r3, r2
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d012      	beq.n	8011faa <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 8011f84:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8011f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	f1d2 0001 	rsbs	r0, r2, #1
 8011f92:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8011f96:	eb61 0303 	sbc.w	r3, r1, r3
 8011f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011f9e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8011fa2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8011fa6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8011faa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011fae:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	17da      	asrs	r2, r3, #31
 8011fb6:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8011fba:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8011fbe:	a34e      	add	r3, pc, #312	; (adr r3, 80120f8 <arm_softmax_s8+0x34f8>)
 8011fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc4:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8011fc8:	fb02 f001 	mul.w	r0, r2, r1
 8011fcc:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 8011fd0:	fb01 f103 	mul.w	r1, r1, r3
 8011fd4:	4401      	add	r1, r0
 8011fd6:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8011fda:	fba0 2302 	umull	r2, r3, r0, r2
 8011fde:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8011fe8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8011fec:	18cb      	adds	r3, r1, r3
 8011fee:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8011ff2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8011ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffa:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 8011ffe:	1851      	adds	r1, r2, r1
 8012000:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8012004:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8012008:	414b      	adcs	r3, r1
 801200a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801200e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8012012:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8012016:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801201a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012022:	2b00      	cmp	r3, #0
 8012024:	da0a      	bge.n	801203c <arm_softmax_s8+0x343c>
 8012026:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801202a:	1851      	adds	r1, r2, r1
 801202c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8012030:	f143 0300 	adc.w	r3, r3, #0
 8012034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012038:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801203c:	f04f 0000 	mov.w	r0, #0
 8012040:	f04f 0100 	mov.w	r1, #0
 8012044:	0fd0      	lsrs	r0, r2, #31
 8012046:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801204a:	17d9      	asrs	r1, r3, #31
 801204c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012050:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8012054:	4603      	mov	r3, r0
 8012056:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012058:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801205c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	4b28      	ldr	r3, [pc, #160]	; (8012104 <arm_softmax_s8+0x3504>)
 8012064:	429a      	cmp	r2, r3
 8012066:	d10e      	bne.n	8012086 <arm_softmax_s8+0x3486>
 8012068:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801206c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012076:	d106      	bne.n	8012086 <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8012078:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801207c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8012080:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012084:	6013      	str	r3, [r2, #0]
    return result;
 8012086:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801208a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801208e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8012090:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012094:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	ea02 0003 	and.w	r0, r2, r3
 801209e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120a2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	43da      	mvns	r2, r3
 80120aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120ae:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	ea02 0103 	and.w	r1, r2, r3
 80120b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120bc:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80120c0:	ea80 0301 	eor.w	r3, r0, r1
 80120c4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 80120c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120ca:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80120ce:	6819      	ldr	r1, [r3, #0]
 80120d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120d4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80120d8:	1c4b      	adds	r3, r1, #1
 80120da:	6013      	str	r3, [r2, #0]
 80120dc:	2301      	movs	r3, #1
 80120de:	fa03 f201 	lsl.w	r2, r3, r1
 80120e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80120e6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	4013      	ands	r3, r2
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d00e      	beq.n	8012110 <arm_softmax_s8+0x3510>
 80120f2:	f04f 32ff 	mov.w	r2, #4294967295
 80120f6:	e00c      	b.n	8012112 <arm_softmax_s8+0x3512>
 80120f8:	4da2cbf2 	.word	0x4da2cbf2
 80120fc:	00000000 	.word	0x00000000
 8012100:	63afbe7b 	.word	0x63afbe7b
 8012104:	4da2cbf2 	.word	0x4da2cbf2
 8012108:	63afbe7b 	.word	0x63afbe7b
 801210c:	00000000 	.word	0x00000000
 8012110:	2200      	movs	r2, #0
 8012112:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012116:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801211a:	601a      	str	r2, [r3, #0]
 801211c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012120:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8012124:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012128:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012130:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012134:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8012138:	2300      	movs	r3, #0
 801213a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801213c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012140:	f04f 0300 	mov.w	r3, #0
 8012144:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8012148:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801214c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012150:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	0fdb      	lsrs	r3, r3, #31
 8012158:	b2da      	uxtb	r2, r3
 801215a:	2300      	movs	r3, #0
 801215c:	4053      	eors	r3, r2
 801215e:	b2db      	uxtb	r3, r3
 8012160:	2b00      	cmp	r3, #0
 8012162:	d012      	beq.n	801218a <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 8012164:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8012168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216c:	2100      	movs	r1, #0
 801216e:	f1d2 0001 	rsbs	r0, r2, #1
 8012172:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8012176:	eb61 0303 	sbc.w	r3, r1, r3
 801217a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801217e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8012182:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8012186:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801218a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801218e:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	17da      	asrs	r2, r3, #31
 8012196:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 801219a:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 801219e:	a3c0      	add	r3, pc, #768	; (adr r3, 80124a0 <arm_softmax_s8+0x38a0>)
 80121a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a4:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 80121a8:	fb02 f001 	mul.w	r0, r2, r1
 80121ac:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80121b0:	fb01 f103 	mul.w	r1, r1, r3
 80121b4:	4401      	add	r1, r0
 80121b6:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 80121ba:	fba0 2302 	umull	r2, r3, r0, r2
 80121be:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80121c2:	4613      	mov	r3, r2
 80121c4:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 80121c8:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80121cc:	18cb      	adds	r3, r1, r3
 80121ce:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80121d2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80121d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121da:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 80121de:	1851      	adds	r1, r2, r1
 80121e0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80121e4:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 80121e8:	414b      	adcs	r3, r1
 80121ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80121ee:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80121f2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80121f6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80121fa:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80121fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012202:	2b00      	cmp	r3, #0
 8012204:	da08      	bge.n	8012218 <arm_softmax_s8+0x3618>
 8012206:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801220a:	1851      	adds	r1, r2, r1
 801220c:	67b9      	str	r1, [r7, #120]	; 0x78
 801220e:	f143 0300 	adc.w	r3, r3, #0
 8012212:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012214:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8012218:	f04f 0000 	mov.w	r0, #0
 801221c:	f04f 0100 	mov.w	r1, #0
 8012220:	0fd0      	lsrs	r0, r2, #31
 8012222:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012226:	17d9      	asrs	r1, r3, #31
 8012228:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801222c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8012230:	4603      	mov	r3, r0
 8012232:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012234:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012238:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	4b96      	ldr	r3, [pc, #600]	; (8012498 <arm_softmax_s8+0x3898>)
 8012240:	429a      	cmp	r2, r3
 8012242:	d10e      	bne.n	8012262 <arm_softmax_s8+0x3662>
 8012244:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012248:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012252:	d106      	bne.n	8012262 <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8012254:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012258:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 801225c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012260:	6013      	str	r3, [r2, #0]
    return result;
 8012262:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012266:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801226a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 801226c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012270:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	ea02 0003 	and.w	r0, r2, r3
 801227a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801227e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	43da      	mvns	r2, r3
 8012286:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801228a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	ea02 0103 	and.w	r1, r2, r3
 8012294:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012298:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801229c:	ea80 0301 	eor.w	r3, r0, r1
 80122a0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 80122a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122a6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80122aa:	6819      	ldr	r1, [r3, #0]
 80122ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122b0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80122b4:	1c4b      	adds	r3, r1, #1
 80122b6:	6013      	str	r3, [r2, #0]
 80122b8:	2301      	movs	r3, #1
 80122ba:	fa03 f201 	lsl.w	r2, r3, r1
 80122be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122c2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	4013      	ands	r3, r2
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d002      	beq.n	80122d4 <arm_softmax_s8+0x36d4>
 80122ce:	f04f 32ff 	mov.w	r2, #4294967295
 80122d2:	e000      	b.n	80122d6 <arm_softmax_s8+0x36d6>
 80122d4:	2200      	movs	r2, #0
 80122d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122da:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80122de:	601a      	str	r2, [r3, #0]
 80122e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122e4:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 80122e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122ec:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80122f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80122f8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80122fc:	2300      	movs	r3, #0
 80122fe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012304:	f04f 0300 	mov.w	r3, #0
 8012308:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801230c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012310:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012314:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	0fdb      	lsrs	r3, r3, #31
 801231c:	b2da      	uxtb	r2, r3
 801231e:	2300      	movs	r3, #0
 8012320:	4053      	eors	r3, r2
 8012322:	b2db      	uxtb	r3, r3
 8012324:	2b00      	cmp	r3, #0
 8012326:	d010      	beq.n	801234a <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8012328:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012330:	2100      	movs	r1, #0
 8012332:	f1d2 0001 	rsbs	r0, r2, #1
 8012336:	6738      	str	r0, [r7, #112]	; 0x70
 8012338:	eb61 0303 	sbc.w	r3, r1, r3
 801233c:	677b      	str	r3, [r7, #116]	; 0x74
 801233e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8012342:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8012346:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801234a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801234e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	17da      	asrs	r2, r3, #31
 8012356:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 801235a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 801235e:	a34c      	add	r3, pc, #304	; (adr r3, 8012490 <arm_softmax_s8+0x3890>)
 8012360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012364:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8012368:	fb02 f001 	mul.w	r0, r2, r1
 801236c:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8012370:	fb01 f103 	mul.w	r1, r1, r3
 8012374:	4401      	add	r1, r0
 8012376:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 801237a:	fba0 2302 	umull	r2, r3, r0, r2
 801237e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8012382:	4613      	mov	r3, r2
 8012384:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8012388:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 801238c:	18cb      	adds	r3, r1, r3
 801238e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8012392:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239a:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 801239e:	1851      	adds	r1, r2, r1
 80123a0:	66b9      	str	r1, [r7, #104]	; 0x68
 80123a2:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 80123a6:	414b      	adcs	r3, r1
 80123a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80123aa:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80123ae:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80123b2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80123b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	da08      	bge.n	80123d4 <arm_softmax_s8+0x37d4>
 80123c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80123c6:	1851      	adds	r1, r2, r1
 80123c8:	6639      	str	r1, [r7, #96]	; 0x60
 80123ca:	f143 0300 	adc.w	r3, r3, #0
 80123ce:	667b      	str	r3, [r7, #100]	; 0x64
 80123d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80123d4:	f04f 0000 	mov.w	r0, #0
 80123d8:	f04f 0100 	mov.w	r1, #0
 80123dc:	0fd0      	lsrs	r0, r2, #31
 80123de:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80123e2:	17d9      	asrs	r1, r3, #31
 80123e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123e8:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 80123ec:	4603      	mov	r3, r0
 80123ee:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80123f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80123f4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80123f8:	681a      	ldr	r2, [r3, #0]
 80123fa:	4b28      	ldr	r3, [pc, #160]	; (801249c <arm_softmax_s8+0x389c>)
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d10e      	bne.n	801241e <arm_softmax_s8+0x381e>
 8012400:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012404:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801240e:	d106      	bne.n	801241e <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8012410:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012414:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8012418:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801241c:	6013      	str	r3, [r2, #0]
    return result;
 801241e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012422:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8012426:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8012428:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801242c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	ea02 0003 	and.w	r0, r2, r3
 8012436:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801243a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	43da      	mvns	r2, r3
 8012442:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012446:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	ea02 0103 	and.w	r1, r2, r3
 8012450:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012454:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8012458:	ea80 0301 	eor.w	r3, r0, r1
 801245c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 801245e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012462:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8012466:	6819      	ldr	r1, [r3, #0]
 8012468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801246c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012470:	1c4b      	adds	r3, r1, #1
 8012472:	6013      	str	r3, [r2, #0]
 8012474:	2301      	movs	r3, #1
 8012476:	fa03 f201 	lsl.w	r2, r3, r1
 801247a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801247e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	4013      	ands	r3, r2
 8012486:	2b00      	cmp	r3, #0
 8012488:	d00e      	beq.n	80124a8 <arm_softmax_s8+0x38a8>
 801248a:	f04f 32ff 	mov.w	r2, #4294967295
 801248e:	e00c      	b.n	80124aa <arm_softmax_s8+0x38aa>
 8012490:	1152aaa4 	.word	0x1152aaa4
 8012494:	00000000 	.word	0x00000000
 8012498:	2f16ac6c 	.word	0x2f16ac6c
 801249c:	1152aaa4 	.word	0x1152aaa4
 80124a0:	2f16ac6c 	.word	0x2f16ac6c
 80124a4:	00000000 	.word	0x00000000
 80124a8:	2200      	movs	r2, #0
 80124aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124ae:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80124b2:	601a      	str	r2, [r3, #0]
 80124b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124b8:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 80124bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124c0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80124c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124cc:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80124d0:	2300      	movs	r3, #0
 80124d2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80124d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80124d8:	f04f 0300 	mov.w	r3, #0
 80124dc:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 80124e0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80124e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80124e8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	0fdb      	lsrs	r3, r3, #31
 80124f0:	b2da      	uxtb	r2, r3
 80124f2:	2300      	movs	r3, #0
 80124f4:	4053      	eors	r3, r2
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d010      	beq.n	801251e <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 80124fc:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8012500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012504:	2100      	movs	r1, #0
 8012506:	f1d2 0001 	rsbs	r0, r2, #1
 801250a:	65b8      	str	r0, [r7, #88]	; 0x58
 801250c:	eb61 0303 	sbc.w	r3, r1, r3
 8012510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012512:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8012516:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 801251a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801251e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012522:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	17da      	asrs	r2, r3, #31
 801252a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 801252e:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8012532:	a3bd      	add	r3, pc, #756	; (adr r3, 8012828 <arm_softmax_s8+0x3c28>)
 8012534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012538:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 801253c:	fb02 f001 	mul.w	r0, r2, r1
 8012540:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8012544:	fb01 f103 	mul.w	r1, r1, r3
 8012548:	4401      	add	r1, r0
 801254a:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 801254e:	fba0 2302 	umull	r2, r3, r0, r2
 8012552:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8012556:	4613      	mov	r3, r2
 8012558:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 801255c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8012560:	18cb      	adds	r3, r1, r3
 8012562:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8012566:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256e:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8012572:	1851      	adds	r1, r2, r1
 8012574:	6539      	str	r1, [r7, #80]	; 0x50
 8012576:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 801257a:	414b      	adcs	r3, r1
 801257c:	657b      	str	r3, [r7, #84]	; 0x54
 801257e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8012582:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8012586:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801258a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012592:	2b00      	cmp	r3, #0
 8012594:	da08      	bge.n	80125a8 <arm_softmax_s8+0x39a8>
 8012596:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801259a:	1851      	adds	r1, r2, r1
 801259c:	64b9      	str	r1, [r7, #72]	; 0x48
 801259e:	f143 0300 	adc.w	r3, r3, #0
 80125a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80125a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80125a8:	f04f 0000 	mov.w	r0, #0
 80125ac:	f04f 0100 	mov.w	r1, #0
 80125b0:	0fd0      	lsrs	r0, r2, #31
 80125b2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80125b6:	17d9      	asrs	r1, r3, #31
 80125b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125bc:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80125c0:	4603      	mov	r3, r0
 80125c2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80125c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125c8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80125cc:	681a      	ldr	r2, [r3, #0]
 80125ce:	4b94      	ldr	r3, [pc, #592]	; (8012820 <arm_softmax_s8+0x3c20>)
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d10e      	bne.n	80125f2 <arm_softmax_s8+0x39f2>
 80125d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125d8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80125e2:	d106      	bne.n	80125f2 <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 80125e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125e8:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80125ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80125f0:	6013      	str	r3, [r2, #0]
    return result;
 80125f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80125f6:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80125fa:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80125fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012600:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	ea02 0003 	and.w	r0, r2, r3
 801260a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801260e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	43da      	mvns	r2, r3
 8012616:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801261a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	ea02 0103 	and.w	r1, r2, r3
 8012624:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012628:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801262c:	ea80 0301 	eor.w	r3, r0, r1
 8012630:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8012632:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012636:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 801263a:	6819      	ldr	r1, [r3, #0]
 801263c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012640:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012644:	1c4b      	adds	r3, r1, #1
 8012646:	6013      	str	r3, [r2, #0]
 8012648:	2301      	movs	r3, #1
 801264a:	fa03 f201 	lsl.w	r2, r3, r1
 801264e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012652:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	4013      	ands	r3, r2
 801265a:	2b00      	cmp	r3, #0
 801265c:	d002      	beq.n	8012664 <arm_softmax_s8+0x3a64>
 801265e:	f04f 32ff 	mov.w	r2, #4294967295
 8012662:	e000      	b.n	8012666 <arm_softmax_s8+0x3a66>
 8012664:	2200      	movs	r2, #0
 8012666:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801266a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801266e:	601a      	str	r2, [r3, #0]
 8012670:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012674:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8012678:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801267c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012684:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012688:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801268c:	2300      	movs	r3, #0
 801268e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012690:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012694:	f04f 0300 	mov.w	r3, #0
 8012698:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 801269c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80126a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80126a4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	0fdb      	lsrs	r3, r3, #31
 80126ac:	b2da      	uxtb	r2, r3
 80126ae:	2300      	movs	r3, #0
 80126b0:	4053      	eors	r3, r2
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d010      	beq.n	80126da <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 80126b8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 80126bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c0:	2100      	movs	r1, #0
 80126c2:	f1d2 0001 	rsbs	r0, r2, #1
 80126c6:	6438      	str	r0, [r7, #64]	; 0x40
 80126c8:	eb61 0303 	sbc.w	r3, r1, r3
 80126cc:	647b      	str	r3, [r7, #68]	; 0x44
 80126ce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80126d2:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 80126d6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80126da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80126de:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	17da      	asrs	r2, r3, #31
 80126e6:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80126ea:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 80126ee:	4a4d      	ldr	r2, [pc, #308]	; (8012824 <arm_softmax_s8+0x3c24>)
 80126f0:	f04f 0300 	mov.w	r3, #0
 80126f4:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 80126f8:	fb02 f001 	mul.w	r0, r2, r1
 80126fc:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8012700:	fb01 f103 	mul.w	r1, r1, r3
 8012704:	4401      	add	r1, r0
 8012706:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 801270a:	fba0 2302 	umull	r2, r3, r0, r2
 801270e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8012712:	4613      	mov	r3, r2
 8012714:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8012718:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 801271c:	18cb      	adds	r3, r1, r3
 801271e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8012722:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8012726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272a:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 801272e:	1851      	adds	r1, r2, r1
 8012730:	63b9      	str	r1, [r7, #56]	; 0x38
 8012732:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8012736:	414b      	adcs	r3, r1
 8012738:	63fb      	str	r3, [r7, #60]	; 0x3c
 801273a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801273e:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8012742:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012746:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274e:	2b00      	cmp	r3, #0
 8012750:	da08      	bge.n	8012764 <arm_softmax_s8+0x3b64>
 8012752:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012756:	1851      	adds	r1, r2, r1
 8012758:	6339      	str	r1, [r7, #48]	; 0x30
 801275a:	f143 0300 	adc.w	r3, r3, #0
 801275e:	637b      	str	r3, [r7, #52]	; 0x34
 8012760:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8012764:	f04f 0000 	mov.w	r0, #0
 8012768:	f04f 0100 	mov.w	r1, #0
 801276c:	0fd0      	lsrs	r0, r2, #31
 801276e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012772:	17d9      	asrs	r1, r3, #31
 8012774:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012778:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801277c:	4603      	mov	r3, r0
 801277e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012780:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012784:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012788:	681a      	ldr	r2, [r3, #0]
 801278a:	4b26      	ldr	r3, [pc, #152]	; (8012824 <arm_softmax_s8+0x3c24>)
 801278c:	429a      	cmp	r2, r3
 801278e:	d10e      	bne.n	80127ae <arm_softmax_s8+0x3bae>
 8012790:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012794:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801279e:	d106      	bne.n	80127ae <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 80127a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127a4:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80127a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80127ac:	6013      	str	r3, [r2, #0]
    return result;
 80127ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127b2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80127b6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80127b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127bc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	ea02 0003 	and.w	r0, r2, r3
 80127c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127ca:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	43da      	mvns	r2, r3
 80127d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127d6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	ea02 0103 	and.w	r1, r2, r3
 80127e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127e4:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80127e8:	ea80 0301 	eor.w	r3, r0, r1
 80127ec:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80127ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127f2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80127f6:	6819      	ldr	r1, [r3, #0]
 80127f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80127fc:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8012800:	1c4b      	adds	r3, r1, #1
 8012802:	6013      	str	r3, [r2, #0]
 8012804:	2301      	movs	r3, #1
 8012806:	fa03 f201 	lsl.w	r2, r3, r1
 801280a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801280e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4013      	ands	r3, r2
 8012816:	2b00      	cmp	r3, #0
 8012818:	d00a      	beq.n	8012830 <arm_softmax_s8+0x3c30>
 801281a:	f04f 32ff 	mov.w	r2, #4294967295
 801281e:	e008      	b.n	8012832 <arm_softmax_s8+0x3c32>
 8012820:	02582ab7 	.word	0x02582ab7
 8012824:	000afe11 	.word	0x000afe11
 8012828:	02582ab7 	.word	0x02582ab7
 801282c:	00000000 	.word	0x00000000
 8012830:	2200      	movs	r2, #0
 8012832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012836:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801283a:	601a      	str	r2, [r3, #0]
 801283c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012840:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8012844:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012848:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012850:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012854:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8012858:	2300      	movs	r3, #0
 801285a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801285c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012860:	f04f 0300 	mov.w	r3, #0
 8012864:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8012868:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801286c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012870:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	0fdb      	lsrs	r3, r3, #31
 8012878:	b2da      	uxtb	r2, r3
 801287a:	2300      	movs	r3, #0
 801287c:	4053      	eors	r3, r2
 801287e:	b2db      	uxtb	r3, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	d010      	beq.n	80128a6 <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 8012884:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8012888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288c:	2100      	movs	r1, #0
 801288e:	f1d2 0001 	rsbs	r0, r2, #1
 8012892:	62b8      	str	r0, [r7, #40]	; 0x28
 8012894:	eb61 0303 	sbc.w	r3, r1, r3
 8012898:	62fb      	str	r3, [r7, #44]	; 0x2c
 801289a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801289e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80128a2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80128a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80128aa:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	17da      	asrs	r2, r3, #31
 80128b2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80128b6:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80128ba:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80128be:	f04f 0300 	mov.w	r3, #0
 80128c2:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 80128c6:	fb02 f001 	mul.w	r0, r2, r1
 80128ca:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 80128ce:	fb01 f103 	mul.w	r1, r1, r3
 80128d2:	4401      	add	r1, r0
 80128d4:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80128d8:	fba0 2302 	umull	r2, r3, r0, r2
 80128dc:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80128e0:	4613      	mov	r3, r2
 80128e2:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80128e6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80128ea:	18cb      	adds	r3, r1, r3
 80128ec:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80128f0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80128f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f8:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 80128fc:	1851      	adds	r1, r2, r1
 80128fe:	6239      	str	r1, [r7, #32]
 8012900:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 8012904:	414b      	adcs	r3, r1
 8012906:	627b      	str	r3, [r7, #36]	; 0x24
 8012908:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801290c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8012910:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012914:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8012918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291c:	2b00      	cmp	r3, #0
 801291e:	da08      	bge.n	8012932 <arm_softmax_s8+0x3d32>
 8012920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012924:	1851      	adds	r1, r2, r1
 8012926:	61b9      	str	r1, [r7, #24]
 8012928:	f143 0300 	adc.w	r3, r3, #0
 801292c:	61fb      	str	r3, [r7, #28]
 801292e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012932:	f04f 0000 	mov.w	r0, #0
 8012936:	f04f 0100 	mov.w	r1, #0
 801293a:	0fd0      	lsrs	r0, r2, #31
 801293c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012940:	17d9      	asrs	r1, r3, #31
 8012942:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012946:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801294a:	4603      	mov	r3, r0
 801294c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801294e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012952:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	2bf2      	cmp	r3, #242	; 0xf2
 801295a:	d10e      	bne.n	801297a <arm_softmax_s8+0x3d7a>
 801295c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012960:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801296a:	d106      	bne.n	801297a <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 801296c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012970:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8012974:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012978:	6013      	str	r3, [r2, #0]
    return result;
 801297a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801297e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8012982:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8012984:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012988:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	ea02 0003 	and.w	r0, r2, r3
 8012992:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012996:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	43da      	mvns	r2, r3
 801299e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129a2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	ea02 0103 	and.w	r1, r2, r3
 80129ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129b0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80129b4:	ea80 0301 	eor.w	r3, r0, r1
 80129b8:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 80129ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129be:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d102      	bne.n	80129ce <arm_softmax_s8+0x3dce>
 80129c8:	f04f 32ff 	mov.w	r2, #4294967295
 80129cc:	e000      	b.n	80129d0 <arm_softmax_s8+0x3dd0>
 80129ce:	2200      	movs	r2, #0
 80129d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129d4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80129d8:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80129da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129de:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80129e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129ec:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	43da      	mvns	r2, r3
 80129f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80129f8:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	4013      	ands	r3, r2
 8012a00:	4059      	eors	r1, r3
 8012a02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a06:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8012a0a:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 8012a0e:	6013      	str	r3, [r2, #0]
 8012a10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a14:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012a18:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8012a1a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a1e:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8012a22:	2300      	movs	r3, #0
 8012a24:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8012a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012a2a:	f04f 0300 	mov.w	r3, #0
 8012a2e:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8012a32:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8012a36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a3a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	0fdb      	lsrs	r3, r3, #31
 8012a42:	b2da      	uxtb	r2, r3
 8012a44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a48:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	0fdb      	lsrs	r3, r3, #31
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	4053      	eors	r3, r2
 8012a54:	b2db      	uxtb	r3, r3
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d010      	beq.n	8012a7c <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 8012a5a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8012a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a62:	2100      	movs	r1, #0
 8012a64:	f1d2 0001 	rsbs	r0, r2, #1
 8012a68:	6138      	str	r0, [r7, #16]
 8012a6a:	eb61 0303 	sbc.w	r3, r1, r3
 8012a6e:	617b      	str	r3, [r7, #20]
 8012a70:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012a74:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8012a78:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8012a7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a80:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	17da      	asrs	r2, r3, #31
 8012a88:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8012a8c:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8012a90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012a94:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	17da      	asrs	r2, r3, #31
 8012a9c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8012aa0:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 8012aa4:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8012aa8:	460b      	mov	r3, r1
 8012aaa:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8012aae:	fb02 f203 	mul.w	r2, r2, r3
 8012ab2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8012ab6:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8012aba:	4601      	mov	r1, r0
 8012abc:	fb01 f303 	mul.w	r3, r1, r3
 8012ac0:	4413      	add	r3, r2
 8012ac2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8012ac6:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8012aca:	fba2 1201 	umull	r1, r2, r2, r1
 8012ace:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 8012ad2:	460a      	mov	r2, r1
 8012ad4:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 8012ad8:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 8012adc:	4413      	add	r3, r2
 8012ade:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8012ae2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8012ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aea:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 8012aee:	1851      	adds	r1, r2, r1
 8012af0:	60b9      	str	r1, [r7, #8]
 8012af2:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8012af6:	414b      	adcs	r3, r1
 8012af8:	60fb      	str	r3, [r7, #12]
 8012afa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8012afe:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8012b02:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8012b06:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8012b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	da08      	bge.n	8012b24 <arm_softmax_s8+0x3f24>
 8012b12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b16:	1851      	adds	r1, r2, r1
 8012b18:	6039      	str	r1, [r7, #0]
 8012b1a:	f143 0300 	adc.w	r3, r3, #0
 8012b1e:	607b      	str	r3, [r7, #4]
 8012b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b24:	f04f 0000 	mov.w	r0, #0
 8012b28:	f04f 0100 	mov.w	r1, #0
 8012b2c:	0fd0      	lsrs	r0, r2, #31
 8012b2e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012b32:	17d9      	asrs	r1, r3, #31
 8012b34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b38:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8012b40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b44:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8012b48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b4c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012b50:	6812      	ldr	r2, [r2, #0]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d10e      	bne.n	8012b76 <arm_softmax_s8+0x3f76>
 8012b58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b5c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b66:	d106      	bne.n	8012b76 <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8012b68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b6c:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8012b70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012b74:	6013      	str	r3, [r2, #0]
    return result;
 8012b76:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b7a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b84:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8012b88:	601a      	str	r2, [r3, #0]
 8012b8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b8e:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 8012b92:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 8012b96:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012b98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012b9c:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012ba4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ba8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012bac:	2201      	movs	r2, #1
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	fa02 f103 	lsl.w	r1, r2, r3
 8012bb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bb8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8012bbc:	1e4b      	subs	r3, r1, #1
 8012bbe:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8012bc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bc4:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8012bc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bcc:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8012bd0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bd4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012bd8:	6812      	ldr	r2, [r2, #0]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	4013      	ands	r3, r2
 8012bde:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8012be0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012be4:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8012be8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bec:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8012bf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012bf4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012bf8:	6812      	ldr	r2, [r2, #0]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	fa42 f303 	asr.w	r3, r2, r3
 8012c00:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8012c02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c06:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8012c0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c0e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	105b      	asrs	r3, r3, #1
 8012c16:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8012c18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c1c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	da0a      	bge.n	8012c3c <arm_softmax_s8+0x403c>
        threshold++;
 8012c26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c2a:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8012c2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c32:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	3301      	adds	r3, #1
 8012c3a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8012c3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c40:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8012c44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c48:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8012c4c:	6812      	ldr	r2, [r2, #0]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	dd0a      	ble.n	8012c6a <arm_softmax_s8+0x406a>
        result++;
 8012c54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c58:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8012c5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c60:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	3301      	adds	r3, #1
 8012c68:	6013      	str	r3, [r2, #0]
    return result;
 8012c6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012c6e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8012c72:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8012c74:	3b80      	subs	r3, #128	; 0x80
 8012c76:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8012c7a:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8012c7e:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8012c82:	db09      	blt.n	8012c98 <arm_softmax_s8+0x4098>
 8012c84:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8012c88:	2b7e      	cmp	r3, #126	; 0x7e
 8012c8a:	dc03      	bgt.n	8012c94 <arm_softmax_s8+0x4094>
 8012c8c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8012c90:	b259      	sxtb	r1, r3
 8012c92:	e003      	b.n	8012c9c <arm_softmax_s8+0x409c>
 8012c94:	217f      	movs	r1, #127	; 0x7f
 8012c96:	e001      	b.n	8012c9c <arm_softmax_s8+0x409c>
 8012c98:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8012c9c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8012ca0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8012ca4:	441a      	add	r2, r3
 8012ca6:	460b      	mov	r3, r1
 8012ca8:	7013      	strb	r3, [r2, #0]
 8012caa:	e006      	b.n	8012cba <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8012cac:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8012cb0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8012cb4:	441a      	add	r2, r3
 8012cb6:	2380      	movs	r3, #128	; 0x80
 8012cb8:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8012cba:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8012cc4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cc8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8012ccc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	f6fe aa71 	blt.w	80111ba <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 8012cd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cdc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8012ce0:	6819      	ldr	r1, [r3, #0]
 8012ce2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012ce6:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8012cea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cee:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	440b      	add	r3, r1
 8012cf6:	6013      	str	r3, [r2, #0]
        output += row_size;
 8012cf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012cfc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8012d06:	4413      	add	r3, r2
 8012d08:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 8012d0c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8012d10:	3301      	adds	r3, #1
 8012d12:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8012d16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8012d1a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8012d1e:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	429a      	cmp	r2, r3
 8012d26:	f6fb af93 	blt.w	800ec50 <arm_softmax_s8+0x50>
    }

#endif
}
 8012d2a:	bf00      	nop
 8012d2c:	bf00      	nop
 8012d2e:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8012d32:	46bd      	mov	sp, r7
 8012d34:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop

08012d3c <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b082      	sub	sp, #8
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	ed87 0a01 	vstr	s0, [r7, #4]
 8012d46:	ed97 0a01 	vldr	s0, [r7, #4]
 8012d4a:	f006 f9fd 	bl	8019148 <log10f>
 8012d4e:	eef0 7a40 	vmov.f32	s15, s0
 8012d52:	eeb0 0a67 	vmov.f32	s0, s15
 8012d56:	3708      	adds	r7, #8
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8012d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	ed87 0b00 	vstr	d0, [r7]
 8012d66:	683c      	ldr	r4, [r7, #0]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8012d6e:	2301      	movs	r3, #1
 8012d70:	461e      	mov	r6, r3
 8012d72:	f04f 32ff 	mov.w	r2, #4294967295
 8012d76:	4b10      	ldr	r3, [pc, #64]	; (8012db8 <_ZSt5isinfd+0x5c>)
 8012d78:	4620      	mov	r0, r4
 8012d7a:	4629      	mov	r1, r5
 8012d7c:	f7ed fee0 	bl	8000b40 <__aeabi_dcmpun>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d10b      	bne.n	8012d9e <_ZSt5isinfd+0x42>
 8012d86:	f04f 32ff 	mov.w	r2, #4294967295
 8012d8a:	4b0b      	ldr	r3, [pc, #44]	; (8012db8 <_ZSt5isinfd+0x5c>)
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	4629      	mov	r1, r5
 8012d90:	f7ed feb8 	bl	8000b04 <__aeabi_dcmple>
 8012d94:	4603      	mov	r3, r0
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d101      	bne.n	8012d9e <_ZSt5isinfd+0x42>
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	461e      	mov	r6, r3
 8012d9e:	b2f3      	uxtb	r3, r6
 8012da0:	f083 0301 	eor.w	r3, r3, #1
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	bf14      	ite	ne
 8012daa:	2301      	movne	r3, #1
 8012dac:	2300      	moveq	r3, #0
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	4618      	mov	r0, r3
 8012db2:	370c      	adds	r7, #12
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012db8:	7fefffff 	.word	0x7fefffff

08012dbc <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8012dbc:	b480      	push	{r7}
 8012dbe:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8012dc0:	2300      	movs	r3, #0
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr

08012dcc <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8012dcc:	b5b0      	push	{r4, r5, r7, lr}
 8012dce:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8012dd0:	f7f2 fb86 	bl	80054e0 <HAL_GetTick>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012dda:	fb02 f303 	mul.w	r3, r2, r3
 8012dde:	2200      	movs	r2, #0
 8012de0:	461c      	mov	r4, r3
 8012de2:	4615      	mov	r5, r2
 8012de4:	4622      	mov	r2, r4
 8012de6:	462b      	mov	r3, r5
}
 8012de8:	4610      	mov	r0, r2
 8012dea:	4619      	mov	r1, r3
 8012dec:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012df0 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8012df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012df4:	b08c      	sub	sp, #48	; 0x30
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8012dfc:	466b      	mov	r3, sp
 8012dfe:	4698      	mov	r8, r3
    float n = f;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8012e04:	4b7e      	ldr	r3, [pc, #504]	; (8013000 <_Z15ei_printf_floatf+0x210>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	1e5e      	subs	r6, r3, #1
 8012e0a:	623e      	str	r6, [r7, #32]
 8012e0c:	4633      	mov	r3, r6
 8012e0e:	3301      	adds	r3, #1
 8012e10:	2200      	movs	r2, #0
 8012e12:	461c      	mov	r4, r3
 8012e14:	4615      	mov	r5, r2
 8012e16:	f04f 0200 	mov.w	r2, #0
 8012e1a:	f04f 0300 	mov.w	r3, #0
 8012e1e:	00eb      	lsls	r3, r5, #3
 8012e20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012e24:	00e2      	lsls	r2, r4, #3
 8012e26:	4633      	mov	r3, r6
 8012e28:	3301      	adds	r3, #1
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	4611      	mov	r1, r2
 8012e30:	f04f 0200 	mov.w	r2, #0
 8012e34:	f04f 0300 	mov.w	r3, #0
 8012e38:	00cb      	lsls	r3, r1, #3
 8012e3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8012e3e:	00c2      	lsls	r2, r0, #3
 8012e40:	4633      	mov	r3, r6
 8012e42:	3301      	adds	r3, #1
 8012e44:	3307      	adds	r3, #7
 8012e46:	08db      	lsrs	r3, r3, #3
 8012e48:	00db      	lsls	r3, r3, #3
 8012e4a:	ebad 0d03 	sub.w	sp, sp, r3
 8012e4e:	466b      	mov	r3, sp
 8012e50:	3300      	adds	r3, #0
 8012e52:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8012e54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012e58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e60:	d106      	bne.n	8012e70 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	4967      	ldr	r1, [pc, #412]	; (8013004 <_Z15ei_printf_floatf+0x214>)
 8012e66:	461a      	mov	r2, r3
 8012e68:	460b      	mov	r3, r1
 8012e6a:	881b      	ldrh	r3, [r3, #0]
 8012e6c:	8013      	strh	r3, [r2, #0]
 8012e6e:	e0b6      	b.n	8012fde <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8012e70:	69fb      	ldr	r3, [r7, #28]
 8012e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8012e74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e80:	bf4c      	ite	mi
 8012e82:	2301      	movmi	r3, #1
 8012e84:	2300      	movpl	r3, #0
 8012e86:	b2db      	uxtb	r3, r3
 8012e88:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d005      	beq.n	8012e9c <_Z15ei_printf_floatf+0xac>
            n = -n;
 8012e90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012e94:	eef1 7a67 	vneg.f32	s15, s15
 8012e98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8012e9c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8012ea0:	f7ff ff4c 	bl	8012d3c <_ZSt5log10f>
 8012ea4:	eef0 7a40 	vmov.f32	s15, s0
 8012ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012eac:	ee17 3a90 	vmov	r3, s15
 8012eb0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d004      	beq.n	8012ec2 <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8012eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eba:	1c5a      	adds	r2, r3, #1
 8012ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012ebe:	222d      	movs	r2, #45	; 0x2d
 8012ec0:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8012ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dc01      	bgt.n	8012ecc <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8012ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ece:	f7ed fb45 	bl	800055c <__aeabi_f2d>
 8012ed2:	4b4d      	ldr	r3, [pc, #308]	; (8013008 <_Z15ei_printf_floatf+0x218>)
 8012ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed8:	2401      	movs	r4, #1
 8012eda:	f7ed fe27 	bl	8000b2c <__aeabi_dcmpgt>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d101      	bne.n	8012ee8 <_Z15ei_printf_floatf+0xf8>
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	461c      	mov	r4, r3
 8012ee8:	b2e3      	uxtb	r3, r4
 8012eea:	f083 0301 	eor.w	r3, r3, #1
 8012eee:	b2db      	uxtb	r3, r3
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d002      	beq.n	8012efa <_Z15ei_printf_floatf+0x10a>
 8012ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	db6e      	blt.n	8012fd8 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8012efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012efc:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8012ff8 <_Z15ei_printf_floatf+0x208>
 8012f00:	f000 f89f 	bl	8013042 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8012f04:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8012f08:	f04f 0200 	mov.w	r2, #0
 8012f0c:	f04f 0300 	mov.w	r3, #0
 8012f10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012f14:	f7ed fe0a 	bl	8000b2c <__aeabi_dcmpgt>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d00b      	beq.n	8012f36 <_Z15ei_printf_floatf+0x146>
 8012f1e:	ed97 0b04 	vldr	d0, [r7, #16]
 8012f22:	f7ff ff1b 	bl	8012d5c <_ZSt5isinfd>
 8012f26:	4603      	mov	r3, r0
 8012f28:	f083 0301 	eor.w	r3, r3, #1
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d001      	beq.n	8012f36 <_Z15ei_printf_floatf+0x146>
 8012f32:	2301      	movs	r3, #1
 8012f34:	e000      	b.n	8012f38 <_Z15ei_printf_floatf+0x148>
 8012f36:	2300      	movs	r3, #0
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d03a      	beq.n	8012fb2 <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8012f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f3e:	f7ed fb0d 	bl	800055c <__aeabi_f2d>
 8012f42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012f46:	f7ed fc8b 	bl	8000860 <__aeabi_ddiv>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	460b      	mov	r3, r1
 8012f4e:	ec43 2b17 	vmov	d7, r2, r3
 8012f52:	eeb0 0a47 	vmov.f32	s0, s14
 8012f56:	eef0 0a67 	vmov.f32	s1, s15
 8012f5a:	f005 ff2d 	bl	8018db8 <floor>
 8012f5e:	ec53 2b10 	vmov	r2, r3, d0
 8012f62:	4610      	mov	r0, r2
 8012f64:	4619      	mov	r1, r3
 8012f66:	f7ed fe01 	bl	8000b6c <__aeabi_d2iz>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8012f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f70:	f7ed faf4 	bl	800055c <__aeabi_f2d>
 8012f74:	4604      	mov	r4, r0
 8012f76:	460d      	mov	r5, r1
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f7ed fadd 	bl	8000538 <__aeabi_i2d>
 8012f7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012f82:	f7ed fb43 	bl	800060c <__aeabi_dmul>
 8012f86:	4602      	mov	r2, r0
 8012f88:	460b      	mov	r3, r1
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	4629      	mov	r1, r5
 8012f8e:	f7ed f985 	bl	800029c <__aeabi_dsub>
 8012f92:	4602      	mov	r2, r0
 8012f94:	460b      	mov	r3, r1
 8012f96:	4610      	mov	r0, r2
 8012f98:	4619      	mov	r1, r3
 8012f9a:	f7ed fe2f 	bl	8000bfc <__aeabi_d2f>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	b2da      	uxtb	r2, r3
 8012fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa8:	1c59      	adds	r1, r3, #1
 8012faa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012fac:	3230      	adds	r2, #48	; 0x30
 8012fae:	b2d2      	uxtb	r2, r2
 8012fb0:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8012fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d10b      	bne.n	8012fd0 <_Z15ei_printf_floatf+0x1e0>
 8012fb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc4:	dd04      	ble.n	8012fd0 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 8012fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc8:	1c5a      	adds	r2, r3, #1
 8012fca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012fcc:	222e      	movs	r2, #46	; 0x2e
 8012fce:	701a      	strb	r2, [r3, #0]
            m--;
 8012fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd2:	3b01      	subs	r3, #1
 8012fd4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8012fd6:	e779      	b.n	8012ecc <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 8012fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fda:	2200      	movs	r2, #0
 8012fdc:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8012fde:	69f9      	ldr	r1, [r7, #28]
 8012fe0:	480a      	ldr	r0, [pc, #40]	; (801300c <_Z15ei_printf_floatf+0x21c>)
 8012fe2:	f7f0 ff23 	bl	8003e2c <_Z9ei_printfPKcz>
 8012fe6:	46c5      	mov	sp, r8
}
 8012fe8:	bf00      	nop
 8012fea:	3730      	adds	r7, #48	; 0x30
 8012fec:	46bd      	mov	sp, r7
 8012fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ff2:	bf00      	nop
 8012ff4:	f3af 8000 	nop.w
 8012ff8:	00000000 	.word	0x00000000
 8012ffc:	40240000 	.word	0x40240000
 8013000:	200000e8 	.word	0x200000e8
 8013004:	0801c360 	.word	0x0801c360
 8013008:	200000e0 	.word	0x200000e0
 801300c:	0801c364 	.word	0x0801c364

08013010 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 801301a:	6839      	ldr	r1, [r7, #0]
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f007 f9ff 	bl	801a420 <calloc>
 8013022:	4603      	mov	r3, r0
}
 8013024:	4618      	mov	r0, r3
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}

0801302c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 801302c:	b580      	push	{r7, lr}
 801302e:	b082      	sub	sp, #8
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
    free(ptr);
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f007 fa43 	bl	801a4c0 <free>
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8013042:	b580      	push	{r7, lr}
 8013044:	b084      	sub	sp, #16
 8013046:	af00      	add	r7, sp, #0
 8013048:	ed87 0b02 	vstr	d0, [r7, #8]
 801304c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f7ed fa72 	bl	8000538 <__aeabi_i2d>
 8013054:	4602      	mov	r2, r0
 8013056:	460b      	mov	r3, r1
 8013058:	ec43 2b11 	vmov	d1, r2, r3
 801305c:	ed97 0b02 	vldr	d0, [r7, #8]
 8013060:	f005 ffcc 	bl	8018ffc <pow>
 8013064:	eeb0 7a40 	vmov.f32	s14, s0
 8013068:	eef0 7a60 	vmov.f32	s15, s1
    }
 801306c:	eeb0 0a47 	vmov.f32	s0, s14
 8013070:	eef0 0a67 	vmov.f32	s1, s15
 8013074:	3710      	adds	r7, #16
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
	...

0801307c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801307c:	b480      	push	{r7}
 801307e:	b083      	sub	sp, #12
 8013080:	af00      	add	r7, sp, #0
 8013082:	4603      	mov	r3, r0
 8013084:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8013086:	79fb      	ldrb	r3, [r7, #7]
 8013088:	2b10      	cmp	r3, #16
 801308a:	d847      	bhi.n	801311c <TfLiteTypeGetName+0xa0>
 801308c:	a201      	add	r2, pc, #4	; (adr r2, 8013094 <TfLiteTypeGetName+0x18>)
 801308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013092:	bf00      	nop
 8013094:	080130d9 	.word	0x080130d9
 8013098:	080130dd 	.word	0x080130dd
 801309c:	080130e5 	.word	0x080130e5
 80130a0:	080130ed 	.word	0x080130ed
 80130a4:	080130f5 	.word	0x080130f5
 80130a8:	08013109 	.word	0x08013109
 80130ac:	080130fd 	.word	0x080130fd
 80130b0:	080130e1 	.word	0x080130e1
 80130b4:	08013101 	.word	0x08013101
 80130b8:	080130f1 	.word	0x080130f1
 80130bc:	0801310d 	.word	0x0801310d
 80130c0:	08013111 	.word	0x08013111
 80130c4:	08013105 	.word	0x08013105
 80130c8:	080130f9 	.word	0x080130f9
 80130cc:	08013115 	.word	0x08013115
 80130d0:	08013119 	.word	0x08013119
 80130d4:	080130e9 	.word	0x080130e9
    case kTfLiteNoType:
      return "NOTYPE";
 80130d8:	4b14      	ldr	r3, [pc, #80]	; (801312c <TfLiteTypeGetName+0xb0>)
 80130da:	e020      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 80130dc:	4b14      	ldr	r3, [pc, #80]	; (8013130 <TfLiteTypeGetName+0xb4>)
 80130de:	e01e      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 80130e0:	4b14      	ldr	r3, [pc, #80]	; (8013134 <TfLiteTypeGetName+0xb8>)
 80130e2:	e01c      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 80130e4:	4b14      	ldr	r3, [pc, #80]	; (8013138 <TfLiteTypeGetName+0xbc>)
 80130e6:	e01a      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 80130e8:	4b14      	ldr	r3, [pc, #80]	; (801313c <TfLiteTypeGetName+0xc0>)
 80130ea:	e018      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 80130ec:	4b14      	ldr	r3, [pc, #80]	; (8013140 <TfLiteTypeGetName+0xc4>)
 80130ee:	e016      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 80130f0:	4b14      	ldr	r3, [pc, #80]	; (8013144 <TfLiteTypeGetName+0xc8>)
 80130f2:	e014      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 80130f4:	4b14      	ldr	r3, [pc, #80]	; (8013148 <TfLiteTypeGetName+0xcc>)
 80130f6:	e012      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 80130f8:	4b14      	ldr	r3, [pc, #80]	; (801314c <TfLiteTypeGetName+0xd0>)
 80130fa:	e010      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 80130fc:	4b14      	ldr	r3, [pc, #80]	; (8013150 <TfLiteTypeGetName+0xd4>)
 80130fe:	e00e      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8013100:	4b14      	ldr	r3, [pc, #80]	; (8013154 <TfLiteTypeGetName+0xd8>)
 8013102:	e00c      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8013104:	4b14      	ldr	r3, [pc, #80]	; (8013158 <TfLiteTypeGetName+0xdc>)
 8013106:	e00a      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8013108:	4b14      	ldr	r3, [pc, #80]	; (801315c <TfLiteTypeGetName+0xe0>)
 801310a:	e008      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801310c:	4b14      	ldr	r3, [pc, #80]	; (8013160 <TfLiteTypeGetName+0xe4>)
 801310e:	e006      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8013110:	4b14      	ldr	r3, [pc, #80]	; (8013164 <TfLiteTypeGetName+0xe8>)
 8013112:	e004      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8013114:	4b14      	ldr	r3, [pc, #80]	; (8013168 <TfLiteTypeGetName+0xec>)
 8013116:	e002      	b.n	801311e <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8013118:	4b14      	ldr	r3, [pc, #80]	; (801316c <TfLiteTypeGetName+0xf0>)
 801311a:	e000      	b.n	801311e <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801311c:	4b14      	ldr	r3, [pc, #80]	; (8013170 <TfLiteTypeGetName+0xf4>)
}
 801311e:	4618      	mov	r0, r3
 8013120:	370c      	adds	r7, #12
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr
 801312a:	bf00      	nop
 801312c:	0801c368 	.word	0x0801c368
 8013130:	0801c370 	.word	0x0801c370
 8013134:	0801c378 	.word	0x0801c378
 8013138:	0801c380 	.word	0x0801c380
 801313c:	0801c388 	.word	0x0801c388
 8013140:	0801c390 	.word	0x0801c390
 8013144:	0801c398 	.word	0x0801c398
 8013148:	0801c3a0 	.word	0x0801c3a0
 801314c:	0801c3a8 	.word	0x0801c3a8
 8013150:	0801c3b0 	.word	0x0801c3b0
 8013154:	0801c3b8 	.word	0x0801c3b8
 8013158:	0801c3c4 	.word	0x0801c3c4
 801315c:	0801c3d0 	.word	0x0801c3d0
 8013160:	0801c3d8 	.word	0x0801c3d8
 8013164:	0801c3e0 	.word	0x0801c3e0
 8013168:	0801c3e8 	.word	0x0801c3e8
 801316c:	0801c3f4 	.word	0x0801c3f4
 8013170:	0801c3fc 	.word	0x0801c3fc

08013174 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8013174:	b480      	push	{r7}
 8013176:	af00      	add	r7, sp, #0
 8013178:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801317c:	4618      	mov	r0, r3
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr
	...

08013188 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8013188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801318c:	b088      	sub	sp, #32
 801318e:	af00      	add	r7, sp, #0
 8013190:	ed87 0b02 	vstr	d0, [r7, #8]
 8013194:	6078      	str	r0, [r7, #4]
 8013196:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8013198:	f04f 0200 	mov.w	r2, #0
 801319c:	f04f 0300 	mov.w	r3, #0
 80131a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80131a4:	f7ed fc9a 	bl	8000adc <__aeabi_dcmpeq>
 80131a8:	4603      	mov	r3, r0
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d006      	beq.n	80131bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2200      	movs	r2, #0
 80131b2:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	2200      	movs	r2, #0
 80131b8:	601a      	str	r2, [r3, #0]
    return;
 80131ba:	e068      	b.n	801328e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80131bc:	6838      	ldr	r0, [r7, #0]
 80131be:	ed97 0b02 	vldr	d0, [r7, #8]
 80131c2:	f005 fe79 	bl	8018eb8 <frexp>
 80131c6:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 80131ca:	f04f 0200 	mov.w	r2, #0
 80131ce:	4b32      	ldr	r3, [pc, #200]	; (8013298 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 80131d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80131d4:	f7ed fa1a 	bl	800060c <__aeabi_dmul>
 80131d8:	4602      	mov	r2, r0
 80131da:	460b      	mov	r3, r1
 80131dc:	ec43 2b17 	vmov	d7, r2, r3
 80131e0:	eeb0 0a47 	vmov.f32	s0, s14
 80131e4:	eef0 0a67 	vmov.f32	s1, s15
 80131e8:	f000 f962 	bl	80134b0 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80131ec:	ec53 2b10 	vmov	r2, r3, d0
 80131f0:	4610      	mov	r0, r2
 80131f2:	4619      	mov	r1, r3
 80131f4:	f7ed fdba 	bl	8000d6c <__aeabi_d2lz>
 80131f8:	4602      	mov	r2, r0
 80131fa:	460b      	mov	r3, r1
 80131fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8013200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013204:	4925      	ldr	r1, [pc, #148]	; (801329c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8013206:	428a      	cmp	r2, r1
 8013208:	f173 0300 	sbcs.w	r3, r3, #0
 801320c:	db01      	blt.n	8013212 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 801320e:	f007 f8e1 	bl	801a3d4 <abort>
  if (q_fixed == (1ll << 31)) {
 8013212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013216:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801321a:	430b      	orrs	r3, r1
 801321c:	d118      	bne.n	8013250 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 801321e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013222:	0fd9      	lsrs	r1, r3, #31
 8013224:	2000      	movs	r0, #0
 8013226:	468a      	mov	sl, r1
 8013228:	4683      	mov	fp, r0
 801322a:	eb1a 0402 	adds.w	r4, sl, r2
 801322e:	eb4b 0503 	adc.w	r5, fp, r3
 8013232:	f04f 0200 	mov.w	r2, #0
 8013236:	f04f 0300 	mov.w	r3, #0
 801323a:	0862      	lsrs	r2, r4, #1
 801323c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8013240:	106b      	asrs	r3, r5, #1
 8013242:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	1c5a      	adds	r2, r3, #1
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8013250:	f7ff ff90 	bl	8013174 <_ZNSt14numeric_limitsIlE3maxEv>
 8013254:	4603      	mov	r3, r0
 8013256:	17da      	asrs	r2, r3, #31
 8013258:	4698      	mov	r8, r3
 801325a:	4691      	mov	r9, r2
 801325c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013260:	4590      	cmp	r8, r2
 8013262:	eb79 0303 	sbcs.w	r3, r9, r3
 8013266:	da01      	bge.n	801326c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8013268:	f007 f8b4 	bl	801a3d4 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f113 0f1f 	cmn.w	r3, #31
 8013274:	da08      	bge.n	8013288 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	2200      	movs	r2, #0
 801327a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801327c:	f04f 0200 	mov.w	r2, #0
 8013280:	f04f 0300 	mov.w	r3, #0
 8013284:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8013288:	69ba      	ldr	r2, [r7, #24]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	601a      	str	r2, [r3, #0]
}
 801328e:	3720      	adds	r7, #32
 8013290:	46bd      	mov	sp, r7
 8013292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013296:	bf00      	nop
 8013298:	41e00000 	.word	0x41e00000
 801329c:	80000001 	.word	0x80000001

080132a0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 80132ae:	f04f 0200 	mov.w	r2, #0
 80132b2:	4b0d      	ldr	r3, [pc, #52]	; (80132e8 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 80132b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80132b8:	f7ed fc38 	bl	8000b2c <__aeabi_dcmpgt>
 80132bc:	4603      	mov	r3, r0
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d101      	bne.n	80132c6 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 80132c2:	f007 f887 	bl	801a3d4 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 80132c6:	6839      	ldr	r1, [r7, #0]
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	ed97 0b02 	vldr	d0, [r7, #8]
 80132ce:	f7ff ff5b 	bl	8013188 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	da01      	bge.n	80132de <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 80132da:	f007 f87b 	bl	801a3d4 <abort>
}
 80132de:	bf00      	nop
 80132e0:	3710      	adds	r7, #16
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	3ff00000 	.word	0x3ff00000

080132ec <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013302:	f7ed fbf5 	bl	8000af0 <__aeabi_dcmplt>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d001      	beq.n	8013310 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	e000      	b.n	8013312 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8013310:	687b      	ldr	r3, [r7, #4]
    }
 8013312:	4618      	mov	r0, r3
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	0000      	movs	r0, r0
 801331c:	0000      	movs	r0, r0
	...

08013320 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8013320:	b5b0      	push	{r4, r5, r7, lr}
 8013322:	b08e      	sub	sp, #56	; 0x38
 8013324:	af00      	add	r7, sp, #0
 8013326:	ed87 0b06 	vstr	d0, [r7, #24]
 801332a:	ed87 1b04 	vstr	d1, [r7, #16]
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8013334:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013338:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801333c:	f7ed f966 	bl	800060c <__aeabi_dmul>
 8013340:	4602      	mov	r2, r0
 8013342:	460b      	mov	r3, r1
 8013344:	4614      	mov	r4, r2
 8013346:	461d      	mov	r5, r3
 8013348:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	fa22 f303 	lsr.w	r3, r2, r3
 8013352:	4618      	mov	r0, r3
 8013354:	f7ed f8f0 	bl	8000538 <__aeabi_i2d>
 8013358:	4602      	mov	r2, r0
 801335a:	460b      	mov	r3, r1
 801335c:	4620      	mov	r0, r4
 801335e:	4629      	mov	r1, r5
 8013360:	f7ed f954 	bl	800060c <__aeabi_dmul>
 8013364:	4602      	mov	r2, r0
 8013366:	460b      	mov	r3, r1
 8013368:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801336c:	a30e      	add	r3, pc, #56	; (adr r3, 80133a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013372:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8013376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801337a:	f107 0320 	add.w	r3, r7, #32
 801337e:	4611      	mov	r1, r2
 8013380:	4618      	mov	r0, r3
 8013382:	f7ff ffb3 	bl	80132ec <_ZSt3minIdERKT_S2_S2_>
 8013386:	4603      	mov	r3, r0
 8013388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801338c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8013390:	6879      	ldr	r1, [r7, #4]
 8013392:	68b8      	ldr	r0, [r7, #8]
 8013394:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8013398:	f7ff ff82 	bl	80132a0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801339c:	bf00      	nop
 801339e:	3738      	adds	r7, #56	; 0x38
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bdb0      	pop	{r4, r5, r7, pc}
 80133a4:	f3af 8000 	nop.w
 80133a8:	ffc00000 	.word	0xffc00000
 80133ac:	41dfffff 	.word	0x41dfffff

080133b0 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 80133b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b4:	b087      	sub	sp, #28
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	60f8      	str	r0, [r7, #12]
 80133ba:	60b9      	str	r1, [r7, #8]
 80133bc:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 80133be:	2201      	movs	r2, #1
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	fa02 f303 	lsl.w	r3, r2, r3
 80133c6:	3b01      	subs	r3, #1
 80133c8:	4618      	mov	r0, r3
 80133ca:	f7ed f8b5 	bl	8000538 <__aeabi_i2d>
 80133ce:	4682      	mov	sl, r0
 80133d0:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	1ad1      	subs	r1, r2, r3
 80133d8:	f04f 0201 	mov.w	r2, #1
 80133dc:	f04f 0300 	mov.w	r3, #0
 80133e0:	f1a1 0620 	sub.w	r6, r1, #32
 80133e4:	f1c1 0020 	rsb	r0, r1, #32
 80133e8:	fa03 f901 	lsl.w	r9, r3, r1
 80133ec:	fa02 f606 	lsl.w	r6, r2, r6
 80133f0:	ea49 0906 	orr.w	r9, r9, r6
 80133f4:	fa22 f000 	lsr.w	r0, r2, r0
 80133f8:	ea49 0900 	orr.w	r9, r9, r0
 80133fc:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8013400:	4640      	mov	r0, r8
 8013402:	4649      	mov	r1, r9
 8013404:	f7ed f8d4 	bl	80005b0 <__aeabi_l2d>
 8013408:	4602      	mov	r2, r0
 801340a:	460b      	mov	r3, r1
 801340c:	4650      	mov	r0, sl
 801340e:	4659      	mov	r1, fp
 8013410:	f7ed f8fc 	bl	800060c <__aeabi_dmul>
 8013414:	4602      	mov	r2, r0
 8013416:	460b      	mov	r3, r1
 8013418:	4690      	mov	r8, r2
 801341a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 801341c:	f04f 0201 	mov.w	r2, #1
 8013420:	f04f 0300 	mov.w	r3, #0
 8013424:	68b9      	ldr	r1, [r7, #8]
 8013426:	f1a1 0620 	sub.w	r6, r1, #32
 801342a:	f1c1 0020 	rsb	r0, r1, #32
 801342e:	fa03 f501 	lsl.w	r5, r3, r1
 8013432:	fa02 f606 	lsl.w	r6, r2, r6
 8013436:	4335      	orrs	r5, r6
 8013438:	fa22 f000 	lsr.w	r0, r2, r0
 801343c:	4305      	orrs	r5, r0
 801343e:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8013442:	4620      	mov	r0, r4
 8013444:	4629      	mov	r1, r5
 8013446:	f7ed f8b3 	bl	80005b0 <__aeabi_l2d>
 801344a:	4602      	mov	r2, r0
 801344c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801344e:	4640      	mov	r0, r8
 8013450:	4649      	mov	r1, r9
 8013452:	f7ed fa05 	bl	8000860 <__aeabi_ddiv>
 8013456:	4602      	mov	r2, r0
 8013458:	460b      	mov	r3, r1
 801345a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801345e:	ed97 0b04 	vldr	d0, [r7, #16]
 8013462:	f005 fca9 	bl	8018db8 <floor>
 8013466:	ec53 2b10 	vmov	r2, r3, d0
 801346a:	4610      	mov	r0, r2
 801346c:	4619      	mov	r1, r3
 801346e:	f7ed fb7d 	bl	8000b6c <__aeabi_d2iz>
 8013472:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8013474:	4618      	mov	r0, r3
 8013476:	371c      	adds	r7, #28
 8013478:	46bd      	mov	sp, r7
 801347a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801347e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801347e:	b480      	push	{r7}
 8013480:	b083      	sub	sp, #12
 8013482:	af00      	add	r7, sp, #0
 8013484:	6078      	str	r0, [r7, #4]
 8013486:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	ed93 7a00 	vldr	s14, [r3]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	edd3 7a00 	vldr	s15, [r3]
 8013494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349c:	d501      	bpl.n	80134a2 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	e000      	b.n	80134a4 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80134a2:	687b      	ldr	r3, [r7, #4]
    }
 80134a4:	4618      	mov	r0, r3
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	ed87 0b00 	vstr	d0, [r7]
 80134ba:	ed97 0b00 	vldr	d0, [r7]
 80134be:	f005 fd33 	bl	8018f28 <round>
 80134c2:	eeb0 7a40 	vmov.f32	s14, s0
 80134c6:	eef0 7a60 	vmov.f32	s15, s1
 80134ca:	eeb0 0a47 	vmov.f32	s0, s14
 80134ce:	eef0 0a67 	vmov.f32	s1, s15
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	ed87 0a01 	vstr	s0, [r7, #4]
 80134e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80134e6:	f7ee f9ad 	bl	8001844 <_ZSt5roundf>
 80134ea:	eef0 7a40 	vmov.f32	s15, s0
 80134ee:	eeb0 0a67 	vmov.f32	s0, s15
 80134f2:	3708      	adds	r7, #8
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 80134f8:	b480      	push	{r7}
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8013500:	4618      	mov	r0, r3
 8013502:	46bd      	mov	sp, r7
 8013504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013508:	4770      	bx	lr

0801350a <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801350a:	b480      	push	{r7}
 801350c:	af00      	add	r7, sp, #0
 801350e:	237f      	movs	r3, #127	; 0x7f
 8013510:	4618      	mov	r0, r3
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr

0801351a <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801351a:	b480      	push	{r7}
 801351c:	af00      	add	r7, sp, #0
 801351e:	2300      	movs	r3, #0
 8013520:	4618      	mov	r0, r3
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr

0801352a <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801352a:	b480      	push	{r7}
 801352c:	af00      	add	r7, sp, #0
 801352e:	23ff      	movs	r3, #255	; 0xff
 8013530:	4618      	mov	r0, r3
 8013532:	46bd      	mov	sp, r7
 8013534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013538:	4770      	bx	lr
	...

0801353c <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 801353c:	b480      	push	{r7}
 801353e:	af00      	add	r7, sp, #0
 8013540:	4b02      	ldr	r3, [pc, #8]	; (801354c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8013542:	4618      	mov	r0, r3
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr
 801354c:	ffff8000 	.word	0xffff8000

08013550 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8013550:	b480      	push	{r7}
 8013552:	af00      	add	r7, sp, #0
 8013554:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013558:	4618      	mov	r0, r3
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr

08013562 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8013562:	b480      	push	{r7}
 8013564:	b083      	sub	sp, #12
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	689b      	ldr	r3, [r3, #8]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	4618      	mov	r0, r3
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr

0801357c <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 801357c:	b480      	push	{r7}
 801357e:	b083      	sub	sp, #12
 8013580:	af00      	add	r7, sp, #0
 8013582:	ed87 0b00 	vstr	d0, [r7]
 8013586:	683a      	ldr	r2, [r7, #0]
 8013588:	6879      	ldr	r1, [r7, #4]
 801358a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801358e:	ec43 2b17 	vmov	d7, r2, r3
 8013592:	eeb0 0a47 	vmov.f32	s0, s14
 8013596:	eef0 0a67 	vmov.f32	s1, s15
 801359a:	370c      	adds	r7, #12
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr

080135a4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	689b      	ldr	r3, [r3, #8]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d005      	beq.n	80135c2 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	689a      	ldr	r2, [r3, #8]
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	019b      	lsls	r3, r3, #6
 80135be:	4413      	add	r3, r2
 80135c0:	e006      	b.n	80135d0 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135c6:	6839      	ldr	r1, [r7, #0]
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	4798      	blx	r3
 80135cc:	4603      	mov	r3, r0
 80135ce:	bf00      	nop
  }
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3708      	adds	r7, #8
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 80135d8:	b480      	push	{r7}
 80135da:	b087      	sub	sp, #28
 80135dc:	af00      	add	r7, sp, #0
 80135de:	60f8      	str	r0, [r7, #12]
 80135e0:	60b9      	str	r1, [r7, #8]
 80135e2:	607a      	str	r2, [r7, #4]
 80135e4:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	db0f      	blt.n	801360c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 80135ec:	68ba      	ldr	r2, [r7, #8]
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	da0b      	bge.n	801360c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	683a      	ldr	r2, [r7, #0]
 80135fa:	4413      	add	r3, r2
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013606:	d001      	beq.n	801360c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	e001      	b.n	8013610 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801360c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013610:	4618      	mov	r0, r3
 8013612:	371c      	adds	r7, #28
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr

0801361c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801361c:	b580      	push	{r7, lr}
 801361e:	b086      	sub	sp, #24
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801362c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8013634:	6879      	ldr	r1, [r7, #4]
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f7ff ffce 	bl	80135d8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801363c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	2b00      	cmp	r3, #0
 8013642:	da01      	bge.n	8013648 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8013644:	2300      	movs	r3, #0
 8013646:	e005      	b.n	8013654 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8013648:	6979      	ldr	r1, [r7, #20]
 801364a:	68f8      	ldr	r0, [r7, #12]
 801364c:	f7ff ffaa 	bl	80135a4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8013650:	4603      	mov	r3, r0
 8013652:	bf00      	nop
}
 8013654:	4618      	mov	r0, r3
 8013656:	3718      	adds	r7, #24
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801365c:	b580      	push	{r7, lr}
 801365e:	b084      	sub	sp, #16
 8013660:	af00      	add	r7, sp, #0
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8013668:	687a      	ldr	r2, [r7, #4]
 801366a:	68b9      	ldr	r1, [r7, #8]
 801366c:	68f8      	ldr	r0, [r7, #12]
 801366e:	f7ff ffd5 	bl	801361c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8013672:	4603      	mov	r3, r0
}
 8013674:	4618      	mov	r0, r3
 8013676:	3710      	adds	r7, #16
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}

0801367c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801367c:	b580      	push	{r7, lr}
 801367e:	b086      	sub	sp, #24
 8013680:	af00      	add	r7, sp, #0
 8013682:	60f8      	str	r0, [r7, #12]
 8013684:	60b9      	str	r1, [r7, #8]
 8013686:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801368c:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8013694:	6879      	ldr	r1, [r7, #4]
 8013696:	68f8      	ldr	r0, [r7, #12]
 8013698:	f7ff ff9e 	bl	80135d8 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801369c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	da01      	bge.n	80136a8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80136a4:	2300      	movs	r3, #0
 80136a6:	e005      	b.n	80136b4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 80136a8:	6979      	ldr	r1, [r7, #20]
 80136aa:	68f8      	ldr	r0, [r7, #12]
 80136ac:	f7ff ff7a 	bl	80135a4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80136b0:	4603      	mov	r3, r0
 80136b2:	bf00      	nop
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3718      	adds	r7, #24
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 80136c8:	687a      	ldr	r2, [r7, #4]
 80136ca:	68b9      	ldr	r1, [r7, #8]
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f7ff ffc5 	bl	801365c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80136d2:	4603      	mov	r3, r0
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3710      	adds	r7, #16
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	0000      	movs	r0, r0
	...

080136e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80136e0:	b5b0      	push	{r4, r5, r7, lr}
 80136e2:	b08e      	sub	sp, #56	; 0x38
 80136e4:	af02      	add	r7, sp, #8
 80136e6:	60f8      	str	r0, [r7, #12]
 80136e8:	60b9      	str	r1, [r7, #8]
 80136ea:	607a      	str	r2, [r7, #4]
 80136ec:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7ec ff32 	bl	800055c <__aeabi_f2d>
 80136f8:	4604      	mov	r4, r0
 80136fa:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	68db      	ldr	r3, [r3, #12]
 8013700:	4618      	mov	r0, r3
 8013702:	f7ec ff2b 	bl	800055c <__aeabi_f2d>
 8013706:	4602      	mov	r2, r0
 8013708:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801370a:	4620      	mov	r0, r4
 801370c:	4629      	mov	r1, r5
 801370e:	f7ec ff7d 	bl	800060c <__aeabi_dmul>
 8013712:	4602      	mov	r2, r0
 8013714:	460b      	mov	r3, r1
 8013716:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d04b      	beq.n	80137b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	68db      	ldr	r3, [r3, #12]
 8013724:	4618      	mov	r0, r3
 8013726:	f7ec ff19 	bl	800055c <__aeabi_f2d>
 801372a:	4602      	mov	r2, r0
 801372c:	460b      	mov	r3, r1
 801372e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8013732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013736:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801373a:	f7ec fdaf 	bl	800029c <__aeabi_dsub>
 801373e:	4602      	mov	r2, r0
 8013740:	460b      	mov	r3, r1
 8013742:	ec43 2b17 	vmov	d7, r2, r3
 8013746:	eeb0 0a47 	vmov.f32	s0, s14
 801374a:	eef0 0a67 	vmov.f32	s1, s15
 801374e:	f7ff ff15 	bl	801357c <_ZSt3absd>
 8013752:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8013756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013758:	68db      	ldr	r3, [r3, #12]
 801375a:	4618      	mov	r0, r3
 801375c:	f7ec fefe 	bl	800055c <__aeabi_f2d>
 8013760:	4602      	mov	r2, r0
 8013762:	460b      	mov	r3, r1
 8013764:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8013768:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801376c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013770:	f7ed f876 	bl	8000860 <__aeabi_ddiv>
 8013774:	4602      	mov	r2, r0
 8013776:	460b      	mov	r3, r1
 8013778:	4610      	mov	r0, r2
 801377a:	4619      	mov	r1, r3
 801377c:	2301      	movs	r3, #1
 801377e:	461c      	mov	r4, r3
 8013780:	a318      	add	r3, pc, #96	; (adr r3, 80137e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8013782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013786:	f7ed f9bd 	bl	8000b04 <__aeabi_dcmple>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d101      	bne.n	8013794 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8013790:	2300      	movs	r3, #0
 8013792:	461c      	mov	r4, r3
 8013794:	b2e3      	uxtb	r3, r4
 8013796:	f083 0301 	eor.w	r3, r3, #1
 801379a:	b2db      	uxtb	r3, r3
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00b      	beq.n	80137b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	695c      	ldr	r4, [r3, #20]
 80137a4:	4b0c      	ldr	r3, [pc, #48]	; (80137d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80137a6:	9300      	str	r3, [sp, #0]
 80137a8:	f44f 73a2 	mov.w	r3, #324	; 0x144
 80137ac:	4a0b      	ldr	r2, [pc, #44]	; (80137dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80137ae:	490c      	ldr	r1, [pc, #48]	; (80137e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80137b0:	68f8      	ldr	r0, [r7, #12]
 80137b2:	47a0      	blx	r4
 80137b4:	2301      	movs	r3, #1
 80137b6:	e009      	b.n	80137cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 80137b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ba:	9300      	str	r3, [sp, #0]
 80137bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	68b9      	ldr	r1, [r7, #8]
 80137c2:	68f8      	ldr	r0, [r7, #12]
 80137c4:	f000 f812 	bl	80137ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 80137c8:	4603      	mov	r3, r0
                                          multiplier);
 80137ca:	bf00      	nop
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3730      	adds	r7, #48	; 0x30
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bdb0      	pop	{r4, r5, r7, pc}
 80137d4:	f3af 8000 	nop.w
 80137d8:	0801c67c 	.word	0x0801c67c
 80137dc:	0801c46c 	.word	0x0801c46c
 80137e0:	0801c568 	.word	0x0801c568
 80137e4:	47ae147b 	.word	0x47ae147b
 80137e8:	3f947ae1 	.word	0x3f947ae1

080137ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80137ec:	b590      	push	{r4, r7, lr}
 80137ee:	b089      	sub	sp, #36	; 0x24
 80137f0:	af02      	add	r7, sp, #8
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
 80137f8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	edd3 7a03 	vldr	s15, [r3, #12]
 8013806:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801380a:	ee17 0a90 	vmov	r0, s15
 801380e:	f7ec fea5 	bl	800055c <__aeabi_f2d>
 8013812:	4602      	mov	r2, r0
 8013814:	460b      	mov	r3, r1
 8013816:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801381a:	2301      	movs	r3, #1
 801381c:	461c      	mov	r4, r3
 801381e:	f04f 0200 	mov.w	r2, #0
 8013822:	f04f 0300 	mov.w	r3, #0
 8013826:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801382a:	f7ed f975 	bl	8000b18 <__aeabi_dcmpge>
 801382e:	4603      	mov	r3, r0
 8013830:	2b00      	cmp	r3, #0
 8013832:	d101      	bne.n	8013838 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8013834:	2300      	movs	r3, #0
 8013836:	461c      	mov	r4, r3
 8013838:	b2e3      	uxtb	r3, r4
 801383a:	f083 0301 	eor.w	r3, r3, #1
 801383e:	b2db      	uxtb	r3, r3
 8013840:	2b00      	cmp	r3, #0
 8013842:	d00b      	beq.n	801385c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	695c      	ldr	r4, [r3, #20]
 8013848:	4b0f      	ldr	r3, [pc, #60]	; (8013888 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	f240 1351 	movw	r3, #337	; 0x151
 8013850:	4a0e      	ldr	r2, [pc, #56]	; (801388c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8013852:	490f      	ldr	r1, [pc, #60]	; (8013890 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8013854:	68f8      	ldr	r0, [r7, #12]
 8013856:	47a0      	blx	r4
 8013858:	2301      	movs	r3, #1
 801385a:	e010      	b.n	801387e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	4618      	mov	r0, r3
 8013862:	f7ec fe7b 	bl	800055c <__aeabi_f2d>
 8013866:	4602      	mov	r2, r0
 8013868:	460b      	mov	r3, r1
 801386a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801386e:	f7ec fff7 	bl	8000860 <__aeabi_ddiv>
 8013872:	4602      	mov	r2, r0
 8013874:	460b      	mov	r3, r1
 8013876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013878:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801387c:	2300      	movs	r3, #0
}
 801387e:	4618      	mov	r0, r3
 8013880:	371c      	adds	r7, #28
 8013882:	46bd      	mov	sp, r7
 8013884:	bd90      	pop	{r4, r7, pc}
 8013886:	bf00      	nop
 8013888:	0801c6a0 	.word	0x0801c6a0
 801388c:	0801c46c 	.word	0x0801c46c
 8013890:	0801c568 	.word	0x0801c568

08013894 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8013894:	b580      	push	{r7, lr}
 8013896:	b082      	sub	sp, #8
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	ed87 0a00 	vstr	s0, [r7]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80138a6:	ed97 7a00 	vldr	s14, [r7]
 80138aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80138ae:	eeb0 0a66 	vmov.f32	s0, s13
 80138b2:	f7ff fe11 	bl	80134d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80138b6:	eef0 7a40 	vmov.f32	s15, s0
 80138ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138be:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80138c6:	4413      	add	r3, r2
  };
 80138c8:	4618      	mov	r0, r3
 80138ca:	3708      	adds	r7, #8
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}

080138d0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b08e      	sub	sp, #56	; 0x38
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	60b9      	str	r1, [r7, #8]
 80138d8:	607a      	str	r2, [r7, #4]
 80138da:	603b      	str	r3, [r7, #0]
 80138dc:	4603      	mov	r3, r0
 80138de:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	68db      	ldr	r3, [r3, #12]
 80138e4:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	691b      	ldr	r3, [r3, #16]
 80138ea:	633b      	str	r3, [r7, #48]	; 0x30
  };
 80138ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ee:	617b      	str	r3, [r7, #20]
 80138f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f2:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 80138f4:	7bfb      	ldrb	r3, [r7, #15]
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d118      	bne.n	801392c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 80138fa:	f107 0314 	add.w	r3, r7, #20
 80138fe:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80139f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8013902:	4618      	mov	r0, r3
 8013904:	f7ff ffc6 	bl	8013894 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8013908:	4603      	mov	r3, r0
 801390a:	61fb      	str	r3, [r7, #28]
 801390c:	f107 021c 	add.w	r2, r7, #28
 8013910:	f107 0308 	add.w	r3, r7, #8
 8013914:	4611      	mov	r1, r2
 8013916:	4618      	mov	r0, r3
 8013918:	f000 f8d6 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 801391c:	4603      	mov	r3, r0
 801391e:	681a      	ldr	r2, [r3, #0]
 8013920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013922:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8013924:	687a      	ldr	r2, [r7, #4]
 8013926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013928:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801392a:	e05f      	b.n	80139ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801392c:	7bfb      	ldrb	r3, [r7, #15]
 801392e:	2b03      	cmp	r3, #3
 8013930:	d129      	bne.n	8013986 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8013932:	f107 0314 	add.w	r3, r7, #20
 8013936:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80139f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801393a:	4618      	mov	r0, r3
 801393c:	f7ff ffaa 	bl	8013894 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8013940:	4603      	mov	r3, r0
 8013942:	623b      	str	r3, [r7, #32]
 8013944:	f107 0220 	add.w	r2, r7, #32
 8013948:	f107 0308 	add.w	r3, r7, #8
 801394c:	4611      	mov	r1, r2
 801394e:	4618      	mov	r0, r3
 8013950:	f000 f8ba 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 8013954:	4603      	mov	r3, r0
 8013956:	681a      	ldr	r2, [r3, #0]
 8013958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801395a:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 801395c:	f107 0314 	add.w	r3, r7, #20
 8013960:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8013964:	4618      	mov	r0, r3
 8013966:	f7ff ff95 	bl	8013894 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801396a:	4603      	mov	r3, r0
 801396c:	627b      	str	r3, [r7, #36]	; 0x24
 801396e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013972:	1d3b      	adds	r3, r7, #4
 8013974:	4611      	mov	r1, r2
 8013976:	4618      	mov	r0, r3
 8013978:	f000 f892 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 801397c:	4603      	mov	r3, r0
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013982:	601a      	str	r2, [r3, #0]
}
 8013984:	e032      	b.n	80139ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8013986:	7bfb      	ldrb	r3, [r7, #15]
 8013988:	2b02      	cmp	r3, #2
 801398a:	d129      	bne.n	80139e0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 801398c:	f107 0314 	add.w	r3, r7, #20
 8013990:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013994:	4618      	mov	r0, r3
 8013996:	f7ff ff7d 	bl	8013894 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801399a:	4603      	mov	r3, r0
 801399c:	62bb      	str	r3, [r7, #40]	; 0x28
 801399e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80139a2:	f107 0308 	add.w	r3, r7, #8
 80139a6:	4611      	mov	r1, r2
 80139a8:	4618      	mov	r0, r3
 80139aa:	f000 f88d 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 80139ae:	4603      	mov	r3, r0
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139b4:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 80139b6:	f107 0314 	add.w	r3, r7, #20
 80139ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80139be:	4618      	mov	r0, r3
 80139c0:	f7ff ff68 	bl	8013894 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80139c4:	4603      	mov	r3, r0
 80139c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139c8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80139cc:	1d3b      	adds	r3, r7, #4
 80139ce:	4611      	mov	r1, r2
 80139d0:	4618      	mov	r0, r3
 80139d2:	f000 f865 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 80139d6:	4603      	mov	r3, r0
 80139d8:	681a      	ldr	r2, [r3, #0]
 80139da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139dc:	601a      	str	r2, [r3, #0]
}
 80139de:	e005      	b.n	80139ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 80139e0:	68ba      	ldr	r2, [r7, #8]
 80139e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139e4:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139ea:	601a      	str	r2, [r3, #0]
}
 80139ec:	bf00      	nop
 80139ee:	3738      	adds	r7, #56	; 0x38
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}
 80139f4:	00000000 	.word	0x00000000

080139f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 80139f8:	b590      	push	{r4, r7, lr}
 80139fa:	b089      	sub	sp, #36	; 0x24
 80139fc:	af02      	add	r7, sp, #8
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	607a      	str	r2, [r7, #4]
 8013a02:	603b      	str	r3, [r7, #0]
 8013a04:	460b      	mov	r3, r1
 8013a06:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	2b03      	cmp	r3, #3
 8013a16:	d108      	bne.n	8013a2a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8013a18:	f7ff fd7f 	bl	801351a <_ZNSt14numeric_limitsIhE3minEv>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8013a20:	f7ff fd83 	bl	801352a <_ZNSt14numeric_limitsIhE3maxEv>
 8013a24:	4603      	mov	r3, r0
 8013a26:	613b      	str	r3, [r7, #16]
 8013a28:	e025      	b.n	8013a76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	2b09      	cmp	r3, #9
 8013a30:	d108      	bne.n	8013a44 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8013a32:	f7ff fd61 	bl	80134f8 <_ZNSt14numeric_limitsIaE3minEv>
 8013a36:	4603      	mov	r3, r0
 8013a38:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8013a3a:	f7ff fd66 	bl	801350a <_ZNSt14numeric_limitsIaE3maxEv>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	613b      	str	r3, [r7, #16]
 8013a42:	e018      	b.n	8013a76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	2b07      	cmp	r3, #7
 8013a4a:	d108      	bne.n	8013a5e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8013a4c:	f7ff fd76 	bl	801353c <_ZNSt14numeric_limitsIsE3minEv>
 8013a50:	4603      	mov	r3, r0
 8013a52:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8013a54:	f7ff fd7c 	bl	8013550 <_ZNSt14numeric_limitsIsE3maxEv>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	613b      	str	r3, [r7, #16]
 8013a5c:	e00b      	b.n	8013a76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	695c      	ldr	r4, [r3, #20]
 8013a62:	4b0c      	ldr	r3, [pc, #48]	; (8013a94 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8013a64:	9300      	str	r3, [sp, #0]
 8013a66:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8013a6a:	4a0b      	ldr	r2, [pc, #44]	; (8013a98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8013a6c:	490b      	ldr	r1, [pc, #44]	; (8013a9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8013a6e:	68f8      	ldr	r0, [r7, #12]
 8013a70:	47a0      	blx	r4
 8013a72:	2301      	movs	r3, #1
 8013a74:	e00a      	b.n	8013a8c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8013a76:	7af8      	ldrb	r0, [r7, #11]
 8013a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7a:	9301      	str	r3, [sp, #4]
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	9300      	str	r3, [sp, #0]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	693a      	ldr	r2, [r7, #16]
 8013a84:	6979      	ldr	r1, [r7, #20]
 8013a86:	f7ff ff23 	bl	80138d0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8013a8a:	2300      	movs	r3, #0
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	371c      	adds	r7, #28
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd90      	pop	{r4, r7, pc}
 8013a94:	0801c6bc 	.word	0x0801c6bc
 8013a98:	0801c46c 	.word	0x0801c46c
 8013a9c:	0801c568 	.word	0x0801c568

08013aa0 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8013aa0:	b480      	push	{r7}
 8013aa2:	b083      	sub	sp, #12
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	681a      	ldr	r2, [r3, #0]
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	da01      	bge.n	8013aba <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	e000      	b.n	8013abc <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8013aba:	687b      	ldr	r3, [r7, #4]
    }
 8013abc:	4618      	mov	r0, r3
 8013abe:	370c      	adds	r7, #12
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8013ac8:	b480      	push	{r7}
 8013aca:	b083      	sub	sp, #12
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681a      	ldr	r2, [r3, #0]
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	da01      	bge.n	8013ae2 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	e000      	b.n	8013ae4 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8013ae2:	687b      	ldr	r3, [r7, #4]
    }
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	370c      	adds	r7, #12
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aee:	4770      	bx	lr

08013af0 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8013af0:	b480      	push	{r7}
 8013af2:	b083      	sub	sp, #12
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2200      	movs	r2, #0
 8013afc:	601a      	str	r2, [r3, #0]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	4618      	mov	r0, r3
 8013b02:	370c      	adds	r7, #12
 8013b04:	46bd      	mov	sp, r7
 8013b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0a:	4770      	bx	lr

08013b0c <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b084      	sub	sp, #16
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	607a      	str	r2, [r7, #4]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8013b1e:	687a      	ldr	r2, [r7, #4]
 8013b20:	68b9      	ldr	r1, [r7, #8]
 8013b22:	68f8      	ldr	r0, [r7, #12]
 8013b24:	f000 f866 	bl	8013bf4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3710      	adds	r7, #16
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}

08013b32 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8013b32:	b580      	push	{r7, lr}
 8013b34:	b082      	sub	sp, #8
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2b05      	cmp	r3, #5
 8013b40:	dd08      	ble.n	8013b54 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	685b      	ldr	r3, [r3, #4]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d004      	beq.n	8013b54 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f005 f910 	bl	8018d74 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	4618      	mov	r0, r3
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}

08013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8013b5e:	b480      	push	{r7}
 8013b60:	b083      	sub	sp, #12
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	6078      	str	r0, [r7, #4]
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	370c      	adds	r7, #12
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b74:	4770      	bx	lr

08013b76 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8013b76:	b480      	push	{r7}
 8013b78:	b083      	sub	sp, #12
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b05      	cmp	r3, #5
 8013b84:	dd02      	ble.n	8013b8c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	685b      	ldr	r3, [r3, #4]
 8013b8a:	e001      	b.n	8013b90 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	3304      	adds	r3, #4
  }
 8013b90:	4618      	mov	r0, r3
 8013b92:	370c      	adds	r7, #12
 8013b94:	46bd      	mov	sp, r7
 8013b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9a:	4770      	bx	lr

08013b9c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	2b05      	cmp	r3, #5
 8013bac:	dd08      	ble.n	8013bc0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d004      	beq.n	8013bc0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f005 f8da 	bl	8018d74 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	683a      	ldr	r2, [r7, #0]
 8013bc4:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	2b05      	cmp	r3, #5
 8013bca:	dd0f      	ble.n	8013bec <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	d201      	bcs.n	8013bda <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8013bd6:	009b      	lsls	r3, r3, #2
 8013bd8:	e001      	b.n	8013bde <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8013bda:	f04f 33ff 	mov.w	r3, #4294967295
 8013bde:	4618      	mov	r0, r3
 8013be0:	f005 f8db 	bl	8018d9a <_Znaj>
 8013be4:	4603      	mov	r3, r0
 8013be6:	461a      	mov	r2, r3
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8013bec:	bf00      	nop
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b086      	sub	sp, #24
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	60f8      	str	r0, [r7, #12]
 8013bfc:	60b9      	str	r1, [r7, #8]
 8013bfe:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8013c00:	68b9      	ldr	r1, [r7, #8]
 8013c02:	68f8      	ldr	r0, [r7, #12]
 8013c04:	f7ff ffca 	bl	8013b9c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8013c08:	68f8      	ldr	r0, [r7, #12]
 8013c0a:	f7ff ffb4 	bl	8013b76 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8013c0e:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	009b      	lsls	r3, r3, #2
 8013c14:	461a      	mov	r2, r3
 8013c16:	6879      	ldr	r1, [r7, #4]
 8013c18:	6978      	ldr	r0, [r7, #20]
 8013c1a:	f006 fc59 	bl	801a4d0 <memcpy>
  }
 8013c1e:	bf00      	nop
 8013c20:	3718      	adds	r7, #24
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}

08013c26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8013c26:	b580      	push	{r7, lr}
 8013c28:	b086      	sub	sp, #24
 8013c2a:	af00      	add	r7, sp, #0
 8013c2c:	6078      	str	r0, [r7, #4]
 8013c2e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d103      	bne.n	8013c3e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7ff ff5a 	bl	8013af0 <_ZN6tflite12RuntimeShapeC1Ev>
 8013c3c:	e00d      	b.n	8013c5a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	689b      	ldr	r3, [r3, #8]
 8013c42:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	3304      	adds	r3, #4
 8013c4e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	6939      	ldr	r1, [r7, #16]
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f7ff ff59 	bl	8013b0c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	3718      	adds	r7, #24
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}

08013c62 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8013c62:	b480      	push	{r7}
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8013c74:	b480      	push	{r7}
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8013c7c:	ee07 3a90 	vmov	s15, r3
 8013c80:	eeb0 0a67 	vmov.f32	s0, s15
 8013c84:	46bd      	mov	sp, r7
 8013c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8a:	4770      	bx	lr

08013c8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8013c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c90:	b092      	sub	sp, #72	; 0x48
 8013c92:	af00      	add	r7, sp, #0
 8013c94:	61f8      	str	r0, [r7, #28]
 8013c96:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8013c98:	69fa      	ldr	r2, [r7, #28]
 8013c9a:	69bb      	ldr	r3, [r7, #24]
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d107      	bne.n	8013cb0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8013ca0:	f7ff ffdf 	bl	8013c62 <_ZNSt14numeric_limitsIlE3minEv>
 8013ca4:	4602      	mov	r2, r0
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	4293      	cmp	r3, r2
 8013caa:	d101      	bne.n	8013cb0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8013cac:	2301      	movs	r3, #1
 8013cae:	e000      	b.n	8013cb2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	17da      	asrs	r2, r3, #31
 8013cba:	60bb      	str	r3, [r7, #8]
 8013cbc:	60fa      	str	r2, [r7, #12]
 8013cbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013cc2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	17da      	asrs	r2, r3, #31
 8013cca:	603b      	str	r3, [r7, #0]
 8013ccc:	607a      	str	r2, [r7, #4]
 8013cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8013cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cda:	fb03 f202 	mul.w	r2, r3, r2
 8013cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ce0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ce2:	fb01 f303 	mul.w	r3, r1, r3
 8013ce6:	4413      	add	r3, r2
 8013ce8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cec:	fba1 4502 	umull	r4, r5, r1, r2
 8013cf0:	442b      	add	r3, r5
 8013cf2:	461d      	mov	r5, r3
 8013cf4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8013cf8:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8013cfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	db02      	blt.n	8013d0a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8013d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d08:	e000      	b.n	8013d0c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 8013d0a:	4b1a      	ldr	r3, [pc, #104]	; (8013d74 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 8013d0c:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8013d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d10:	17da      	asrs	r2, r3, #31
 8013d12:	4698      	mov	r8, r3
 8013d14:	4691      	mov	r9, r2
 8013d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013d1a:	eb18 0102 	adds.w	r1, r8, r2
 8013d1e:	6139      	str	r1, [r7, #16]
 8013d20:	eb49 0303 	adc.w	r3, r9, r3
 8013d24:	617b      	str	r3, [r7, #20]
 8013d26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	da07      	bge.n	8013d3e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 8013d2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013d32:	eb12 0a01 	adds.w	sl, r2, r1
 8013d36:	f143 0b00 	adc.w	fp, r3, #0
 8013d3a:	4652      	mov	r2, sl
 8013d3c:	465b      	mov	r3, fp
 8013d3e:	f04f 0000 	mov.w	r0, #0
 8013d42:	f04f 0100 	mov.w	r1, #0
 8013d46:	0fd0      	lsrs	r0, r2, #31
 8013d48:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013d4c:	17d9      	asrs	r1, r3, #31
 8013d4e:	4602      	mov	r2, r0
 8013d50:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8013d52:	4613      	mov	r3, r2
 8013d54:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8013d56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d003      	beq.n	8013d66 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 8013d5e:	f7ff fa09 	bl	8013174 <_ZNSt14numeric_limitsIlE3maxEv>
 8013d62:	4603      	mov	r3, r0
 8013d64:	e000      	b.n	8013d68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 8013d66:	6a3b      	ldr	r3, [r7, #32]
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3748      	adds	r7, #72	; 0x48
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013d72:	bf00      	nop
 8013d74:	c0000001 	.word	0xc0000001

08013d78 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	da01      	bge.n	8013d8c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8013d88:	f006 fb24 	bl	801a3d4 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	683a      	ldr	r2, [r7, #0]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	db01      	blt.n	8013d9a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8013d96:	f006 fb1d 	bl	801a3d4 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2b05      	cmp	r3, #5
 8013da0:	dd06      	ble.n	8013db0 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	685a      	ldr	r2, [r3, #4]
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	009b      	lsls	r3, r3, #2
 8013daa:	4413      	add	r3, r2
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	e004      	b.n	8013dba <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8013db0:	687a      	ldr	r2, [r7, #4]
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	009b      	lsls	r3, r3, #2
 8013db6:	4413      	add	r3, r2
 8013db8:	685b      	ldr	r3, [r3, #4]
  }
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3708      	adds	r7, #8
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}

08013dc2 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8013dc2:	b480      	push	{r7}
 8013dc4:	b083      	sub	sp, #12
 8013dc6:	af00      	add	r7, sp, #0
 8013dc8:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b05      	cmp	r3, #5
 8013dd0:	dd02      	ble.n	8013dd8 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	685b      	ldr	r3, [r3, #4]
 8013dd6:	e001      	b.n	8013ddc <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	3304      	adds	r3, #4
  }
 8013ddc:	4618      	mov	r0, r3
 8013dde:	370c      	adds	r7, #12
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b086      	sub	sp, #24
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8013df0:	2301      	movs	r3, #1
 8013df2:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f7ff ffe4 	bl	8013dc2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8013dfa:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	613b      	str	r3, [r7, #16]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	693a      	ldr	r2, [r7, #16]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	da0c      	bge.n	8013e24 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	009b      	lsls	r3, r3, #2
 8013e0e:	68fa      	ldr	r2, [r7, #12]
 8013e10:	4413      	add	r3, r2
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	fb02 f303 	mul.w	r3, r2, r3
 8013e1a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	3301      	adds	r3, #1
 8013e20:	613b      	str	r3, [r7, #16]
 8013e22:	e7ed      	b.n	8013e00 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8013e24:	697b      	ldr	r3, [r7, #20]
  }
 8013e26:	4618      	mov	r0, r3
 8013e28:	3718      	adds	r7, #24
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}

08013e2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8013e2e:	b590      	push	{r4, r7, lr}
 8013e30:	b085      	sub	sp, #20
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	6078      	str	r0, [r7, #4]
 8013e36:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f7ff fe90 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013e3e:	4604      	mov	r4, r0
 8013e40:	6838      	ldr	r0, [r7, #0]
 8013e42:	f7ff fe8c 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013e46:	4603      	mov	r3, r0
 8013e48:	429c      	cmp	r4, r3
 8013e4a:	d001      	beq.n	8013e50 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8013e4c:	f006 fac2 	bl	801a3d4 <abort>
  const int dims_count = shape.DimensionsCount();
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f7ff fe84 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013e56:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8013e58:	2300      	movs	r3, #0
 8013e5a:	60fb      	str	r3, [r7, #12]
 8013e5c:	68fa      	ldr	r2, [r7, #12]
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	da11      	bge.n	8013e88 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8013e64:	68f9      	ldr	r1, [r7, #12]
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f7ff ff86 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	68f9      	ldr	r1, [r7, #12]
 8013e70:	6838      	ldr	r0, [r7, #0]
 8013e72:	f7ff ff81 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013e76:	4603      	mov	r3, r0
 8013e78:	429c      	cmp	r4, r3
 8013e7a:	d001      	beq.n	8013e80 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8013e7c:	f006 faaa 	bl	801a3d4 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	3301      	adds	r3, #1
 8013e84:	60fb      	str	r3, [r7, #12]
 8013e86:	e7e9      	b.n	8013e5c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f7ff ffad 	bl	8013de8 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8013e8e:	4603      	mov	r3, r0
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3714      	adds	r7, #20
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd90      	pop	{r4, r7, pc}

08013e98 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b086      	sub	sp, #24
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	60b9      	str	r1, [r7, #8]
 8013ea2:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013eaa:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	dc02      	bgt.n	8013eb8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	425b      	negs	r3, r3
 8013eb6:	e000      	b.n	8013eba <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8013ebc:	68fa      	ldr	r2, [r7, #12]
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8013ec4:	68b9      	ldr	r1, [r7, #8]
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7ff fee0 	bl	8013c8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	6939      	ldr	r1, [r7, #16]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f000 fb4b 	bl	801456c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013ed6:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3718      	adds	r7, #24
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8013ef2:	f006 fa6f 	bl	801a3d4 <abort>
  TFLITE_DCHECK(node != nullptr);
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d101      	bne.n	8013f00 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8013efc:	f006 fa6a 	bl	801a3d4 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	6819      	ldr	r1, [r3, #0]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	009b      	lsls	r3, r3, #2
 8013f0c:	440b      	add	r3, r1
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	4619      	mov	r1, r3
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	4790      	blx	r2
 8013f16:	4603      	mov	r3, r0
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3710      	adds	r7, #16
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b084      	sub	sp, #16
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	60f8      	str	r0, [r7, #12]
 8013f28:	60b9      	str	r1, [r7, #8]
 8013f2a:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	68b9      	ldr	r1, [r7, #8]
 8013f30:	68f8      	ldr	r0, [r7, #12]
 8013f32:	f7ff ffd5 	bl	8013ee0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8013f36:	4603      	mov	r3, r0
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3710      	adds	r7, #16
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d101      	bne.n	8013f56 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8013f52:	f006 fa3f 	bl	801a3d4 <abort>
  TFLITE_DCHECK(node != nullptr);
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d101      	bne.n	8013f60 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8013f5c:	f006 fa3a 	bl	801a3d4 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	6859      	ldr	r1, [r3, #4]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	009b      	lsls	r3, r3, #2
 8013f6c:	440b      	add	r3, r1
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	4619      	mov	r1, r3
 8013f72:	68f8      	ldr	r0, [r7, #12]
 8013f74:	4790      	blx	r2
 8013f76:	4603      	mov	r3, r0
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3710      	adds	r7, #16
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}

08013f80 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b08a      	sub	sp, #40	; 0x28
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
 8013f8c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013f8e:	6879      	ldr	r1, [r7, #4]
 8013f90:	68f8      	ldr	r0, [r7, #12]
 8013f92:	f7ff ff4c 	bl	8013e2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013f96:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8013f98:	2300      	movs	r3, #0
 8013f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8013f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f9e:	6a3b      	ldr	r3, [r7, #32]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	da1d      	bge.n	8013fe0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa6:	009b      	lsls	r3, r3, #2
 8013fa8:	68ba      	ldr	r2, [r7, #8]
 8013faa:	4413      	add	r3, r2
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8013fb0:	f04f 0300 	mov.w	r3, #0
 8013fb4:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8013fb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8013fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc2:	d501      	bpl.n	8013fc8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8013fc4:	69bb      	ldr	r3, [r7, #24]
 8013fc6:	e000      	b.n	8013fca <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8013fc8:	69fb      	ldr	r3, [r7, #28]
 8013fca:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8013fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	683a      	ldr	r2, [r7, #0]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	697a      	ldr	r2, [r7, #20]
 8013fd6:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8013fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fda:	3301      	adds	r3, #1
 8013fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8013fde:	e7dd      	b.n	8013f9c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8013fe0:	bf00      	nop
 8013fe2:	3728      	adds	r7, #40	; 0x28
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b08a      	sub	sp, #40	; 0x28
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
 8013ff4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013ff6:	6879      	ldr	r1, [r7, #4]
 8013ff8:	68f8      	ldr	r0, [r7, #12]
 8013ffa:	f7ff ff18 	bl	8013e2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013ffe:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8014000:	2300      	movs	r3, #0
 8014002:	627b      	str	r3, [r7, #36]	; 0x24
 8014004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014006:	6a3b      	ldr	r3, [r7, #32]
 8014008:	429a      	cmp	r2, r3
 801400a:	da2a      	bge.n	8014062 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 801400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	68ba      	ldr	r2, [r7, #8]
 8014012:	4413      	add	r3, r2
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8014018:	4b14      	ldr	r3, [pc, #80]	; (801406c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801401a:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 801401c:	f04f 0300 	mov.w	r3, #0
 8014020:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8014022:	edd7 7a07 	vldr	s15, [r7, #28]
 8014026:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801402a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014032:	dd01      	ble.n	8014038 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8014034:	69bb      	ldr	r3, [r7, #24]
 8014036:	e009      	b.n	801404c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8014038:	edd7 7a07 	vldr	s15, [r7, #28]
 801403c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014044:	d501      	bpl.n	801404a <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	e000      	b.n	801404c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801404a:	69fb      	ldr	r3, [r7, #28]
 801404c:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014050:	009b      	lsls	r3, r3, #2
 8014052:	683a      	ldr	r2, [r7, #0]
 8014054:	4413      	add	r3, r2
 8014056:	693a      	ldr	r2, [r7, #16]
 8014058:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405c:	3301      	adds	r3, #1
 801405e:	627b      	str	r3, [r7, #36]	; 0x24
 8014060:	e7d0      	b.n	8014004 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8014062:	bf00      	nop
 8014064:	3728      	adds	r7, #40	; 0x28
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	40c00000 	.word	0x40c00000

08014070 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	60f8      	str	r0, [r7, #12]
 8014078:	60b9      	str	r1, [r7, #8]
 801407a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014080:	2b00      	cmp	r3, #0
 8014082:	d101      	bne.n	8014088 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8014084:	f006 f9a6 	bl	801a3d4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801408c:	211c      	movs	r1, #28
 801408e:	68f8      	ldr	r0, [r7, #12]
 8014090:	4798      	blx	r3
 8014092:	4603      	mov	r3, r0
}
 8014094:	4618      	mov	r0, r3
 8014096:	3710      	adds	r7, #16
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801409c:	b590      	push	{r4, r7, lr}
 801409e:	b089      	sub	sp, #36	; 0x24
 80140a0:	af02      	add	r7, sp, #8
 80140a2:	6078      	str	r0, [r7, #4]
 80140a4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	691b      	ldr	r3, [r3, #16]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d101      	bne.n	80140b2 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80140ae:	f006 f991 	bl	801a3d4 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 80140b2:	683b      	ldr	r3, [r7, #0]
 80140b4:	691b      	ldr	r3, [r3, #16]
 80140b6:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80140b8:	2200      	movs	r2, #0
 80140ba:	6839      	ldr	r1, [r7, #0]
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f7ff facd 	bl	801365c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80140c2:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d10a      	bne.n	80140e0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	695c      	ldr	r4, [r3, #20]
 80140ce:	4b1a      	ldr	r3, [pc, #104]	; (8014138 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 80140d0:	9300      	str	r3, [sp, #0]
 80140d2:	238e      	movs	r3, #142	; 0x8e
 80140d4:	4a19      	ldr	r2, [pc, #100]	; (801413c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 80140d6:	491a      	ldr	r1, [pc, #104]	; (8014140 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	47a0      	blx	r4
 80140dc:	2301      	movs	r3, #1
 80140de:	e027      	b.n	8014130 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80140e0:	2200      	movs	r2, #0
 80140e2:	6839      	ldr	r1, [r7, #0]
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f7ff fac9 	bl	801367c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80140ea:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d10a      	bne.n	8014108 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	695c      	ldr	r4, [r3, #20]
 80140f6:	4b13      	ldr	r3, [pc, #76]	; (8014144 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	2390      	movs	r3, #144	; 0x90
 80140fc:	4a0f      	ldr	r2, [pc, #60]	; (801413c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 80140fe:	4910      	ldr	r1, [pc, #64]	; (8014140 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	47a0      	blx	r4
 8014104:	2301      	movs	r3, #1
 8014106:	e013      	b.n	8014130 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 8014108:	693b      	ldr	r3, [r7, #16]
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	2b09      	cmp	r3, #9
 801410e:	d105      	bne.n	801411c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8014110:	697a      	ldr	r2, [r7, #20]
 8014112:	68f9      	ldr	r1, [r7, #12]
 8014114:	6938      	ldr	r0, [r7, #16]
 8014116:	f000 fa9d 	bl	8014654 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801411a:	e008      	b.n	801412e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	2b03      	cmp	r3, #3
 8014122:	d104      	bne.n	801412e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 8014124:	697a      	ldr	r2, [r7, #20]
 8014126:	68f9      	ldr	r1, [r7, #12]
 8014128:	6938      	ldr	r0, [r7, #16]
 801412a:	f000 fb35 	bl	8014798 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801412e:	2300      	movs	r3, #0
}
 8014130:	4618      	mov	r0, r3
 8014132:	371c      	adds	r7, #28
 8014134:	46bd      	mov	sp, r7
 8014136:	bd90      	pop	{r4, r7, pc}
 8014138:	0801c7e0 	.word	0x0801c7e0
 801413c:	0801c73c 	.word	0x0801c73c
 8014140:	0801c7c8 	.word	0x0801c7c8
 8014144:	0801c7f4 	.word	0x0801c7f4

08014148 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8014148:	b590      	push	{r4, r7, lr}
 801414a:	b0ad      	sub	sp, #180	; 0xb4
 801414c:	af02      	add	r7, sp, #8
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	691b      	ldr	r3, [r3, #16]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d101      	bne.n	801415e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801415a:	f006 f93b 	bl	801a3d4 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	691b      	ldr	r3, [r3, #16]
 8014162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8014166:	2200      	movs	r2, #0
 8014168:	6839      	ldr	r1, [r7, #0]
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f7ff fed8 	bl	8013f20 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014170:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8014174:	2200      	movs	r2, #0
 8014176:	6839      	ldr	r1, [r7, #0]
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f7ff fee1 	bl	8013f40 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801417e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8014182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014186:	7a1b      	ldrb	r3, [r3, #8]
 8014188:	2b09      	cmp	r3, #9
 801418a:	d032      	beq.n	80141f2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801418c:	2b09      	cmp	r3, #9
 801418e:	f300 808c 	bgt.w	80142aa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 8014192:	2b01      	cmp	r3, #1
 8014194:	d002      	beq.n	801419c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8014196:	2b03      	cmp	r3, #3
 8014198:	d059      	beq.n	801424e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801419a:	e086      	b.n	80142aa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801419c:	f107 030c 	add.w	r3, r7, #12
 80141a0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80141a4:	4618      	mov	r0, r3
 80141a6:	f001 fe2f 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80141aa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80141ae:	f000 fb95 	bl	80148dc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80141b2:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 80141b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80141b8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80141bc:	4618      	mov	r0, r3
 80141be:	f001 fe23 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80141c2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80141c6:	f000 fb98 	bl	80148fa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80141ca:	4603      	mov	r3, r0
 80141cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80141d0:	f107 000c 	add.w	r0, r7, #12
 80141d4:	4621      	mov	r1, r4
 80141d6:	f7ff fed3 	bl	8013f80 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 80141da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80141de:	4618      	mov	r0, r3
 80141e0:	f7ff fca7 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80141e4:	f107 030c 	add.w	r3, r7, #12
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7ff fca2 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80141ee:	2300      	movs	r3, #0
 80141f0:	e069      	b.n	80142c6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80141f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80141f6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80141fa:	4618      	mov	r0, r3
 80141fc:	f001 fe04 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8014200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014204:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8014208:	4618      	mov	r0, r3
 801420a:	f001 fdfd 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801420e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014212:	f000 fb83 	bl	801491c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014216:	4604      	mov	r4, r0
 8014218:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801421c:	f000 fb8d 	bl	801493a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8014220:	4603      	mov	r3, r0
 8014222:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8014226:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801422a:	9300      	str	r3, [sp, #0]
 801422c:	4623      	mov	r3, r4
 801422e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014232:	f000 fb93 	bl	801495c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 8014236:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801423a:	4618      	mov	r0, r3
 801423c:	f7ff fc79 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8014240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014244:	4618      	mov	r0, r3
 8014246:	f7ff fc74 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801424a:	2300      	movs	r3, #0
 801424c:	e03b      	b.n	80142c6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801424e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014252:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014256:	4618      	mov	r0, r3
 8014258:	f001 fdd6 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 801425c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014260:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8014264:	4618      	mov	r0, r3
 8014266:	f001 fdcf 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801426a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801426e:	f000 fbc1 	bl	80149f4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8014272:	4604      	mov	r4, r0
 8014274:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8014278:	f000 fbcb 	bl	8014a12 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801427c:	4603      	mov	r3, r0
 801427e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8014282:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8014286:	9300      	str	r3, [sp, #0]
 8014288:	4623      	mov	r3, r4
 801428a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801428e:	f000 fbd1 	bl	8014a34 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 8014292:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014296:	4618      	mov	r0, r3
 8014298:	f7ff fc4b 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801429c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7ff fc46 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 80142a6:	2300      	movs	r3, #0
 80142a8:	e00d      	b.n	80142c6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	695c      	ldr	r4, [r3, #20]
 80142ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80142b2:	7a1b      	ldrb	r3, [r3, #8]
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7fe fee1 	bl	801307c <TfLiteTypeGetName>
 80142ba:	4603      	mov	r3, r0
 80142bc:	461a      	mov	r2, r3
 80142be:	4904      	ldr	r1, [pc, #16]	; (80142d0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80142c4:	2301      	movs	r3, #1
    }
  }
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	37ac      	adds	r7, #172	; 0xac
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd90      	pop	{r4, r7, pc}
 80142ce:	bf00      	nop
 80142d0:	0801c808 	.word	0x0801c808

080142d4 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b084      	sub	sp, #16
 80142d8:	af00      	add	r7, sp, #0
 80142da:	60f8      	str	r0, [r7, #12]
 80142dc:	60b9      	str	r1, [r7, #8]
 80142de:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d101      	bne.n	80142ec <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 80142e8:	f006 f874 	bl	801a3d4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142f0:	2104      	movs	r1, #4
 80142f2:	68f8      	ldr	r0, [r7, #12]
 80142f4:	4798      	blx	r3
 80142f6:	4603      	mov	r3, r0
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3710      	adds	r7, #16
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 8014300:	b590      	push	{r4, r7, lr}
 8014302:	b087      	sub	sp, #28
 8014304:	af02      	add	r7, sp, #8
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	691b      	ldr	r3, [r3, #16]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d101      	bne.n	8014316 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8014312:	f006 f85f 	bl	801a3d4 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	691b      	ldr	r3, [r3, #16]
 801431a:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801431c:	2200      	movs	r2, #0
 801431e:	6839      	ldr	r1, [r7, #0]
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f7ff f99b 	bl	801365c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014326:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d10a      	bne.n	8014344 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	695c      	ldr	r4, [r3, #20]
 8014332:	4b20      	ldr	r3, [pc, #128]	; (80143b4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	23cd      	movs	r3, #205	; 0xcd
 8014338:	4a1f      	ldr	r2, [pc, #124]	; (80143b8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 801433a:	4920      	ldr	r1, [pc, #128]	; (80143bc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	47a0      	blx	r4
 8014340:	2301      	movs	r3, #1
 8014342:	e033      	b.n	80143ac <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	781b      	ldrb	r3, [r3, #0]
 8014348:	2b09      	cmp	r3, #9
 801434a:	d115      	bne.n	8014378 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8014356:	4618      	mov	r0, r3
 8014358:	eef0 0a67 	vmov.f32	s1, s15
 801435c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8014360:	f000 fbb3 	bl	8014aca <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 8014364:	4603      	mov	r3, r0
 8014366:	461a      	mov	r2, r3
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	691b      	ldr	r3, [r3, #16]
 8014370:	b25a      	sxtb	r2, r3
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	705a      	strb	r2, [r3, #1]
 8014376:	e018      	b.n	80143aa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	2b03      	cmp	r3, #3
 801437e:	d114      	bne.n	80143aa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801438a:	4618      	mov	r0, r3
 801438c:	eef0 0a67 	vmov.f32	s1, s15
 8014390:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8014394:	f000 fbe8 	bl	8014b68 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 8014398:	4603      	mov	r3, r0
 801439a:	461a      	mov	r2, r3
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	691b      	ldr	r3, [r3, #16]
 80143a4:	b2da      	uxtb	r2, r3
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 80143aa:	2300      	movs	r3, #0
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3714      	adds	r7, #20
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd90      	pop	{r4, r7, pc}
 80143b4:	0801c7e0 	.word	0x0801c7e0
 80143b8:	0801c73c 	.word	0x0801c73c
 80143bc:	0801c7c8 	.word	0x0801c7c8

080143c0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 80143c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143c2:	b0ad      	sub	sp, #180	; 0xb4
 80143c4:	af02      	add	r7, sp, #8
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	691b      	ldr	r3, [r3, #16]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d101      	bne.n	80143d6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80143d2:	f005 ffff 	bl	801a3d4 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	691b      	ldr	r3, [r3, #16]
 80143da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80143de:	2200      	movs	r2, #0
 80143e0:	6839      	ldr	r1, [r7, #0]
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f7ff fd9c 	bl	8013f20 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80143e8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80143ec:	2200      	movs	r2, #0
 80143ee:	6839      	ldr	r1, [r7, #0]
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f7ff fda5 	bl	8013f40 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80143f6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 80143fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80143fe:	7a1b      	ldrb	r3, [r3, #8]
 8014400:	2b09      	cmp	r3, #9
 8014402:	d032      	beq.n	801446a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8014404:	2b09      	cmp	r3, #9
 8014406:	f300 809c 	bgt.w	8014542 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 801440a:	2b01      	cmp	r3, #1
 801440c:	d002      	beq.n	8014414 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801440e:	2b03      	cmp	r3, #3
 8014410:	d062      	beq.n	80144d8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 8014412:	e096      	b.n	8014542 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 8014414:	f107 030c 	add.w	r3, r7, #12
 8014418:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801441c:	4618      	mov	r0, r3
 801441e:	f001 fcf3 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8014422:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014426:	f000 fa59 	bl	80148dc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801442a:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 801442c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014430:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8014434:	4618      	mov	r0, r3
 8014436:	f001 fce7 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801443a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801443e:	f000 fa5c 	bl	80148fa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8014442:	4603      	mov	r3, r0
 8014444:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014448:	f107 000c 	add.w	r0, r7, #12
 801444c:	4621      	mov	r1, r4
 801444e:	f7ff fdcb 	bl	8013fe8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 8014452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014456:	4618      	mov	r0, r3
 8014458:	f7ff fb6b 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801445c:	f107 030c 	add.w	r3, r7, #12
 8014460:	4618      	mov	r0, r3
 8014462:	f7ff fb66 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8014466:	2300      	movs	r3, #0
 8014468:	e079      	b.n	801455e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801446a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801446e:	f993 4001 	ldrsb.w	r4, [r3, #1]
 8014472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014476:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 801447a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801447e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8014482:	4618      	mov	r0, r3
 8014484:	f001 fcc0 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8014488:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801448c:	f000 fa46 	bl	801491c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014490:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 8014492:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014496:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801449a:	4618      	mov	r0, r3
 801449c:	f001 fcb4 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 80144a0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80144a4:	f000 fa49 	bl	801493a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80144a8:	4603      	mov	r3, r0
 80144aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80144ae:	9301      	str	r3, [sp, #4]
 80144b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80144b4:	9300      	str	r3, [sp, #0]
 80144b6:	4633      	mov	r3, r6
 80144b8:	4629      	mov	r1, r5
 80144ba:	4620      	mov	r0, r4
 80144bc:	f000 fba3 	bl	8014c06 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 80144c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80144c4:	4618      	mov	r0, r3
 80144c6:	f7ff fb34 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 80144ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80144ce:	4618      	mov	r0, r3
 80144d0:	f7ff fb2f 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 80144d4:	2300      	movs	r3, #0
 80144d6:	e042      	b.n	801455e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80144d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80144dc:	78dc      	ldrb	r4, [r3, #3]
 80144de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80144e2:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 80144e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80144e8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80144ec:	4618      	mov	r0, r3
 80144ee:	f001 fc8b 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80144f2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80144f6:	f000 fa7d 	bl	80149f4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80144fa:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 80144fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014500:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8014504:	4618      	mov	r0, r3
 8014506:	f001 fc7f 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801450a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801450e:	f000 fa80 	bl	8014a12 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8014512:	4603      	mov	r3, r0
 8014514:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8014518:	9301      	str	r3, [sp, #4]
 801451a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801451e:	9300      	str	r3, [sp, #0]
 8014520:	4633      	mov	r3, r6
 8014522:	4629      	mov	r1, r5
 8014524:	4620      	mov	r0, r4
 8014526:	f000 fbad 	bl	8014c84 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 801452a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801452e:	4618      	mov	r0, r3
 8014530:	f7ff faff 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 8014534:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014538:	4618      	mov	r0, r3
 801453a:	f7ff fafa 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801453e:	2300      	movs	r3, #0
 8014540:	e00d      	b.n	801455e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	695c      	ldr	r4, [r3, #20]
 8014546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801454a:	7a1b      	ldrb	r3, [r3, #8]
 801454c:	4618      	mov	r0, r3
 801454e:	f7fe fd95 	bl	801307c <TfLiteTypeGetName>
 8014552:	4603      	mov	r3, r0
 8014554:	461a      	mov	r2, r3
 8014556:	4904      	ldr	r1, [pc, #16]	; (8014568 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 8014558:	6878      	ldr	r0, [r7, #4]
 801455a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801455c:	2301      	movs	r3, #1
    }
  }
}
 801455e:	4618      	mov	r0, r3
 8014560:	37ac      	adds	r7, #172	; 0xac
 8014562:	46bd      	mov	sp, r7
 8014564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014566:	bf00      	nop
 8014568:	0801c808 	.word	0x0801c808

0801456c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 801456c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801456e:	b089      	sub	sp, #36	; 0x24
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8014576:	6839      	ldr	r1, [r7, #0]
 8014578:	2900      	cmp	r1, #0
 801457a:	da06      	bge.n	801458a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 801457c:	4b31      	ldr	r3, [pc, #196]	; (8014644 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 801457e:	4a32      	ldr	r2, [pc, #200]	; (8014648 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8014580:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8014584:	4831      	ldr	r0, [pc, #196]	; (801464c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8014586:	f005 ff2d 	bl	801a3e4 <__assert_func>
  assert(exponent <= 31);
 801458a:	6839      	ldr	r1, [r7, #0]
 801458c:	291f      	cmp	r1, #31
 801458e:	dd06      	ble.n	801459e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8014590:	4b2f      	ldr	r3, [pc, #188]	; (8014650 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8014592:	4a2d      	ldr	r2, [pc, #180]	; (8014648 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8014594:	f240 1167 	movw	r1, #359	; 0x167
 8014598:	482c      	ldr	r0, [pc, #176]	; (801464c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801459a:	f005 ff23 	bl	801a3e4 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801459e:	f04f 0001 	mov.w	r0, #1
 80145a2:	f04f 0100 	mov.w	r1, #0
 80145a6:	683c      	ldr	r4, [r7, #0]
 80145a8:	f1a4 0620 	sub.w	r6, r4, #32
 80145ac:	f1c4 0520 	rsb	r5, r4, #32
 80145b0:	fa01 f304 	lsl.w	r3, r1, r4
 80145b4:	fa00 f606 	lsl.w	r6, r0, r6
 80145b8:	4333      	orrs	r3, r6
 80145ba:	fa20 f505 	lsr.w	r5, r0, r5
 80145be:	432b      	orrs	r3, r5
 80145c0:	fa00 f204 	lsl.w	r2, r0, r4
 80145c4:	4613      	mov	r3, r2
 80145c6:	3b01      	subs	r3, #1
 80145c8:	4618      	mov	r0, r3
 80145ca:	f000 fb93 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80145ce:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 80145d0:	2000      	movs	r0, #0
 80145d2:	f000 fb8f 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80145d6:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 80145d8:	2001      	movs	r0, #1
 80145da:	f000 fb8b 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80145de:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 80145e0:	69f9      	ldr	r1, [r7, #28]
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 fb91 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80145e8:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 80145ea:	2101      	movs	r1, #1
 80145ec:	69f8      	ldr	r0, [r7, #28]
 80145ee:	f000 fb9a 	bl	8014d26 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80145f2:	4604      	mov	r4, r0
 80145f4:	69b9      	ldr	r1, [r7, #24]
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f000 fba4 	bl	8014d44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80145fc:	4603      	mov	r3, r0
 80145fe:	6979      	ldr	r1, [r7, #20]
 8014600:	4618      	mov	r0, r3
 8014602:	f000 fb82 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014606:	4603      	mov	r3, r0
 8014608:	4619      	mov	r1, r3
 801460a:	4620      	mov	r0, r4
 801460c:	f000 fbae 	bl	8014d6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014610:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8014612:	6839      	ldr	r1, [r7, #0]
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f000 fb86 	bl	8014d26 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801461a:	4604      	mov	r4, r0
 801461c:	68f9      	ldr	r1, [r7, #12]
 801461e:	6938      	ldr	r0, [r7, #16]
 8014620:	f000 fbb2 	bl	8014d88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8014624:	4603      	mov	r3, r0
 8014626:	6979      	ldr	r1, [r7, #20]
 8014628:	4618      	mov	r0, r3
 801462a:	f000 fb6e 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801462e:	4603      	mov	r3, r0
 8014630:	4619      	mov	r1, r3
 8014632:	4620      	mov	r0, r4
 8014634:	f000 fb9a 	bl	8014d6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014638:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 801463a:	4618      	mov	r0, r3
 801463c:	3724      	adds	r7, #36	; 0x24
 801463e:	46bd      	mov	sp, r7
 8014640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014642:	bf00      	nop
 8014644:	0801c874 	.word	0x0801c874
 8014648:	0801c884 	.word	0x0801c884
 801464c:	0801c8e0 	.word	0x0801c8e0
 8014650:	0801c96c 	.word	0x0801c96c

08014654 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8014654:	b590      	push	{r4, r7, lr}
 8014656:	b099      	sub	sp, #100	; 0x64
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8014660:	f04f 0300 	mov.w	r3, #0
 8014664:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8014666:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801466a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	ed93 7a03 	vldr	s14, [r3, #12]
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	edd3 7a03 	vldr	s15, [r3, #12]
 8014678:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801467c:	ee16 0a90 	vmov	r0, s13
 8014680:	f7eb ff6c 	bl	800055c <__aeabi_f2d>
 8014684:	4602      	mov	r2, r0
 8014686:	460b      	mov	r3, r1
 8014688:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801468c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014690:	68f9      	ldr	r1, [r7, #12]
 8014692:	4618      	mov	r0, r3
 8014694:	f7ff fac7 	bl	8013c26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8014698:	f107 0310 	add.w	r3, r7, #16
 801469c:	68b9      	ldr	r1, [r7, #8]
 801469e:	4618      	mov	r0, r3
 80146a0:	f7ff fac1 	bl	8013c26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f103 0214 	add.w	r2, r3, #20
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	3318      	adds	r3, #24
 80146ae:	4619      	mov	r1, r3
 80146b0:	4610      	mov	r0, r2
 80146b2:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80146b6:	f7fe fd67 	bl	8013188 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80146ba:	f7fe ff1d 	bl	80134f8 <_ZNSt14numeric_limitsIaE3minEv>
 80146be:	4603      	mov	r3, r0
 80146c0:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80146cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80146d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80146d4:	eeb0 0a66 	vmov.f32	s0, s13
 80146d8:	f004 fc6c 	bl	8018fb4 <roundf>
 80146dc:	eef0 7a40 	vmov.f32	s15, s0
 80146e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80146e4:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 80146e8:	4423      	add	r3, r4
 80146ea:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80146ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80146f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80146f4:	4611      	mov	r1, r2
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7ff f9e6 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 80146fc:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8014704:	f7ff fab6 	bl	8013c74 <_ZNSt14numeric_limitsIfE8infinityEv>
 8014708:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801470c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014710:	eef4 7a47 	vcmp.f32	s15, s14
 8014714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014718:	d103      	bne.n	8014722 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801471a:	f7fe fef6 	bl	801350a <_ZNSt14numeric_limitsIaE3maxEv>
 801471e:	4603      	mov	r3, r0
 8014720:	e022      	b.n	8014768 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8014722:	f7fe fef2 	bl	801350a <_ZNSt14numeric_limitsIaE3maxEv>
 8014726:	4603      	mov	r3, r0
 8014728:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	edd3 7a03 	vldr	s15, [r3, #12]
 8014734:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014738:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801473c:	eeb0 0a66 	vmov.f32	s0, s13
 8014740:	f004 fc38 	bl	8018fb4 <roundf>
 8014744:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8014748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801474c:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8014750:	4423      	add	r3, r4
 8014752:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8014754:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8014758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801475c:	4611      	mov	r1, r2
 801475e:	4618      	mov	r0, r3
 8014760:	f7ff f99e 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 8014764:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8014766:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	691a      	ldr	r2, [r3, #16]
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	691a      	ldr	r2, [r3, #16]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801477c:	f107 0310 	add.w	r3, r7, #16
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff f9d6 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 8014786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff f9d1 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014790:	bf00      	nop
 8014792:	3764      	adds	r7, #100	; 0x64
 8014794:	46bd      	mov	sp, r7
 8014796:	bd90      	pop	{r4, r7, pc}

08014798 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8014798:	b590      	push	{r4, r7, lr}
 801479a:	b099      	sub	sp, #100	; 0x64
 801479c:	af00      	add	r7, sp, #0
 801479e:	60f8      	str	r0, [r7, #12]
 80147a0:	60b9      	str	r1, [r7, #8]
 80147a2:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 80147a4:	f04f 0300 	mov.w	r3, #0
 80147a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80147aa:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80147ae:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80147bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 80147c0:	ee16 0a90 	vmov	r0, s13
 80147c4:	f7eb feca 	bl	800055c <__aeabi_f2d>
 80147c8:	4602      	mov	r2, r0
 80147ca:	460b      	mov	r3, r1
 80147cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 80147d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80147d4:	68f9      	ldr	r1, [r7, #12]
 80147d6:	4618      	mov	r0, r3
 80147d8:	f7ff fa25 	bl	8013c26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 80147dc:	f107 0310 	add.w	r3, r7, #16
 80147e0:	68b9      	ldr	r1, [r7, #8]
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7ff fa1f 	bl	8013c26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	f103 0214 	add.w	r2, r3, #20
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	3318      	adds	r3, #24
 80147f2:	4619      	mov	r1, r3
 80147f4:	4610      	mov	r0, r2
 80147f6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80147fa:	f7fe fcc5 	bl	8013188 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80147fe:	f7fe fe8c 	bl	801351a <_ZNSt14numeric_limitsIhE3minEv>
 8014802:	4603      	mov	r3, r0
 8014804:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	edd3 7a03 	vldr	s15, [r3, #12]
 8014810:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014814:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014818:	eeb0 0a66 	vmov.f32	s0, s13
 801481c:	f004 fbca 	bl	8018fb4 <roundf>
 8014820:	eef0 7a40 	vmov.f32	s15, s0
 8014824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014828:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801482c:	4423      	add	r3, r4
 801482e:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8014830:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014838:	4611      	mov	r1, r2
 801483a:	4618      	mov	r0, r3
 801483c:	f7ff f944 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 8014840:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8014848:	f7ff fa14 	bl	8013c74 <_ZNSt14numeric_limitsIfE8infinityEv>
 801484c:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8014850:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8014854:	eef4 7a47 	vcmp.f32	s15, s14
 8014858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801485c:	d103      	bne.n	8014866 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801485e:	f7fe fe64 	bl	801352a <_ZNSt14numeric_limitsIhE3maxEv>
 8014862:	4603      	mov	r3, r0
 8014864:	e022      	b.n	80148ac <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8014866:	f7fe fe60 	bl	801352a <_ZNSt14numeric_limitsIhE3maxEv>
 801486a:	4603      	mov	r3, r0
 801486c:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	edd3 7a03 	vldr	s15, [r3, #12]
 8014878:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801487c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014880:	eeb0 0a66 	vmov.f32	s0, s13
 8014884:	f004 fb96 	bl	8018fb4 <roundf>
 8014888:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801488c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014890:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 8014894:	4423      	add	r3, r4
 8014896:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8014898:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801489c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80148a0:	4611      	mov	r1, r2
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7ff f8fc 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 80148a8:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80148aa:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 80148ac:	687a      	ldr	r2, [r7, #4]
 80148ae:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	691a      	ldr	r2, [r3, #16]
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	691a      	ldr	r2, [r3, #16]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80148c0:	f107 0310 	add.w	r3, r7, #16
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7ff f934 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80148ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7ff f92f 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80148d4:	bf00      	nop
 80148d6:	3764      	adds	r7, #100	; 0x64
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd90      	pop	{r4, r7, pc}

080148dc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d101      	bne.n	80148ee <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80148ea:	f005 fd73 	bl	801a3d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681b      	ldr	r3, [r3, #0]
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3708      	adds	r7, #8
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}

080148fa <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80148fa:	b480      	push	{r7}
 80148fc:	b083      	sub	sp, #12
 80148fe:	af00      	add	r7, sp, #0
 8014900:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d002      	beq.n	801490e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	e000      	b.n	8014910 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801490e:	2300      	movs	r3, #0
}
 8014910:	4618      	mov	r0, r3
 8014912:	370c      	adds	r7, #12
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr

0801491c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d101      	bne.n	801492e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801492a:	f005 fd53 	bl	801a3d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
}
 8014932:	4618      	mov	r0, r3
 8014934:	3708      	adds	r7, #8
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}

0801493a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801493a:	b480      	push	{r7}
 801493c:	b083      	sub	sp, #12
 801493e:	af00      	add	r7, sp, #0
 8014940:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d002      	beq.n	801494e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	e000      	b.n	8014950 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801494e:	2300      	movs	r3, #0
}
 8014950:	4618      	mov	r0, r3
 8014952:	370c      	adds	r7, #12
 8014954:	46bd      	mov	sp, r7
 8014956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495a:	4770      	bx	lr

0801495c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801495c:	b590      	push	{r4, r7, lr}
 801495e:	b089      	sub	sp, #36	; 0x24
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
 8014968:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801496a:	6879      	ldr	r1, [r7, #4]
 801496c:	68b8      	ldr	r0, [r7, #8]
 801496e:	f7ff fa5e 	bl	8013e2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014972:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014974:	2300      	movs	r3, #0
 8014976:	61fb      	str	r3, [r7, #28]
 8014978:	69fa      	ldr	r2, [r7, #28]
 801497a:	69bb      	ldr	r3, [r7, #24]
 801497c:	429a      	cmp	r2, r3
 801497e:	da35      	bge.n	80149ec <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8014980:	69fb      	ldr	r3, [r7, #28]
 8014982:	683a      	ldr	r2, [r7, #0]
 8014984:	4413      	add	r3, r2
 8014986:	f993 3000 	ldrsb.w	r3, [r3]
 801498a:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	68db      	ldr	r3, [r3, #12]
 8014994:	697a      	ldr	r2, [r7, #20]
 8014996:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80149a0:	461a      	mov	r2, r3
 80149a2:	f7ff fa79 	bl	8013e98 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80149a6:	4603      	mov	r3, r0
        data.params.output_offset +
 80149a8:	4423      	add	r3, r4
    int32_t clamped =
 80149aa:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	3304      	adds	r3, #4
 80149b0:	f107 0210 	add.w	r2, r7, #16
 80149b4:	4611      	mov	r1, r2
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7ff f886 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 80149bc:	4603      	mov	r3, r0
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	3308      	adds	r3, #8
 80149c6:	f107 0210 	add.w	r2, r7, #16
 80149ca:	4611      	mov	r1, r2
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7ff f867 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 80149d2:	4603      	mov	r3, r0
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 80149d8:	6939      	ldr	r1, [r7, #16]
 80149da:	69fb      	ldr	r3, [r7, #28]
 80149dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149de:	4413      	add	r3, r2
 80149e0:	b24a      	sxtb	r2, r1
 80149e2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80149e4:	69fb      	ldr	r3, [r7, #28]
 80149e6:	3301      	adds	r3, #1
 80149e8:	61fb      	str	r3, [r7, #28]
 80149ea:	e7c5      	b.n	8014978 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 80149ec:	bf00      	nop
 80149ee:	3724      	adds	r7, #36	; 0x24
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd90      	pop	{r4, r7, pc}

080149f4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d101      	bne.n	8014a06 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8014a02:	f005 fce7 	bl	801a3d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
}
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	3708      	adds	r7, #8
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd80      	pop	{r7, pc}

08014a12 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8014a12:	b480      	push	{r7}
 8014a14:	b083      	sub	sp, #12
 8014a16:	af00      	add	r7, sp, #0
 8014a18:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d002      	beq.n	8014a26 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	e000      	b.n	8014a28 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8014a26:	2300      	movs	r3, #0
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	370c      	adds	r7, #12
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr

08014a34 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8014a34:	b590      	push	{r4, r7, lr}
 8014a36:	b089      	sub	sp, #36	; 0x24
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	60f8      	str	r0, [r7, #12]
 8014a3c:	60b9      	str	r1, [r7, #8]
 8014a3e:	607a      	str	r2, [r7, #4]
 8014a40:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014a42:	6879      	ldr	r1, [r7, #4]
 8014a44:	68b8      	ldr	r0, [r7, #8]
 8014a46:	f7ff f9f2 	bl	8013e2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014a4a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	61fb      	str	r3, [r7, #28]
 8014a50:	69fa      	ldr	r2, [r7, #28]
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	da34      	bge.n	8014ac2 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8014a58:	69fb      	ldr	r3, [r7, #28]
 8014a5a:	683a      	ldr	r2, [r7, #0]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	781b      	ldrb	r3, [r3, #0]
 8014a60:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	68db      	ldr	r3, [r3, #12]
 8014a6a:	697a      	ldr	r2, [r7, #20]
 8014a6c:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8014a76:	461a      	mov	r2, r3
 8014a78:	f7ff fa0e 	bl	8013e98 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014a7c:	4603      	mov	r3, r0
        data.params.output_offset +
 8014a7e:	4423      	add	r3, r4
    int32_t clamped =
 8014a80:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	3304      	adds	r3, #4
 8014a86:	f107 0210 	add.w	r2, r7, #16
 8014a8a:	4611      	mov	r1, r2
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7ff f81b 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 8014a92:	4603      	mov	r3, r0
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	3308      	adds	r3, #8
 8014a9c:	f107 0210 	add.w	r2, r7, #16
 8014aa0:	4611      	mov	r1, r2
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7fe fffc 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8014aae:	6939      	ldr	r1, [r7, #16]
 8014ab0:	69fb      	ldr	r3, [r7, #28]
 8014ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ab4:	4413      	add	r3, r2
 8014ab6:	b2ca      	uxtb	r2, r1
 8014ab8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	3301      	adds	r3, #1
 8014abe:	61fb      	str	r3, [r7, #28]
 8014ac0:	e7c6      	b.n	8014a50 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8014ac2:	bf00      	nop
 8014ac4:	3724      	adds	r7, #36	; 0x24
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd90      	pop	{r4, r7, pc}

08014aca <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8014aca:	b5b0      	push	{r4, r5, r7, lr}
 8014acc:	b088      	sub	sp, #32
 8014ace:	af00      	add	r7, sp, #0
 8014ad0:	ed87 0a03 	vstr	s0, [r7, #12]
 8014ad4:	edc7 0a02 	vstr	s1, [r7, #8]
 8014ad8:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8014ada:	ed97 7a03 	vldr	s14, [r7, #12]
 8014ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8014ae2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014ae6:	ee16 0a90 	vmov	r0, s13
 8014aea:	f7eb fd37 	bl	800055c <__aeabi_f2d>
 8014aee:	4602      	mov	r2, r0
 8014af0:	460b      	mov	r3, r1
 8014af2:	ec43 2b10 	vmov	d0, r2, r3
 8014af6:	f004 fa17 	bl	8018f28 <round>
 8014afa:	ec55 4b10 	vmov	r4, r5, d0
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f7eb fd1a 	bl	8000538 <__aeabi_i2d>
 8014b04:	4602      	mov	r2, r0
 8014b06:	460b      	mov	r3, r1
 8014b08:	4620      	mov	r0, r4
 8014b0a:	4629      	mov	r1, r5
 8014b0c:	f7eb fbc8 	bl	80002a0 <__adddf3>
 8014b10:	4602      	mov	r2, r0
 8014b12:	460b      	mov	r3, r1
 8014b14:	4610      	mov	r0, r2
 8014b16:	4619      	mov	r1, r3
 8014b18:	f7ec f828 	bl	8000b6c <__aeabi_d2iz>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8014b20:	f7fe fcea 	bl	80134f8 <_ZNSt14numeric_limitsIaE3minEv>
 8014b24:	4603      	mov	r3, r0
 8014b26:	61bb      	str	r3, [r7, #24]
 8014b28:	f107 0214 	add.w	r2, r7, #20
 8014b2c:	f107 0318 	add.w	r3, r7, #24
 8014b30:	4611      	mov	r1, r2
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fe ffc8 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 8014b38:	4603      	mov	r3, r0
  result =
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8014b3e:	f7fe fce4 	bl	801350a <_ZNSt14numeric_limitsIaE3maxEv>
 8014b42:	4603      	mov	r3, r0
 8014b44:	61fb      	str	r3, [r7, #28]
 8014b46:	f107 0214 	add.w	r2, r7, #20
 8014b4a:	f107 031c 	add.w	r3, r7, #28
 8014b4e:	4611      	mov	r1, r2
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7fe ffa5 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 8014b56:	4603      	mov	r3, r0
  result =
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	617b      	str	r3, [r7, #20]
  return result;
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	b25b      	sxtb	r3, r3
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3720      	adds	r7, #32
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bdb0      	pop	{r4, r5, r7, pc}

08014b68 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8014b68:	b5b0      	push	{r4, r5, r7, lr}
 8014b6a:	b088      	sub	sp, #32
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8014b72:	edc7 0a02 	vstr	s1, [r7, #8]
 8014b76:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8014b78:	ed97 7a03 	vldr	s14, [r7, #12]
 8014b7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8014b80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014b84:	ee16 0a90 	vmov	r0, s13
 8014b88:	f7eb fce8 	bl	800055c <__aeabi_f2d>
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	460b      	mov	r3, r1
 8014b90:	ec43 2b10 	vmov	d0, r2, r3
 8014b94:	f004 f9c8 	bl	8018f28 <round>
 8014b98:	ec55 4b10 	vmov	r4, r5, d0
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f7eb fccb 	bl	8000538 <__aeabi_i2d>
 8014ba2:	4602      	mov	r2, r0
 8014ba4:	460b      	mov	r3, r1
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	4629      	mov	r1, r5
 8014baa:	f7eb fb79 	bl	80002a0 <__adddf3>
 8014bae:	4602      	mov	r2, r0
 8014bb0:	460b      	mov	r3, r1
 8014bb2:	4610      	mov	r0, r2
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	f7eb ffd9 	bl	8000b6c <__aeabi_d2iz>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8014bbe:	f7fe fcac 	bl	801351a <_ZNSt14numeric_limitsIhE3minEv>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	61bb      	str	r3, [r7, #24]
 8014bc6:	f107 0214 	add.w	r2, r7, #20
 8014bca:	f107 0318 	add.w	r3, r7, #24
 8014bce:	4611      	mov	r1, r2
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7fe ff79 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 8014bd6:	4603      	mov	r3, r0
  result =
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8014bdc:	f7fe fca5 	bl	801352a <_ZNSt14numeric_limitsIhE3maxEv>
 8014be0:	4603      	mov	r3, r0
 8014be2:	61fb      	str	r3, [r7, #28]
 8014be4:	f107 0214 	add.w	r2, r7, #20
 8014be8:	f107 031c 	add.w	r3, r7, #28
 8014bec:	4611      	mov	r1, r2
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7fe ff56 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 8014bf4:	4603      	mov	r3, r0
  result =
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	617b      	str	r3, [r7, #20]
  return result;
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	b2db      	uxtb	r3, r3
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3720      	adds	r7, #32
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bdb0      	pop	{r4, r5, r7, pc}

08014c06 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8014c06:	b580      	push	{r7, lr}
 8014c08:	b088      	sub	sp, #32
 8014c0a:	af00      	add	r7, sp, #0
 8014c0c:	60ba      	str	r2, [r7, #8]
 8014c0e:	607b      	str	r3, [r7, #4]
 8014c10:	4603      	mov	r3, r0
 8014c12:	73fb      	strb	r3, [r7, #15]
 8014c14:	460b      	mov	r3, r1
 8014c16:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c1a:	68b8      	ldr	r0, [r7, #8]
 8014c1c:	f7ff f907 	bl	8013e2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014c20:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014c22:	2300      	movs	r3, #0
 8014c24:	61fb      	str	r3, [r7, #28]
 8014c26:	69fa      	ldr	r2, [r7, #28]
 8014c28:	69bb      	ldr	r3, [r7, #24]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	da26      	bge.n	8014c7c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8014c2e:	69fb      	ldr	r3, [r7, #28]
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	4413      	add	r3, r2
 8014c34:	781b      	ldrb	r3, [r3, #0]
 8014c36:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8014c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c3c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	dd04      	ble.n	8014c4e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8014c44:	f107 030e 	add.w	r3, r7, #14
 8014c48:	f993 3000 	ldrsb.w	r3, [r3]
 8014c4c:	e00c      	b.n	8014c68 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8014c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c52:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	da04      	bge.n	8014c64 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8014c5a:	f107 030f 	add.w	r3, r7, #15
 8014c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8014c62:	e001      	b.n	8014c68 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8014c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c68:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8014c6a:	69fb      	ldr	r3, [r7, #28]
 8014c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c6e:	4413      	add	r3, r2
 8014c70:	7dba      	ldrb	r2, [r7, #22]
 8014c72:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014c74:	69fb      	ldr	r3, [r7, #28]
 8014c76:	3301      	adds	r3, #1
 8014c78:	61fb      	str	r3, [r7, #28]
 8014c7a:	e7d4      	b.n	8014c26 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8014c7c:	bf00      	nop
 8014c7e:	3720      	adds	r7, #32
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b088      	sub	sp, #32
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	60ba      	str	r2, [r7, #8]
 8014c8c:	607b      	str	r3, [r7, #4]
 8014c8e:	4603      	mov	r3, r0
 8014c90:	73fb      	strb	r3, [r7, #15]
 8014c92:	460b      	mov	r3, r1
 8014c94:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8014c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c98:	68b8      	ldr	r0, [r7, #8]
 8014c9a:	f7ff f8c8 	bl	8013e2e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8014c9e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	61fb      	str	r3, [r7, #28]
 8014ca4:	69fa      	ldr	r2, [r7, #28]
 8014ca6:	69bb      	ldr	r3, [r7, #24]
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	da1f      	bge.n	8014cec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8014cac:	69fb      	ldr	r3, [r7, #28]
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	4413      	add	r3, r2
 8014cb2:	781b      	ldrb	r3, [r3, #0]
 8014cb4:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8014cb6:	7bbb      	ldrb	r3, [r7, #14]
 8014cb8:	7dfa      	ldrb	r2, [r7, #23]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d903      	bls.n	8014cc6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8014cbe:	f107 030e 	add.w	r3, r7, #14
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	e008      	b.n	8014cd8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8014cc6:	7bfb      	ldrb	r3, [r7, #15]
 8014cc8:	7dfa      	ldrb	r2, [r7, #23]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d203      	bcs.n	8014cd6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8014cce:	f107 030f 	add.w	r3, r7, #15
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	e000      	b.n	8014cd8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8014cd6:	7dfb      	ldrb	r3, [r7, #23]
 8014cd8:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8014cda:	69fb      	ldr	r3, [r7, #28]
 8014cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014cde:	4413      	add	r3, r2
 8014ce0:	7dba      	ldrb	r2, [r7, #22]
 8014ce2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8014ce4:	69fb      	ldr	r3, [r7, #28]
 8014ce6:	3301      	adds	r3, #1
 8014ce8:	61fb      	str	r3, [r7, #28]
 8014cea:	e7db      	b.n	8014ca4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8014cec:	bf00      	nop
 8014cee:	3720      	adds	r7, #32
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8014cf4:	b480      	push	{r7}
 8014cf6:	b083      	sub	sp, #12
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
  return x;
 8014cfc:	687b      	ldr	r3, [r7, #4]
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	370c      	adds	r7, #12
 8014d02:	46bd      	mov	sp, r7
 8014d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d08:	4770      	bx	lr

08014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8014d0a:	b480      	push	{r7}
 8014d0c:	b083      	sub	sp, #12
 8014d0e:	af00      	add	r7, sp, #0
 8014d10:	6078      	str	r0, [r7, #4]
 8014d12:	6039      	str	r1, [r7, #0]
  return a & b;
 8014d14:	687a      	ldr	r2, [r7, #4]
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	4013      	ands	r3, r2
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	370c      	adds	r7, #12
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d24:	4770      	bx	lr

08014d26 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8014d26:	b480      	push	{r7}
 8014d28:	b083      	sub	sp, #12
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	6078      	str	r0, [r7, #4]
 8014d2e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	fa42 f303 	asr.w	r3, r2, r3
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	370c      	adds	r7, #12
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d42:	4770      	bx	lr

08014d44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b082      	sub	sp, #8
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8014d4e:	687a      	ldr	r2, [r7, #4]
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	429a      	cmp	r2, r3
 8014d54:	bfb4      	ite	lt
 8014d56:	2301      	movlt	r3, #1
 8014d58:	2300      	movge	r3, #0
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f000 f827 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014d62:	4603      	mov	r3, r0
}
 8014d64:	4618      	mov	r0, r3
 8014d66:	3708      	adds	r7, #8
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}

08014d6c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8014d6c:	b480      	push	{r7}
 8014d6e:	b083      	sub	sp, #12
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
  return a + b;
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	4413      	add	r3, r2
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	370c      	adds	r7, #12
 8014d80:	46bd      	mov	sp, r7
 8014d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d86:	4770      	bx	lr

08014d88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b082      	sub	sp, #8
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8014d92:	687a      	ldr	r2, [r7, #4]
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	429a      	cmp	r2, r3
 8014d98:	bfcc      	ite	gt
 8014d9a:	2301      	movgt	r3, #1
 8014d9c:	2300      	movle	r3, #0
 8014d9e:	b2db      	uxtb	r3, r3
 8014da0:	4618      	mov	r0, r3
 8014da2:	f000 f805 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014da6:	4603      	mov	r3, r0
}
 8014da8:	4618      	mov	r0, r3
 8014daa:	3708      	adds	r7, #8
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}

08014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b082      	sub	sp, #8
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d004      	beq.n	8014dc8 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	f000 f807 	bl	8014dd2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	e000      	b.n	8014dca <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8014dc8:	2300      	movs	r3, #0
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3708      	adds	r7, #8
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}

08014dd2 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8014dd2:	b480      	push	{r7}
 8014dd4:	b083      	sub	sp, #12
 8014dd6:	af00      	add	r7, sp, #0
 8014dd8:	6078      	str	r0, [r7, #4]
  return ~a;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	43db      	mvns	r3, r3
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	370c      	adds	r7, #12
 8014de2:	46bd      	mov	sp, r7
 8014de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de8:	4770      	bx	lr

08014dea <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8014dea:	b480      	push	{r7}
 8014dec:	b083      	sub	sp, #12
 8014dee:	af00      	add	r7, sp, #0
 8014df0:	6078      	str	r0, [r7, #4]
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	370c      	adds	r7, #12
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr

08014e04 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8014e04:	b480      	push	{r7}
 8014e06:	b083      	sub	sp, #12
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	685b      	ldr	r3, [r3, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	4618      	mov	r0, r3
 8014e14:	370c      	adds	r7, #12
 8014e16:	46bd      	mov	sp, r7
 8014e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1c:	4770      	bx	lr

08014e1e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8014e1e:	b580      	push	{r7, lr}
 8014e20:	b082      	sub	sp, #8
 8014e22:	af00      	add	r7, sp, #0
 8014e24:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d101      	bne.n	8014e30 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8014e2c:	f005 fad2 	bl	801a3d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	681b      	ldr	r3, [r3, #0]
}
 8014e34:	4618      	mov	r0, r3
 8014e36:	3708      	adds	r7, #8
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8014e3c:	b590      	push	{r4, r7, lr}
 8014e3e:	b087      	sub	sp, #28
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	60f8      	str	r0, [r7, #12]
 8014e44:	60b9      	str	r1, [r7, #8]
 8014e46:	607a      	str	r2, [r7, #4]
 8014e48:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8014e4a:	68b9      	ldr	r1, [r7, #8]
 8014e4c:	68f8      	ldr	r0, [r7, #12]
 8014e4e:	f7fe ff93 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e52:	4604      	mov	r4, r0
 8014e54:	6839      	ldr	r1, [r7, #0]
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f7fe ff8e 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	429c      	cmp	r4, r3
 8014e60:	d001      	beq.n	8014e66 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8014e62:	f005 fab7 	bl	801a3d4 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8014e66:	68b9      	ldr	r1, [r7, #8]
 8014e68:	68f8      	ldr	r0, [r7, #12]
 8014e6a:	f7fe ff85 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	613b      	str	r3, [r7, #16]
 8014e72:	6839      	ldr	r1, [r7, #0]
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f7fe ff7f 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	617b      	str	r3, [r7, #20]
 8014e7e:	f107 0214 	add.w	r2, r7, #20
 8014e82:	f107 0310 	add.w	r3, r7, #16
 8014e86:	4611      	mov	r1, r2
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7fe fe09 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	681b      	ldr	r3, [r3, #0]
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	371c      	adds	r7, #28
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd90      	pop	{r4, r7, pc}

08014e9a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8014e9a:	b580      	push	{r7, lr}
 8014e9c:	b082      	sub	sp, #8
 8014e9e:	af00      	add	r7, sp, #0
 8014ea0:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d101      	bne.n	8014eac <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8014ea8:	f005 fa94 	bl	801a3d4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3708      	adds	r7, #8
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8014eb8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014ebc:	b090      	sub	sp, #64	; 0x40
 8014ebe:	af00      	add	r7, sp, #0
 8014ec0:	61f8      	str	r0, [r7, #28]
 8014ec2:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 8014ec4:	69fb      	ldr	r3, [r7, #28]
 8014ec6:	17da      	asrs	r2, r3, #31
 8014ec8:	613b      	str	r3, [r7, #16]
 8014eca:	617a      	str	r2, [r7, #20]
 8014ecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014ed0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 8014ed4:	69bb      	ldr	r3, [r7, #24]
 8014ed6:	17da      	asrs	r2, r3, #31
 8014ed8:	60bb      	str	r3, [r7, #8]
 8014eda:	60fa      	str	r2, [r7, #12]
 8014edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014ee0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 8014ee4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8014ee8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014eec:	1886      	adds	r6, r0, r2
 8014eee:	603e      	str	r6, [r7, #0]
 8014ef0:	eb41 0303 	adc.w	r3, r1, r3
 8014ef4:	607b      	str	r3, [r7, #4]
 8014ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014efa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8014efe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	db04      	blt.n	8014f10 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 8014f06:	f04f 0201 	mov.w	r2, #1
 8014f0a:	f04f 0300 	mov.w	r3, #0
 8014f0e:	e003      	b.n	8014f18 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 8014f10:	f04f 32ff 	mov.w	r2, #4294967295
 8014f14:	f04f 33ff 	mov.w	r3, #4294967295
 8014f18:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8014f1c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8014f20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014f24:	eb10 0802 	adds.w	r8, r0, r2
 8014f28:	eb41 0903 	adc.w	r9, r1, r3
 8014f2c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8014f30:	2200      	movs	r2, #0
 8014f32:	469a      	mov	sl, r3
 8014f34:	4693      	mov	fp, r2
 8014f36:	eb1a 0408 	adds.w	r4, sl, r8
 8014f3a:	eb4b 0509 	adc.w	r5, fp, r9
 8014f3e:	f04f 0200 	mov.w	r2, #0
 8014f42:	f04f 0300 	mov.w	r3, #0
 8014f46:	0862      	lsrs	r2, r4, #1
 8014f48:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8014f4c:	106b      	asrs	r3, r5, #1
 8014f4e:	4613      	mov	r3, r2
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3740      	adds	r7, #64	; 0x40
 8014f54:	46bd      	mov	sp, r7
 8014f56:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014f5a:	4770      	bx	lr

08014f5c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b084      	sub	sp, #16
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	60f8      	str	r0, [r7, #12]
 8014f64:	60b9      	str	r1, [r7, #8]
 8014f66:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8014f68:	68fa      	ldr	r2, [r7, #12]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8014f70:	68b9      	ldr	r1, [r7, #8]
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7fe fe8a 	bl	8013c8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014f78:	4603      	mov	r3, r0
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3710      	adds	r7, #16
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}

08014f82 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8014f82:	b580      	push	{r7, lr}
 8014f84:	b088      	sub	sp, #32
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	60f8      	str	r0, [r7, #12]
 8014f8a:	60b9      	str	r1, [r7, #8]
 8014f8c:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	4618      	mov	r0, r3
 8014f92:	f000 f821 	bl	8014fd8 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8014f96:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	1ad2      	subs	r2, r2, r3
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 8014fa2:	68fa      	ldr	r2, [r7, #12]
 8014fa4:	69fb      	ldr	r3, [r7, #28]
 8014fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8014faa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8014fae:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 8014fb0:	69b8      	ldr	r0, [r7, #24]
 8014fb2:	f000 f823 	bl	8014ffc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	4618      	mov	r0, r3
 8014fba:	f000 f831 	bl	8015020 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8014fc2:	f107 0314 	add.w	r3, r7, #20
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f000 f88a 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	681b      	ldr	r3, [r3, #0]
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3720      	adds	r7, #32
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8014fd8:	b480      	push	{r7}
 8014fda:	b083      	sub	sp, #12
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d003      	beq.n	8014fee <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8014fec:	e000      	b.n	8014ff0 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8014fee:	2320      	movs	r3, #32
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b084      	sub	sp, #16
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 8015004:	f107 030c 	add.w	r3, r7, #12
 8015008:	4618      	mov	r0, r3
 801500a:	f000 f869 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801500e:	4602      	mov	r2, r0
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	6013      	str	r3, [r2, #0]
    return retval;
 8015014:	68fb      	ldr	r3, [r7, #12]
  }
 8015016:	4618      	mov	r0, r3
 8015018:	3710      	adds	r7, #16
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
	...

08015020 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8015020:	b580      	push	{r7, lr}
 8015022:	b08a      	sub	sp, #40	; 0x28
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8015028:	f000 f879 	bl	801511e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801502c:	4603      	mov	r3, r0
 801502e:	4619      	mov	r1, r3
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f000 f87f 	bl	8015134 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015036:	4603      	mov	r3, r0
 8015038:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 801503a:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 801503e:	f000 f8ab 	bl	8015198 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8015042:	4603      	mov	r3, r0
 8015044:	4618      	mov	r0, r3
 8015046:	f000 f893 	bl	8015170 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801504a:	4603      	mov	r3, r0
 801504c:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801504e:	4823      	ldr	r0, [pc, #140]	; (80150dc <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8015050:	f000 f8a2 	bl	8015198 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8015054:	4603      	mov	r3, r0
 8015056:	4618      	mov	r0, r3
 8015058:	f000 f88a 	bl	8015170 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801505c:	4603      	mov	r3, r0
 801505e:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8015060:	69b9      	ldr	r1, [r7, #24]
 8015062:	6a38      	ldr	r0, [r7, #32]
 8015064:	f000 f8a5 	bl	80151b2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015068:	4603      	mov	r3, r0
 801506a:	4619      	mov	r1, r3
 801506c:	69f8      	ldr	r0, [r7, #28]
 801506e:	f000 f8c2 	bl	80151f6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015072:	4603      	mov	r3, r0
 8015074:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8015076:	2300      	movs	r3, #0
 8015078:	627b      	str	r3, [r7, #36]	; 0x24
 801507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507c:	2b02      	cmp	r3, #2
 801507e:	dc21      	bgt.n	80150c4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8015080:	6979      	ldr	r1, [r7, #20]
 8015082:	6a38      	ldr	r0, [r7, #32]
 8015084:	f000 f895 	bl	80151b2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015088:	4603      	mov	r3, r0
 801508a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801508c:	f000 f8d1 	bl	8015232 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8015090:	4603      	mov	r3, r0
 8015092:	6939      	ldr	r1, [r7, #16]
 8015094:	4618      	mov	r0, r3
 8015096:	f000 f8d5 	bl	8015244 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801509a:	4603      	mov	r3, r0
 801509c:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801509e:	68f9      	ldr	r1, [r7, #12]
 80150a0:	6978      	ldr	r0, [r7, #20]
 80150a2:	f000 f8ed 	bl	8015280 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80150a6:	4603      	mov	r3, r0
 80150a8:	4618      	mov	r0, r3
 80150aa:	f000 f90b 	bl	80152c4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80150ae:	4603      	mov	r3, r0
 80150b0:	4619      	mov	r1, r3
 80150b2:	6978      	ldr	r0, [r7, #20]
 80150b4:	f000 f89f 	bl	80151f6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80150b8:	4603      	mov	r3, r0
 80150ba:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 80150bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150be:	3301      	adds	r3, #1
 80150c0:	627b      	str	r3, [r7, #36]	; 0x24
 80150c2:	e7da      	b.n	801507a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 80150c4:	6978      	ldr	r0, [r7, #20]
 80150c6:	f000 f917 	bl	80152f8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 80150ca:	4603      	mov	r3, r0
 80150cc:	4618      	mov	r0, r3
 80150ce:	f000 f929 	bl	8015324 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80150d2:	4603      	mov	r3, r0
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3728      	adds	r7, #40	; 0x28
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	c3c3c3c4 	.word	0xc3c3c3c4

080150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 80150e0:	b480      	push	{r7}
 80150e2:	b083      	sub	sp, #12
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	4618      	mov	r0, r3
 80150ec:	370c      	adds	r7, #12
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr

080150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80150f6:	b590      	push	{r4, r7, lr}
 80150f8:	b085      	sub	sp, #20
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80150fe:	f107 030c 	add.w	r3, r7, #12
 8015102:	4618      	mov	r0, r3
 8015104:	f7ff ffec 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015108:	4604      	mov	r4, r0
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7ff fdf2 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015110:	4603      	mov	r3, r0
 8015112:	6023      	str	r3, [r4, #0]
    return retval;
 8015114:	68fb      	ldr	r3, [r7, #12]
  }
 8015116:	4618      	mov	r0, r3
 8015118:	3714      	adds	r7, #20
 801511a:	46bd      	mov	sp, r7
 801511c:	bd90      	pop	{r4, r7, pc}

0801511e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 801511e:	b580      	push	{r7, lr}
 8015120:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8015122:	f000 f927 	bl	8015374 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8015126:	4603      	mov	r3, r0
 8015128:	4618      	mov	r0, r3
 801512a:	f7ff ffe4 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801512e:	4603      	mov	r3, r0
  }
 8015130:	4618      	mov	r0, r3
 8015132:	bd80      	pop	{r7, pc}

08015134 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8015134:	b590      	push	{r4, r7, lr}
 8015136:	b083      	sub	sp, #12
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
 801513e:	1d3b      	adds	r3, r7, #4
 8015140:	4618      	mov	r0, r3
 8015142:	f7ff ffcd 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015146:	4603      	mov	r3, r0
 8015148:	681c      	ldr	r4, [r3, #0]
 801514a:	463b      	mov	r3, r7
 801514c:	4618      	mov	r0, r3
 801514e:	f7ff ffc7 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015152:	4603      	mov	r3, r0
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	4619      	mov	r1, r3
 8015158:	4620      	mov	r0, r4
 801515a:	f7ff fead 	bl	8014eb8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801515e:	4603      	mov	r3, r0
 8015160:	4618      	mov	r0, r3
 8015162:	f7ff ff4b 	bl	8014ffc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015166:	4603      	mov	r3, r0
 8015168:	4618      	mov	r0, r3
 801516a:	370c      	adds	r7, #12
 801516c:	46bd      	mov	sp, r7
 801516e:	bd90      	pop	{r4, r7, pc}

08015170 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015170:	b590      	push	{r4, r7, lr}
 8015172:	b085      	sub	sp, #20
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015178:	f107 030c 	add.w	r3, r7, #12
 801517c:	4618      	mov	r0, r3
 801517e:	f000 f900 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015182:	4604      	mov	r4, r0
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f7ff fdb5 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801518a:	4603      	mov	r3, r0
 801518c:	6023      	str	r3, [r4, #0]
    return retval;
 801518e:	68fb      	ldr	r3, [r7, #12]
  }
 8015190:	4618      	mov	r0, r3
 8015192:	3714      	adds	r7, #20
 8015194:	46bd      	mov	sp, r7
 8015196:	bd90      	pop	{r4, r7, pc}

08015198 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80151a0:	2100      	movs	r1, #0
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f7ff f9e2 	bl	801456c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80151a8:	4603      	mov	r3, r0
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	3708      	adds	r7, #8
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}

080151b2 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80151b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151b4:	b085      	sub	sp, #20
 80151b6:	af00      	add	r7, sp, #0
 80151b8:	6078      	str	r0, [r7, #4]
 80151ba:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80151bc:	1d3b      	adds	r3, r7, #4
 80151be:	4618      	mov	r0, r3
 80151c0:	f7ff ff8e 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80151c4:	4603      	mov	r3, r0
 80151c6:	681d      	ldr	r5, [r3, #0]
 80151c8:	463b      	mov	r3, r7
 80151ca:	4618      	mov	r0, r3
 80151cc:	f000 f8d9 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80151d0:	4603      	mov	r3, r0
 80151d2:	681e      	ldr	r6, [r3, #0]
 80151d4:	f107 030c 	add.w	r3, r7, #12
 80151d8:	4618      	mov	r0, r3
 80151da:	f000 f8d2 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80151de:	4604      	mov	r4, r0
 80151e0:	4631      	mov	r1, r6
 80151e2:	4628      	mov	r0, r5
 80151e4:	f7fe fd52 	bl	8013c8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80151e8:	4603      	mov	r3, r0
 80151ea:	6023      	str	r3, [r4, #0]
  return c;
 80151ec:	68fb      	ldr	r3, [r7, #12]
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3714      	adds	r7, #20
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080151f6 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80151f6:	b590      	push	{r4, r7, lr}
 80151f8:	b083      	sub	sp, #12
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	6078      	str	r0, [r7, #4]
 80151fe:	6039      	str	r1, [r7, #0]
 8015200:	1d3b      	adds	r3, r7, #4
 8015202:	4618      	mov	r0, r3
 8015204:	f000 f8bd 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015208:	4603      	mov	r3, r0
 801520a:	681c      	ldr	r4, [r3, #0]
 801520c:	463b      	mov	r3, r7
 801520e:	4618      	mov	r0, r3
 8015210:	f000 f8b7 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015214:	4603      	mov	r3, r0
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	4619      	mov	r1, r3
 801521a:	4620      	mov	r0, r4
 801521c:	f7ff fda6 	bl	8014d6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015220:	4603      	mov	r3, r0
 8015222:	4618      	mov	r0, r3
 8015224:	f000 f8b8 	bl	8015398 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8015228:	4603      	mov	r3, r0
 801522a:	4618      	mov	r0, r3
 801522c:	370c      	adds	r7, #12
 801522e:	46bd      	mov	sp, r7
 8015230:	bd90      	pop	{r4, r7, pc}

08015232 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8015232:	b580      	push	{r7, lr}
 8015234:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8015236:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801523a:	f7ff ff99 	bl	8015170 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801523e:	4603      	mov	r3, r0
  }
 8015240:	4618      	mov	r0, r3
 8015242:	bd80      	pop	{r7, pc}

08015244 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8015244:	b590      	push	{r4, r7, lr}
 8015246:	b083      	sub	sp, #12
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	6039      	str	r1, [r7, #0]
 801524e:	1d3b      	adds	r3, r7, #4
 8015250:	4618      	mov	r0, r3
 8015252:	f000 f896 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015256:	4603      	mov	r3, r0
 8015258:	681c      	ldr	r4, [r3, #0]
 801525a:	463b      	mov	r3, r7
 801525c:	4618      	mov	r0, r3
 801525e:	f000 f890 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015262:	4603      	mov	r3, r0
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	4619      	mov	r1, r3
 8015268:	4620      	mov	r0, r4
 801526a:	f000 f875 	bl	8015358 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801526e:	4603      	mov	r3, r0
 8015270:	4618      	mov	r0, r3
 8015272:	f000 f891 	bl	8015398 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8015276:	4603      	mov	r3, r0
 8015278:	4618      	mov	r0, r3
 801527a:	370c      	adds	r7, #12
 801527c:	46bd      	mov	sp, r7
 801527e:	bd90      	pop	{r4, r7, pc}

08015280 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8015280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015282:	b085      	sub	sp, #20
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801528a:	1d3b      	adds	r3, r7, #4
 801528c:	4618      	mov	r0, r3
 801528e:	f000 f878 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015292:	4603      	mov	r3, r0
 8015294:	681d      	ldr	r5, [r3, #0]
 8015296:	463b      	mov	r3, r7
 8015298:	4618      	mov	r0, r3
 801529a:	f000 f872 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801529e:	4603      	mov	r3, r0
 80152a0:	681e      	ldr	r6, [r3, #0]
 80152a2:	f107 030c 	add.w	r3, r7, #12
 80152a6:	4618      	mov	r0, r3
 80152a8:	f000 f887 	bl	80153ba <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80152ac:	4604      	mov	r4, r0
 80152ae:	4631      	mov	r1, r6
 80152b0:	4628      	mov	r0, r5
 80152b2:	f7fe fceb 	bl	8013c8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80152b6:	4603      	mov	r3, r0
 80152b8:	6023      	str	r3, [r4, #0]
  return c;
 80152ba:	68fb      	ldr	r3, [r7, #12]
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3714      	adds	r7, #20
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080152c4 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80152c4:	b5b0      	push	{r4, r5, r7, lr}
 80152c6:	b084      	sub	sp, #16
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80152cc:	1d3b      	adds	r3, r7, #4
 80152ce:	4618      	mov	r0, r3
 80152d0:	f000 f873 	bl	80153ba <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80152d4:	4603      	mov	r3, r0
 80152d6:	681d      	ldr	r5, [r3, #0]
 80152d8:	f107 030c 	add.w	r3, r7, #12
 80152dc:	4618      	mov	r0, r3
 80152de:	f000 f850 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80152e2:	4604      	mov	r4, r0
 80152e4:	4628      	mov	r0, r5
 80152e6:	f000 f873 	bl	80153d0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 80152ea:	4603      	mov	r3, r0
 80152ec:	6023      	str	r3, [r4, #0]
  return result;
 80152ee:	68fb      	ldr	r3, [r7, #12]
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3710      	adds	r7, #16
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bdb0      	pop	{r4, r5, r7, pc}

080152f8 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 80152f8:	b590      	push	{r4, r7, lr}
 80152fa:	b085      	sub	sp, #20
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8015300:	1d3b      	adds	r3, r7, #4
 8015302:	4618      	mov	r0, r3
 8015304:	f000 f83d 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8015308:	4604      	mov	r4, r0
 801530a:	f107 030c 	add.w	r3, r7, #12
 801530e:	4618      	mov	r0, r3
 8015310:	f000 f86a 	bl	80153e8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8015314:	4602      	mov	r2, r0
 8015316:	6823      	ldr	r3, [r4, #0]
 8015318:	6013      	str	r3, [r2, #0]
  return c;
 801531a:	68fb      	ldr	r3, [r7, #12]
}
 801531c:	4618      	mov	r0, r3
 801531e:	3714      	adds	r7, #20
 8015320:	46bd      	mov	sp, r7
 8015322:	bd90      	pop	{r4, r7, pc}

08015324 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015324:	b5b0      	push	{r4, r5, r7, lr}
 8015326:	b084      	sub	sp, #16
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801532c:	1d3b      	adds	r3, r7, #4
 801532e:	4618      	mov	r0, r3
 8015330:	f000 f85a 	bl	80153e8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8015334:	4603      	mov	r3, r0
 8015336:	681d      	ldr	r5, [r3, #0]
 8015338:	f107 030c 	add.w	r3, r7, #12
 801533c:	4618      	mov	r0, r3
 801533e:	f7ff fecf 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015342:	4604      	mov	r4, r0
 8015344:	4628      	mov	r0, r5
 8015346:	f000 f85a 	bl	80153fe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801534a:	4603      	mov	r3, r0
 801534c:	6023      	str	r3, [r4, #0]
  return result;
 801534e:	68fb      	ldr	r3, [r7, #12]
}
 8015350:	4618      	mov	r0, r3
 8015352:	3710      	adds	r7, #16
 8015354:	46bd      	mov	sp, r7
 8015356:	bdb0      	pop	{r4, r5, r7, pc}

08015358 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	6039      	str	r1, [r7, #0]
  return a - b;
 8015362:	687a      	ldr	r2, [r7, #4]
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	1ad3      	subs	r3, r2, r3
}
 8015368:	4618      	mov	r0, r3
 801536a:	370c      	adds	r7, #12
 801536c:	46bd      	mov	sp, r7
 801536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015372:	4770      	bx	lr

08015374 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8015374:	b580      	push	{r7, lr}
 8015376:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8015378:	f7fd fefc 	bl	8013174 <_ZNSt14numeric_limitsIlE3maxEv>
 801537c:	4603      	mov	r3, r0
  }
 801537e:	4618      	mov	r0, r3
 8015380:	bd80      	pop	{r7, pc}

08015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8015382:	b480      	push	{r7}
 8015384:	b083      	sub	sp, #12
 8015386:	af00      	add	r7, sp, #0
 8015388:	6078      	str	r0, [r7, #4]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	4618      	mov	r0, r3
 801538e:	370c      	adds	r7, #12
 8015390:	46bd      	mov	sp, r7
 8015392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015396:	4770      	bx	lr

08015398 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015398:	b580      	push	{r7, lr}
 801539a:	b084      	sub	sp, #16
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80153a0:	f107 030c 	add.w	r3, r7, #12
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7ff ffec 	bl	8015382 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80153aa:	4602      	mov	r2, r0
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	6013      	str	r3, [r2, #0]
    return retval;
 80153b0:	68fb      	ldr	r3, [r7, #12]
  }
 80153b2:	4618      	mov	r0, r3
 80153b4:	3710      	adds	r7, #16
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}

080153ba <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 80153ba:	b480      	push	{r7}
 80153bc:	b083      	sub	sp, #12
 80153be:	af00      	add	r7, sp, #0
 80153c0:	6078      	str	r0, [r7, #4]
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	4618      	mov	r0, r3
 80153c6:	370c      	adds	r7, #12
 80153c8:	46bd      	mov	sp, r7
 80153ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ce:	4770      	bx	lr

080153d0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b082      	sub	sp, #8
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	f000 f81d 	bl	8015418 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 80153de:	4603      	mov	r3, r0
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3708      	adds	r7, #8
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 80153e8:	b480      	push	{r7}
 80153ea:	b083      	sub	sp, #12
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	4618      	mov	r0, r3
 80153f4:	370c      	adds	r7, #12
 80153f6:	46bd      	mov	sp, r7
 80153f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fc:	4770      	bx	lr

080153fe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80153fe:	b580      	push	{r7, lr}
 8015400:	b082      	sub	sp, #8
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f000 f848 	bl	801549c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 801540c:	4603      	mov	r3, r0
}
 801540e:	4618      	mov	r0, r3
 8015410:	3708      	adds	r7, #8
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
	...

08015418 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015418:	b580      	push	{r7, lr}
 801541a:	b08a      	sub	sp, #40	; 0x28
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8015420:	f7fe fc1f 	bl	8013c62 <_ZNSt14numeric_limitsIlE3minEv>
 8015424:	4603      	mov	r3, r0
 8015426:	4618      	mov	r0, r3
 8015428:	f7ff fc64 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801542c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801542e:	f7fd fea1 	bl	8013174 <_ZNSt14numeric_limitsIlE3maxEv>
 8015432:	4603      	mov	r3, r0
 8015434:	4618      	mov	r0, r3
 8015436:	f7ff fc5d 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801543a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801543c:	2320      	movs	r3, #32
 801543e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8015440:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8015444:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8015446:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801544a:	f7ff fc53 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801544e:	4603      	mov	r3, r0
 8015450:	4619      	mov	r1, r3
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f7ff fc98 	bl	8014d88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8015458:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801545a:	480f      	ldr	r0, [pc, #60]	; (8015498 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 801545c:	f7ff fc4a 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015460:	4603      	mov	r3, r0
 8015462:	4619      	mov	r1, r3
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f7ff fc6d 	bl	8014d44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801546a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801546c:	2102      	movs	r1, #2
 801546e:	6878      	ldr	r0, [r7, #4]
 8015470:	f000 f856 	bl	8015520 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8015474:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	6a39      	ldr	r1, [r7, #32]
 801547a:	6978      	ldr	r0, [r7, #20]
 801547c:	f000 f894 	bl	80155a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015480:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8015482:	68fa      	ldr	r2, [r7, #12]
 8015484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015486:	6938      	ldr	r0, [r7, #16]
 8015488:	f000 f88e 	bl	80155a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801548c:	60f8      	str	r0, [r7, #12]
    return result;
 801548e:	68fb      	ldr	r3, [r7, #12]
  }
 8015490:	4618      	mov	r0, r3
 8015492:	3728      	adds	r7, #40	; 0x28
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}
 8015498:	e0000001 	.word	0xe0000001

0801549c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801549c:	b580      	push	{r7, lr}
 801549e:	b08a      	sub	sp, #40	; 0x28
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80154a4:	f7fe fbdd 	bl	8013c62 <_ZNSt14numeric_limitsIlE3minEv>
 80154a8:	4603      	mov	r3, r0
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7ff fc22 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80154b0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80154b2:	f7fd fe5f 	bl	8013174 <_ZNSt14numeric_limitsIlE3maxEv>
 80154b6:	4603      	mov	r3, r0
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7ff fc1b 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80154be:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80154c0:	2320      	movs	r3, #32
 80154c2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80154c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80154c8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80154ca:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80154ce:	f7ff fc11 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80154d2:	4603      	mov	r3, r0
 80154d4:	4619      	mov	r1, r3
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	f7ff fc56 	bl	8014d88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80154dc:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80154de:	480f      	ldr	r0, [pc, #60]	; (801551c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 80154e0:	f7ff fc08 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80154e4:	4603      	mov	r3, r0
 80154e6:	4619      	mov	r1, r3
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f7ff fc2b 	bl	8014d44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80154ee:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80154f0:	2101      	movs	r1, #1
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f000 f814 	bl	8015520 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80154f8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80154fa:	68fa      	ldr	r2, [r7, #12]
 80154fc:	6a39      	ldr	r1, [r7, #32]
 80154fe:	6978      	ldr	r0, [r7, #20]
 8015500:	f000 f852 	bl	80155a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015504:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8015506:	68fa      	ldr	r2, [r7, #12]
 8015508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801550a:	6938      	ldr	r0, [r7, #16]
 801550c:	f000 f84c 	bl	80155a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015510:	60f8      	str	r0, [r7, #12]
    return result;
 8015512:	68fb      	ldr	r3, [r7, #12]
  }
 8015514:	4618      	mov	r0, r3
 8015516:	3728      	adds	r7, #40	; 0x28
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	c0000001 	.word	0xc0000001

08015520 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8015520:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8015524:	b089      	sub	sp, #36	; 0x24
 8015526:	af00      	add	r7, sp, #0
 8015528:	6078      	str	r0, [r7, #4]
 801552a:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801552c:	6879      	ldr	r1, [r7, #4]
 801552e:	17c8      	asrs	r0, r1, #31
 8015530:	4688      	mov	r8, r1
 8015532:	4681      	mov	r9, r0
 8015534:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8015538:	2001      	movs	r0, #1
 801553a:	6839      	ldr	r1, [r7, #0]
 801553c:	fa00 f101 	lsl.w	r1, r0, r1
 8015540:	17c8      	asrs	r0, r1, #31
 8015542:	460c      	mov	r4, r1
 8015544:	4605      	mov	r5, r0
 8015546:	69f9      	ldr	r1, [r7, #28]
 8015548:	fb04 f001 	mul.w	r0, r4, r1
 801554c:	69b9      	ldr	r1, [r7, #24]
 801554e:	fb05 f101 	mul.w	r1, r5, r1
 8015552:	4401      	add	r1, r0
 8015554:	69b8      	ldr	r0, [r7, #24]
 8015556:	fba0 2304 	umull	r2, r3, r0, r4
 801555a:	4419      	add	r1, r3
 801555c:	460b      	mov	r3, r1
 801555e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8015562:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8015566:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801556a:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801556c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015570:	60bb      	str	r3, [r7, #8]
             ? min
 8015572:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015576:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801557a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801557e:	db0b      	blt.n	8015598 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 8015580:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015584:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8015588:	f173 0300 	sbcs.w	r3, r3, #0
 801558c:	da01      	bge.n	8015592 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 801558e:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8015590:	e004      	b.n	801559c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8015592:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8015596:	e001      	b.n	801559c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 8015598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801559c:	4618      	mov	r0, r3
 801559e:	3724      	adds	r7, #36	; 0x24
 80155a0:	46bd      	mov	sp, r7
 80155a2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80155a6:	4770      	bx	lr

080155a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 80155a8:	b590      	push	{r4, r7, lr}
 80155aa:	b085      	sub	sp, #20
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	60f8      	str	r0, [r7, #12]
 80155b0:	60b9      	str	r1, [r7, #8]
 80155b2:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 80155b4:	68b9      	ldr	r1, [r7, #8]
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f7ff fba7 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80155bc:	4604      	mov	r4, r0
 80155be:	68f8      	ldr	r0, [r7, #12]
 80155c0:	f7ff fc07 	bl	8014dd2 <_ZN8gemmlowp6BitNotIlEET_S1_>
 80155c4:	4603      	mov	r3, r0
 80155c6:	6879      	ldr	r1, [r7, #4]
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7ff fb9e 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80155ce:	4603      	mov	r3, r0
 80155d0:	4619      	mov	r1, r3
 80155d2:	4620      	mov	r0, r4
 80155d4:	f000 f805 	bl	80155e2 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 80155d8:	4603      	mov	r3, r0
}
 80155da:	4618      	mov	r0, r3
 80155dc:	3714      	adds	r7, #20
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd90      	pop	{r4, r7, pc}

080155e2 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 80155e2:	b480      	push	{r7}
 80155e4:	b083      	sub	sp, #12
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	6078      	str	r0, [r7, #4]
 80155ea:	6039      	str	r1, [r7, #0]
  return a ^ b;
 80155ec:	687a      	ldr	r2, [r7, #4]
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	4053      	eors	r3, r2
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	370c      	adds	r7, #12
 80155f6:	46bd      	mov	sp, r7
 80155f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fc:	4770      	bx	lr

080155fe <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80155fe:	b580      	push	{r7, lr}
 8015600:	b084      	sub	sp, #16
 8015602:	af00      	add	r7, sp, #0
 8015604:	60f8      	str	r0, [r7, #12]
 8015606:	60b9      	str	r1, [r7, #8]
 8015608:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801560e:	2b00      	cmp	r3, #0
 8015610:	d101      	bne.n	8015616 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8015612:	f004 fedf 	bl	801a3d4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801561a:	2124      	movs	r1, #36	; 0x24
 801561c:	68f8      	ldr	r0, [r7, #12]
 801561e:	4798      	blx	r3
 8015620:	4603      	mov	r3, r0
}
 8015622:	4618      	mov	r0, r3
 8015624:	3710      	adds	r7, #16
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}
	...

0801562c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801562c:	b5b0      	push	{r4, r5, r7, lr}
 801562e:	b0a0      	sub	sp, #128	; 0x80
 8015630:	af04      	add	r7, sp, #16
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
 8015636:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	691b      	ldr	r3, [r3, #16]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d101      	bne.n	8015644 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8015640:	f004 fec8 	bl	801a3d4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	695b      	ldr	r3, [r3, #20]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d101      	bne.n	8015650 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801564c:	f004 fec2 	bl	801a3d4 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	691b      	ldr	r3, [r3, #16]
 8015654:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	695b      	ldr	r3, [r3, #20]
 801565a:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 801565c:	4b81      	ldr	r3, [pc, #516]	; (8015864 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	461a      	mov	r2, r3
 8015662:	6839      	ldr	r1, [r7, #0]
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f7fd fff9 	bl	801365c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801566a:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 801566c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801566e:	2b00      	cmp	r3, #0
 8015670:	d10a      	bne.n	8015688 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	695c      	ldr	r4, [r3, #20]
 8015676:	4b7c      	ldr	r3, [pc, #496]	; (8015868 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	2340      	movs	r3, #64	; 0x40
 801567c:	4a7b      	ldr	r2, [pc, #492]	; (801586c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801567e:	497c      	ldr	r1, [pc, #496]	; (8015870 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	47a0      	blx	r4
 8015684:	2401      	movs	r4, #1
 8015686:	e0e7      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 8015688:	4b7a      	ldr	r3, [pc, #488]	; (8015874 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	461a      	mov	r2, r3
 801568e:	6839      	ldr	r1, [r7, #0]
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f7fd ffe3 	bl	801365c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8015696:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 8015698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801569a:	2b00      	cmp	r3, #0
 801569c:	d10a      	bne.n	80156b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	695c      	ldr	r4, [r3, #20]
 80156a2:	4b75      	ldr	r3, [pc, #468]	; (8015878 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 80156a4:	9300      	str	r3, [sp, #0]
 80156a6:	2343      	movs	r3, #67	; 0x43
 80156a8:	4a70      	ldr	r2, [pc, #448]	; (801586c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80156aa:	4971      	ldr	r1, [pc, #452]	; (8015870 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	47a0      	blx	r4
 80156b0:	2401      	movs	r4, #1
 80156b2:	e0d1      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 80156b4:	4b71      	ldr	r3, [pc, #452]	; (801587c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	461a      	mov	r2, r3
 80156ba:	6839      	ldr	r1, [r7, #0]
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f7fd fffd 	bl	80136bc <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 80156c2:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 80156c4:	4b6e      	ldr	r3, [pc, #440]	; (8015880 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	461a      	mov	r2, r3
 80156ca:	6839      	ldr	r1, [r7, #0]
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	f7fd ffd5 	bl	801367c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80156d2:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 80156d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d10a      	bne.n	80156f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	695c      	ldr	r4, [r3, #20]
 80156de:	4b69      	ldr	r3, [pc, #420]	; (8015884 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 80156e0:	9300      	str	r3, [sp, #0]
 80156e2:	2347      	movs	r3, #71	; 0x47
 80156e4:	4a61      	ldr	r2, [pc, #388]	; (801586c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80156e6:	4962      	ldr	r1, [pc, #392]	; (8015870 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	47a0      	blx	r4
 80156ec:	2401      	movs	r4, #1
 80156ee:	e0b3      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80156f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156f2:	781a      	ldrb	r2, [r3, #0]
 80156f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d01a      	beq.n	8015732 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	695c      	ldr	r4, [r3, #20]
 8015700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	4618      	mov	r0, r3
 8015706:	f7fd fcb9 	bl	801307c <TfLiteTypeGetName>
 801570a:	4605      	mov	r5, r0
 801570c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	4618      	mov	r0, r3
 8015712:	f7fd fcb3 	bl	801307c <TfLiteTypeGetName>
 8015716:	4603      	mov	r3, r0
 8015718:	9303      	str	r3, [sp, #12]
 801571a:	9502      	str	r5, [sp, #8]
 801571c:	4b5a      	ldr	r3, [pc, #360]	; (8015888 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801571e:	9301      	str	r3, [sp, #4]
 8015720:	4b5a      	ldr	r3, [pc, #360]	; (801588c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8015722:	9300      	str	r3, [sp, #0]
 8015724:	2349      	movs	r3, #73	; 0x49
 8015726:	4a51      	ldr	r2, [pc, #324]	; (801586c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8015728:	4959      	ldr	r1, [pc, #356]	; (8015890 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	47a0      	blx	r4
 801572e:	2401      	movs	r4, #1
 8015730:	e092      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8015732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015734:	781a      	ldrb	r2, [r3, #0]
 8015736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	429a      	cmp	r2, r3
 801573c:	d006      	beq.n	801574c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	695b      	ldr	r3, [r3, #20]
 8015742:	4954      	ldr	r1, [pc, #336]	; (8015894 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8015744:	6878      	ldr	r0, [r7, #4]
 8015746:	4798      	blx	r3
 8015748:	2401      	movs	r4, #1
 801574a:	e085      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801574e:	f04f 32ff 	mov.w	r2, #4294967295
 8015752:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8015754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015756:	7819      	ldrb	r1, [r3, #0]
 8015758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801575a:	781a      	ldrb	r2, [r3, #0]
 801575c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801575e:	9303      	str	r3, [sp, #12]
 8015760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015762:	9302      	str	r3, [sp, #8]
 8015764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015766:	9301      	str	r3, [sp, #4]
 8015768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801576a:	9300      	str	r3, [sp, #0]
 801576c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f000 fae4 	bl	8015d3c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8015774:	4603      	mov	r3, r0
 8015776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801577a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801577e:	2b00      	cmp	r3, #0
 8015780:	d002      	beq.n	8015788 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 8015782:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8015786:	e067      	b.n	8015858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 8015788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	2b09      	cmp	r3, #9
 801578e:	d162      	bne.n	8015856 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8015790:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015794:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015796:	4618      	mov	r0, r3
 8015798:	f7fe fa45 	bl	8013c26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801579c:	f107 0318 	add.w	r3, r7, #24
 80157a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7fe fa3f 	bl	8013c26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80157a8:	f107 0318 	add.w	r3, r7, #24
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7fe f9d6 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80157b2:	4603      	mov	r3, r0
 80157b4:	2b02      	cmp	r3, #2
 80157b6:	d001      	beq.n	80157bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 80157b8:	f004 fe0c 	bl	801a3d4 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 80157bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7fe f9cc 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80157c6:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 80157c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157ca:	1e5a      	subs	r2, r3, #1
 80157cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80157d0:	4611      	mov	r1, r2
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7fe fad0 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 80157d8:	4603      	mov	r3, r0
 80157da:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 80157dc:	2301      	movs	r3, #1
 80157de:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 80157e0:	2301      	movs	r3, #1
 80157e2:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 80157e4:	f107 0318 	add.w	r3, r7, #24
 80157e8:	2101      	movs	r1, #1
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7fe fac4 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 80157f0:	4603      	mov	r3, r0
 80157f2:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 80157f4:	f107 0308 	add.w	r3, r7, #8
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7f6 fc08 	bl	800c00e <arm_fully_connected_s8_get_buffer_size>
 80157fe:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 8015800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015802:	2b00      	cmp	r3, #0
 8015804:	dd11      	ble.n	801582a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801580a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801580c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801580e:	3220      	adds	r2, #32
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	4798      	blx	r3
 8015814:	4603      	mov	r3, r0
 8015816:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801581a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801581e:	2b00      	cmp	r3, #0
 8015820:	d007      	beq.n	8015832 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 8015822:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8015826:	2500      	movs	r5, #0
 8015828:	e004      	b.n	8015834 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801582a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801582c:	f04f 32ff 	mov.w	r2, #4294967295
 8015830:	621a      	str	r2, [r3, #32]
 8015832:	2501      	movs	r5, #1
 8015834:	f107 0318 	add.w	r3, r7, #24
 8015838:	4618      	mov	r0, r3
 801583a:	f7fe f97a 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
 801583e:	2d01      	cmp	r5, #1
 8015840:	d001      	beq.n	8015846 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 8015842:	2500      	movs	r5, #0
 8015844:	e000      	b.n	8015848 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 8015846:	2501      	movs	r5, #1
 8015848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801584c:	4618      	mov	r0, r3
 801584e:	f7fe f970 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
 8015852:	2d01      	cmp	r5, #1
 8015854:	d100      	bne.n	8015858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 8015856:	2400      	movs	r4, #0
}
 8015858:	4623      	mov	r3, r4
 801585a:	4618      	mov	r0, r3
 801585c:	3770      	adds	r7, #112	; 0x70
 801585e:	46bd      	mov	sp, r7
 8015860:	bdb0      	pop	{r4, r5, r7, pc}
 8015862:	bf00      	nop
 8015864:	0801d3ec 	.word	0x0801d3ec
 8015868:	0801ca24 	.word	0x0801ca24
 801586c:	0801c97c 	.word	0x0801c97c
 8015870:	0801ca0c 	.word	0x0801ca0c
 8015874:	0801d3f0 	.word	0x0801d3f0
 8015878:	0801ca38 	.word	0x0801ca38
 801587c:	0801d3f4 	.word	0x0801d3f4
 8015880:	0801d3f8 	.word	0x0801d3f8
 8015884:	0801ca4c 	.word	0x0801ca4c
 8015888:	0801ca7c 	.word	0x0801ca7c
 801588c:	0801ca8c 	.word	0x0801ca8c
 8015890:	0801ca60 	.word	0x0801ca60
 8015894:	0801ca98 	.word	0x0801ca98

08015898 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 8015898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801589a:	b0bf      	sub	sp, #252	; 0xfc
 801589c:	af08      	add	r7, sp, #32
 801589e:	6178      	str	r0, [r7, #20]
 80158a0:	6139      	str	r1, [r7, #16]
 80158a2:	60fa      	str	r2, [r7, #12]
 80158a4:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80158a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158aa:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80158ae:	4618      	mov	r0, r3
 80158b0:	f000 faaa 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80158b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7fe f950 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80158be:	4603      	mov	r3, r0
 80158c0:	2b02      	cmp	r3, #2
 80158c2:	d001      	beq.n	80158c8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 80158c4:	f004 fd86 	bl	801a3d4 <abort>
  const int batches = output_shape.Dims(0);
 80158c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158cc:	2100      	movs	r1, #0
 80158ce:	4618      	mov	r0, r3
 80158d0:	f7fe fa52 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158d4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 80158d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158dc:	2101      	movs	r1, #1
 80158de:	4618      	mov	r0, r3
 80158e0:	f7fe fa4a 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 80158e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80158e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80158ec:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80158f0:	4618      	mov	r0, r3
 80158f2:	f000 fa89 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 80158f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7fe f92f 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015900:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8015904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015908:	1e5a      	subs	r2, r3, #1
 801590a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801590e:	4611      	mov	r1, r2
 8015910:	4618      	mov	r0, r3
 8015912:	f7fe fa31 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015916:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801591a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801591e:	68b9      	ldr	r1, [r7, #8]
 8015920:	4618      	mov	r0, r3
 8015922:	f000 fa71 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	695b      	ldr	r3, [r3, #20]
 801592a:	425b      	negs	r3, r3
 801592c:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	69db      	ldr	r3, [r3, #28]
 8015932:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	699b      	ldr	r3, [r3, #24]
 8015938:	425b      	negs	r3, r3
 801593a:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	689b      	ldr	r3, [r3, #8]
 8015940:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 8015954:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015958:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 801595a:	2301      	movs	r3, #1
 801595c:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 801595e:	2301      	movs	r3, #1
 8015960:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 8015962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015966:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 8015968:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801596c:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 801596e:	2301      	movs	r3, #1
 8015970:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 8015972:	2301      	movs	r3, #1
 8015974:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 8015976:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801597a:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 801597c:	2301      	movs	r3, #1
 801597e:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 8015980:	2301      	movs	r3, #1
 8015982:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 8015984:	2301      	movs	r3, #1
 8015986:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 8015988:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801598c:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 801598e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015992:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 8015994:	2301      	movs	r3, #1
 8015996:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 8015998:	2301      	movs	r3, #1
 801599a:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 801599c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80159a0:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 80159a2:	2300      	movs	r3, #0
 80159a4:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 80159a6:	2300      	movs	r3, #0
 80159a8:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	6a1b      	ldr	r3, [r3, #32]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	db08      	blt.n	80159c4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159b6:	68fa      	ldr	r2, [r7, #12]
 80159b8:	6a12      	ldr	r2, [r2, #32]
 80159ba:	4611      	mov	r1, r2
 80159bc:	6978      	ldr	r0, [r7, #20]
 80159be:	4798      	blx	r3
 80159c0:	4603      	mov	r3, r0
 80159c2:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 80159c4:	68b8      	ldr	r0, [r7, #8]
 80159c6:	f7fe ffa9 	bl	801491c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80159ca:	4605      	mov	r5, r0
 80159cc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80159d0:	f7fe ffa4 	bl	801491c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80159d4:	4606      	mov	r6, r0
 80159d6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80159da:	f7ff fa20 	bl	8014e1e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80159e4:	f7fe ffa9 	bl	801493a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80159e8:	4603      	mov	r3, r0
 80159ea:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80159ee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80159f2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80159f6:	f107 001c 	add.w	r0, r7, #28
 80159fa:	9306      	str	r3, [sp, #24]
 80159fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015a00:	9305      	str	r3, [sp, #20]
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	9304      	str	r3, [sp, #16]
 8015a06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015a0a:	9303      	str	r3, [sp, #12]
 8015a0c:	9602      	str	r6, [sp, #8]
 8015a0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015a12:	9301      	str	r3, [sp, #4]
 8015a14:	9500      	str	r5, [sp, #0]
 8015a16:	4623      	mov	r3, r4
 8015a18:	f7f6 fab2 	bl	800bf80 <arm_fully_connected_s8>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	bf14      	ite	ne
 8015a22:	2301      	movne	r3, #1
 8015a24:	2300      	moveq	r3, #0
 8015a26:	b2db      	uxtb	r3, r3
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d03e      	beq.n	8015aaa <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	695c      	ldr	r4, [r3, #20]
 8015a30:	68b8      	ldr	r0, [r7, #8]
 8015a32:	f7fe ff73 	bl	801491c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015a36:	4606      	mov	r6, r0
 8015a38:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8015a3c:	f7fe ff6e 	bl	801491c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8015a40:	6078      	str	r0, [r7, #4]
 8015a42:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8015a46:	f7ff f9ea 	bl	8014e1e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8015a4a:	6038      	str	r0, [r7, #0]
 8015a4c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8015a50:	f7fe ff73 	bl	801493a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8015a54:	4603      	mov	r3, r0
 8015a56:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8015a5a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015a5e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8015a62:	f107 001c 	add.w	r0, r7, #28
 8015a66:	9306      	str	r3, [sp, #24]
 8015a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015a6c:	9305      	str	r3, [sp, #20]
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	9304      	str	r3, [sp, #16]
 8015a72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015a76:	9303      	str	r3, [sp, #12]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	9302      	str	r3, [sp, #8]
 8015a7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015a80:	9301      	str	r3, [sp, #4]
 8015a82:	9600      	str	r6, [sp, #0]
 8015a84:	462b      	mov	r3, r5
 8015a86:	f7f6 fa7b 	bl	800bf80 <arm_fully_connected_s8>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	461a      	mov	r2, r3
 8015a8e:	2300      	movs	r3, #0
 8015a90:	9303      	str	r3, [sp, #12]
 8015a92:	9202      	str	r2, [sp, #8]
 8015a94:	4b0f      	ldr	r3, [pc, #60]	; (8015ad4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 8015a96:	9301      	str	r3, [sp, #4]
 8015a98:	4b0f      	ldr	r3, [pc, #60]	; (8015ad8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 8015a9a:	9300      	str	r3, [sp, #0]
 8015a9c:	23a6      	movs	r3, #166	; 0xa6
 8015a9e:	4a0f      	ldr	r2, [pc, #60]	; (8015adc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 8015aa0:	490f      	ldr	r1, [pc, #60]	; (8015ae0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 8015aa2:	6978      	ldr	r0, [r7, #20]
 8015aa4:	47a0      	blx	r4
 8015aa6:	2401      	movs	r4, #1
 8015aa8:	e000      	b.n	8015aac <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8015aaa:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8015aac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7fe f83e 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8015ab6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7fe f839 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8015ac0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7fe f834 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015aca:	4623      	mov	r3, r4
 8015acc:	4618      	mov	r0, r3
 8015ace:	37dc      	adds	r7, #220	; 0xdc
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ad4:	0801cb74 	.word	0x0801cb74
 8015ad8:	0801cb88 	.word	0x0801cb88
 8015adc:	0801c97c 	.word	0x0801c97c
 8015ae0:	0801cb58 	.word	0x0801cb58

08015ae4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8015ae4:	b590      	push	{r4, r7, lr}
 8015ae6:	b0d1      	sub	sp, #324	; 0x144
 8015ae8:	af04      	add	r7, sp, #16
 8015aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015af2:	6018      	str	r0, [r3, #0]
 8015af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015afc:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8015afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	695b      	ldr	r3, [r3, #20]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d101      	bne.n	8015b12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8015b0e:	f004 fc61 	bl	801a3d4 <abort>
  const auto* params =
 8015b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	695b      	ldr	r3, [r3, #20]
 8015b1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8015b22:	4b67      	ldr	r3, [pc, #412]	; (8015cc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 8015b24:	681a      	ldr	r2, [r3, #0]
 8015b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b2a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b36:	6809      	ldr	r1, [r1, #0]
 8015b38:	6818      	ldr	r0, [r3, #0]
 8015b3a:	f7fe f9f1 	bl	8013f20 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015b3e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8015b42:	4b60      	ldr	r3, [pc, #384]	; (8015cc4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b4a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b56:	6809      	ldr	r1, [r1, #0]
 8015b58:	6818      	ldr	r0, [r3, #0]
 8015b5a:	f7fe f9e1 	bl	8013f20 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015b5e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8015b62:	4b59      	ldr	r3, [pc, #356]	; (8015cc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 8015b64:	681a      	ldr	r2, [r3, #0]
 8015b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b6a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b76:	6809      	ldr	r1, [r1, #0]
 8015b78:	6818      	ldr	r0, [r3, #0]
 8015b7a:	f7fe f9d1 	bl	8013f20 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015b7e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8015b82:	4b52      	ldr	r3, [pc, #328]	; (8015ccc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b8a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015b96:	6809      	ldr	r1, [r1, #0]
 8015b98:	6818      	ldr	r0, [r3, #0]
 8015b9a:	f7fe f9d1 	bl	8013f40 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8015b9e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 8015ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	691b      	ldr	r3, [r3, #16]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d101      	bne.n	8015bb6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 8015bb2:	f004 fc0f 	bl	801a3d4 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8015bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	691b      	ldr	r3, [r3, #16]
 8015bc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8015bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bca:	7a1b      	ldrb	r3, [r3, #8]
 8015bcc:	2b09      	cmp	r3, #9
 8015bce:	d021      	beq.n	8015c14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 8015bd0:	2b09      	cmp	r3, #9
 8015bd2:	dc55      	bgt.n	8015c80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 8015bd4:	2b01      	cmp	r3, #1
 8015bd6:	d002      	beq.n	8015bde <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 8015bd8:	2b03      	cmp	r3, #3
 8015bda:	d036      	beq.n	8015c4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 8015bdc:	e050      	b.n	8015c80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015be2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	695c      	ldr	r4, [r3, #20]
 8015bea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bee:	7a1b      	ldrb	r3, [r3, #8]
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f7fd fa43 	bl	801307c <TfLiteTypeGetName>
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015bfc:	7a1b      	ldrb	r3, [r3, #8]
 8015bfe:	4619      	mov	r1, r3
 8015c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c04:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015c08:	460b      	mov	r3, r1
 8015c0a:	4931      	ldr	r1, [pc, #196]	; (8015cd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8015c0c:	6800      	ldr	r0, [r0, #0]
 8015c0e:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015c10:	2301      	movs	r3, #1
 8015c12:	e04f      	b.n	8015cb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8015c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c18:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8015c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c20:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015c28:	9302      	str	r3, [sp, #8]
 8015c2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015c2e:	9301      	str	r3, [sp, #4]
 8015c30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8015c34:	9300      	str	r3, [sp, #0]
 8015c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8015c3e:	6809      	ldr	r1, [r1, #0]
 8015c40:	6800      	ldr	r0, [r0, #0]
 8015c42:	f7ff fe29 	bl	8015898 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8015c46:	4603      	mov	r3, r0
                               output);
 8015c48:	e034      	b.n	8015cb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	695c      	ldr	r4, [r3, #20]
 8015c56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c5a:	7a1b      	ldrb	r3, [r3, #8]
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7fd fa0d 	bl	801307c <TfLiteTypeGetName>
 8015c62:	4602      	mov	r2, r0
 8015c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c68:	7a1b      	ldrb	r3, [r3, #8]
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c70:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015c74:	460b      	mov	r3, r1
 8015c76:	4916      	ldr	r1, [pc, #88]	; (8015cd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8015c78:	6800      	ldr	r0, [r0, #0]
 8015c7a:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	e019      	b.n	8015cb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015c84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	695c      	ldr	r4, [r3, #20]
 8015c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c90:	7a1b      	ldrb	r3, [r3, #8]
 8015c92:	4618      	mov	r0, r3
 8015c94:	f7fd f9f2 	bl	801307c <TfLiteTypeGetName>
 8015c98:	4602      	mov	r2, r0
 8015c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015c9e:	7a1b      	ldrb	r3, [r3, #8]
 8015ca0:	4619      	mov	r1, r3
 8015ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015ca6:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8015caa:	460b      	mov	r3, r1
 8015cac:	4908      	ldr	r1, [pc, #32]	; (8015cd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8015cae:	6800      	ldr	r0, [r0, #0]
 8015cb0:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015cb2:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd90      	pop	{r4, r7, pc}
 8015cbe:	bf00      	nop
 8015cc0:	0801d3ec 	.word	0x0801d3ec
 8015cc4:	0801d3f0 	.word	0x0801d3f0
 8015cc8:	0801d3f4 	.word	0x0801d3f4
 8015ccc:	0801d3f8 	.word	0x0801d3f8
 8015cd0:	0801ccac 	.word	0x0801ccac

08015cd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8015cd4:	b4b0      	push	{r4, r5, r7}
 8015cd6:	b083      	sub	sp, #12
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 8015cdc:	4b13      	ldr	r3, [pc, #76]	; (8015d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cde:	4a14      	ldr	r2, [pc, #80]	; (8015d30 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 8015ce0:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 8015ce2:	4b12      	ldr	r3, [pc, #72]	; (8015d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 8015ce8:	4b10      	ldr	r3, [pc, #64]	; (8015d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cea:	4a12      	ldr	r2, [pc, #72]	; (8015d34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 8015cec:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 8015cee:	4b0f      	ldr	r3, [pc, #60]	; (8015d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cf0:	4a11      	ldr	r2, [pc, #68]	; (8015d38 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 8015cf2:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 8015cf4:	4b0d      	ldr	r3, [pc, #52]	; (8015d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 8015cfa:	4b0c      	ldr	r3, [pc, #48]	; (8015d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 8015d00:	4b0a      	ldr	r3, [pc, #40]	; (8015d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015d02:	2200      	movs	r2, #0
 8015d04:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 8015d06:	4b09      	ldr	r3, [pc, #36]	; (8015d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015d08:	2200      	movs	r2, #0
 8015d0a:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	4a07      	ldr	r2, [pc, #28]	; (8015d2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8015d10:	461c      	mov	r4, r3
 8015d12:	4615      	mov	r5, r2
 8015d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	370c      	adds	r7, #12
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bcb0      	pop	{r4, r5, r7}
 8015d28:	4770      	bx	lr
 8015d2a:	bf00      	nop
 8015d2c:	20002a2c 	.word	0x20002a2c
 8015d30:	080155ff 	.word	0x080155ff
 8015d34:	0801562d 	.word	0x0801562d
 8015d38:	08015ae5 	.word	0x08015ae5

08015d3c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b08a      	sub	sp, #40	; 0x28
 8015d40:	af02      	add	r7, sp, #8
 8015d42:	60f8      	str	r0, [r7, #12]
 8015d44:	607b      	str	r3, [r7, #4]
 8015d46:	460b      	mov	r3, r1
 8015d48:	72fb      	strb	r3, [r7, #11]
 8015d4a:	4613      	mov	r3, r2
 8015d4c:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8015d4e:	7abb      	ldrb	r3, [r7, #10]
 8015d50:	2b01      	cmp	r3, #1
 8015d52:	d03e      	beq.n	8015dd2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 8015d54:	f04f 0200 	mov.w	r2, #0
 8015d58:	f04f 0300 	mov.w	r3, #0
 8015d5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8015d60:	f107 0310 	add.w	r3, r7, #16
 8015d64:	9301      	str	r3, [sp, #4]
 8015d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d68:	9300      	str	r3, [sp, #0]
 8015d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d6e:	6879      	ldr	r1, [r7, #4]
 8015d70:	68f8      	ldr	r0, [r7, #12]
 8015d72:	f7fd fcb5 	bl	80136e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8015d76:	4603      	mov	r3, r0
 8015d78:	77fb      	strb	r3, [r7, #31]
 8015d7a:	7ffb      	ldrb	r3, [r7, #31]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d001      	beq.n	8015d84 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8015d80:	7ffb      	ldrb	r3, [r7, #31]
 8015d82:	e027      	b.n	8015dd4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8015d84:	ed97 7b04 	vldr	d7, [r7, #16]
 8015d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d8c:	3304      	adds	r3, #4
 8015d8e:	4619      	mov	r1, r3
 8015d90:	4610      	mov	r0, r2
 8015d92:	eeb0 0a47 	vmov.f32	s0, s14
 8015d96:	eef0 0a67 	vmov.f32	s1, s15
 8015d9a:	f7fd f9f5 	bl	8013188 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	691a      	ldr	r2, [r3, #16]
 8015da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015da4:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 8015da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da8:	691a      	ldr	r2, [r3, #16]
 8015daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dac:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8015dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db0:	691a      	ldr	r2, [r3, #16]
 8015db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015db4:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8015db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015db8:	f103 0208 	add.w	r2, r3, #8
 8015dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dbe:	330c      	adds	r3, #12
 8015dc0:	7af9      	ldrb	r1, [r7, #11]
 8015dc2:	9300      	str	r3, [sp, #0]
 8015dc4:	4613      	mov	r3, r2
 8015dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dc8:	68f8      	ldr	r0, [r7, #12]
 8015dca:	f7fd fe15 	bl	80139f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8015dce:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8015dd0:	e000      	b.n	8015dd4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8015dd2:	2300      	movs	r3, #0
}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	3720      	adds	r7, #32
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}

08015ddc <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8015ddc:	b480      	push	{r7}
 8015dde:	b083      	sub	sp, #12
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
 8015de4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015df2:	429a      	cmp	r2, r3
 8015df4:	da01      	bge.n	8015dfa <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	e000      	b.n	8015dfc <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8015dfa:	687b      	ldr	r3, [r7, #4]
    }
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	370c      	adds	r7, #12
 8015e00:	46bd      	mov	sp, r7
 8015e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e06:	4770      	bx	lr

08015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b086      	sub	sp, #24
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d003      	beq.n	8015e20 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	685b      	ldr	r3, [r3, #4]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d103      	bne.n	8015e28 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8015e20:	6878      	ldr	r0, [r7, #4]
 8015e22:	f7fd fe65 	bl	8013af0 <_ZN6tflite12RuntimeShapeC1Ev>
 8015e26:	e00d      	b.n	8015e44 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8015e2e:	697b      	ldr	r3, [r7, #20]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	3304      	adds	r3, #4
 8015e38:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8015e3a:	68fa      	ldr	r2, [r7, #12]
 8015e3c:	6939      	ldr	r1, [r7, #16]
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f7fd fe64 	bl	8013b0c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	3718      	adds	r7, #24
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b086      	sub	sp, #24
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f7fd fe81 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015e5c:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	db03      	blt.n	8015e6c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8015e64:	683a      	ldr	r2, [r7, #0]
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	429a      	cmp	r2, r3
 8015e6a:	db01      	blt.n	8015e70 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8015e6c:	f004 fab2 	bl	801a3d4 <abort>
  const auto* dims_data = shape.DimsData();
 8015e70:	6878      	ldr	r0, [r7, #4]
 8015e72:	f7fd ffa6 	bl	8013dc2 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8015e76:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	613b      	str	r3, [r7, #16]
 8015e80:	693a      	ldr	r2, [r7, #16]
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	429a      	cmp	r2, r3
 8015e86:	da12      	bge.n	8015eae <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8015e88:	693a      	ldr	r2, [r7, #16]
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d005      	beq.n	8015e9c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8015e90:	693b      	ldr	r3, [r7, #16]
 8015e92:	009b      	lsls	r3, r3, #2
 8015e94:	68ba      	ldr	r2, [r7, #8]
 8015e96:	4413      	add	r3, r2
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	e000      	b.n	8015e9e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	697a      	ldr	r2, [r7, #20]
 8015ea0:	fb02 f303 	mul.w	r3, r2, r3
 8015ea4:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8015ea6:	693b      	ldr	r3, [r7, #16]
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	613b      	str	r3, [r7, #16]
 8015eac:	e7e8      	b.n	8015e80 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8015eae:	697b      	ldr	r3, [r7, #20]
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3718      	adds	r7, #24
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8015eb8:	b590      	push	{r4, r7, lr}
 8015eba:	b087      	sub	sp, #28
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8015ec4:	68f8      	ldr	r0, [r7, #12]
 8015ec6:	f7fd fe4a 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015eca:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8015ecc:	2300      	movs	r3, #0
 8015ece:	617b      	str	r3, [r7, #20]
 8015ed0:	697a      	ldr	r2, [r7, #20]
 8015ed2:	693b      	ldr	r3, [r7, #16]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	da15      	bge.n	8015f04 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 8015ed8:	697a      	ldr	r2, [r7, #20]
 8015eda:	68bb      	ldr	r3, [r7, #8]
 8015edc:	429a      	cmp	r2, r3
 8015ede:	d00d      	beq.n	8015efc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8015ee0:	6979      	ldr	r1, [r7, #20]
 8015ee2:	68f8      	ldr	r0, [r7, #12]
 8015ee4:	f7fd ff48 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015ee8:	4604      	mov	r4, r0
 8015eea:	6979      	ldr	r1, [r7, #20]
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f7fd ff43 	bl	8013d78 <_ZNK6tflite12RuntimeShape4DimsEi>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	429c      	cmp	r4, r3
 8015ef6:	d001      	beq.n	8015efc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 8015ef8:	f004 fa6c 	bl	801a3d4 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	3301      	adds	r3, #1
 8015f00:	617b      	str	r3, [r7, #20]
 8015f02:	e7e5      	b.n	8015ed0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8015f04:	68b9      	ldr	r1, [r7, #8]
 8015f06:	68f8      	ldr	r0, [r7, #12]
 8015f08:	f7ff ffa0 	bl	8015e4c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8015f0c:	4603      	mov	r3, r0
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	371c      	adds	r7, #28
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd90      	pop	{r4, r7, pc}

08015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8015f16:	b580      	push	{r7, lr}
 8015f18:	b082      	sub	sp, #8
 8015f1a:	af00      	add	r7, sp, #0
 8015f1c:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8015f1e:	2100      	movs	r1, #0
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f7fe fb23 	bl	801456c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015f26:	4603      	mov	r3, r0
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3708      	adds	r7, #8
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}

08015f30 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b082      	sub	sp, #8
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f000 f805 	bl	8015f48 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8015f3e:	4603      	mov	r3, r0
}
 8015f40:	4618      	mov	r0, r3
 8015f42:	3708      	adds	r7, #8
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}

08015f48 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b082      	sub	sp, #8
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8015f50:	2101      	movs	r1, #1
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f7fe fb0a 	bl	801456c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015f58:	4603      	mov	r3, r0
  }
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3708      	adds	r7, #8
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}

08015f62 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8015f62:	b590      	push	{r4, r7, lr}
 8015f64:	b085      	sub	sp, #20
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	60f8      	str	r0, [r7, #12]
 8015f6a:	60b9      	str	r1, [r7, #8]
 8015f6c:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8015f6e:	f107 0308 	add.w	r3, r7, #8
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7ff f8b4 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f78:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8015f7a:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8015f7c:	1d3b      	adds	r3, r7, #4
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7ff f8ae 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f84:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	461a      	mov	r2, r3
 8015f8a:	4621      	mov	r1, r4
 8015f8c:	68f8      	ldr	r0, [r7, #12]
 8015f8e:	f7ff fb0b 	bl	80155a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015f92:	4603      	mov	r3, r0
 8015f94:	4618      	mov	r0, r3
 8015f96:	f7ff f831 	bl	8014ffc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015f9a:	4603      	mov	r3, r0
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3714      	adds	r7, #20
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd90      	pop	{r4, r7, pc}

08015fa4 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b082      	sub	sp, #8
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	bf0c      	ite	eq
 8015fb2:	2301      	moveq	r3, #1
 8015fb4:	2300      	movne	r3, #0
 8015fb6:	b2db      	uxtb	r3, r3
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7fe fef9 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015fbe:	4603      	mov	r3, r0
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3708      	adds	r7, #8
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}

08015fc8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b08a      	sub	sp, #40	; 0x28
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8015fd0:	482c      	ldr	r0, [pc, #176]	; (8016084 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8015fd2:	f7ff ffa0 	bl	8015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7ff f88c 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8015fe2:	4829      	ldr	r0, [pc, #164]	; (8016088 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8015fe4:	f7ff ff97 	bl	8015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7ff f883 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8015ff4:	f000 f86c 	bl	80160d0 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	4619      	mov	r1, r3
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f000 f870 	bl	80160e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016002:	4603      	mov	r3, r0
 8016004:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8016006:	69f9      	ldr	r1, [r7, #28]
 8016008:	69f8      	ldr	r0, [r7, #28]
 801600a:	f000 f83f 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801600e:	4603      	mov	r3, r0
 8016010:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8016012:	69f9      	ldr	r1, [r7, #28]
 8016014:	69b8      	ldr	r0, [r7, #24]
 8016016:	f000 f839 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801601a:	4603      	mov	r3, r0
 801601c:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801601e:	69b9      	ldr	r1, [r7, #24]
 8016020:	69b8      	ldr	r0, [r7, #24]
 8016022:	f000 f833 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016026:	4603      	mov	r3, r0
 8016028:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 801602a:	6938      	ldr	r0, [r7, #16]
 801602c:	f000 f877 	bl	801611e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8016030:	4603      	mov	r3, r0
 8016032:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8016034:	6979      	ldr	r1, [r7, #20]
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	f000 f853 	bl	80160e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801603c:	4603      	mov	r3, r0
 801603e:	6a39      	ldr	r1, [r7, #32]
 8016040:	4618      	mov	r0, r3
 8016042:	f000 f823 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016046:	4603      	mov	r3, r0
 8016048:	69b9      	ldr	r1, [r7, #24]
 801604a:	4618      	mov	r0, r3
 801604c:	f000 f849 	bl	80160e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016050:	4603      	mov	r3, r0
 8016052:	4618      	mov	r0, r3
 8016054:	f000 f879 	bl	801614a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8016058:	4603      	mov	r3, r0
 801605a:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 801605c:	68b9      	ldr	r1, [r7, #8]
 801605e:	69f8      	ldr	r0, [r7, #28]
 8016060:	f000 f83f 	bl	80160e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016064:	4603      	mov	r3, r0
 8016066:	4619      	mov	r1, r3
 8016068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801606a:	f000 f80f 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801606e:	4603      	mov	r3, r0
 8016070:	4619      	mov	r1, r3
 8016072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016074:	f000 f87f 	bl	8016176 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016078:	4603      	mov	r3, r0
}
 801607a:	4618      	mov	r0, r3
 801607c:	3728      	adds	r7, #40	; 0x28
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
 8016082:	bf00      	nop
 8016084:	70f5a894 	.word	0x70f5a894
 8016088:	2aaaaaab 	.word	0x2aaaaaab

0801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801608c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801608e:	b085      	sub	sp, #20
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8016096:	1d3b      	adds	r3, r7, #4
 8016098:	4618      	mov	r0, r3
 801609a:	f7ff f821 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801609e:	4603      	mov	r3, r0
 80160a0:	681d      	ldr	r5, [r3, #0]
 80160a2:	463b      	mov	r3, r7
 80160a4:	4618      	mov	r0, r3
 80160a6:	f7ff f81b 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160aa:	4603      	mov	r3, r0
 80160ac:	681e      	ldr	r6, [r3, #0]
 80160ae:	f107 030c 	add.w	r3, r7, #12
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7ff f814 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160b8:	4604      	mov	r4, r0
 80160ba:	4631      	mov	r1, r6
 80160bc:	4628      	mov	r0, r5
 80160be:	f7fd fde5 	bl	8013c8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80160c2:	4603      	mov	r3, r0
 80160c4:	6023      	str	r3, [r4, #0]
  return c;
 80160c6:	68fb      	ldr	r3, [r7, #12]
}
 80160c8:	4618      	mov	r0, r3
 80160ca:	3714      	adds	r7, #20
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080160d0 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 80160d0:	b580      	push	{r7, lr}
 80160d2:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 80160d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80160d8:	f7ff f80d 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80160dc:	4603      	mov	r3, r0
  }
 80160de:	4618      	mov	r0, r3
 80160e0:	bd80      	pop	{r7, pc}

080160e2 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80160e2:	b590      	push	{r4, r7, lr}
 80160e4:	b083      	sub	sp, #12
 80160e6:	af00      	add	r7, sp, #0
 80160e8:	6078      	str	r0, [r7, #4]
 80160ea:	6039      	str	r1, [r7, #0]
 80160ec:	1d3b      	adds	r3, r7, #4
 80160ee:	4618      	mov	r0, r3
 80160f0:	f7fe fff6 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80160f4:	4603      	mov	r3, r0
 80160f6:	681c      	ldr	r4, [r3, #0]
 80160f8:	463b      	mov	r3, r7
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7fe fff0 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016100:	4603      	mov	r3, r0
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	4619      	mov	r1, r3
 8016106:	4620      	mov	r0, r4
 8016108:	f7fe fe30 	bl	8014d6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801610c:	4603      	mov	r3, r0
 801610e:	4618      	mov	r0, r3
 8016110:	f7fe ff74 	bl	8014ffc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016114:	4603      	mov	r3, r0
 8016116:	4618      	mov	r0, r3
 8016118:	370c      	adds	r7, #12
 801611a:	46bd      	mov	sp, r7
 801611c:	bd90      	pop	{r4, r7, pc}

0801611e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801611e:	b580      	push	{r7, lr}
 8016120:	b082      	sub	sp, #8
 8016122:	af00      	add	r7, sp, #0
 8016124:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8016126:	1d3b      	adds	r3, r7, #4
 8016128:	4618      	mov	r0, r3
 801612a:	f7fe ffd9 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801612e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	4618      	mov	r0, r3
 8016134:	f000 f83d 	bl	80161b2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8016138:	4603      	mov	r3, r0
 801613a:	4618      	mov	r0, r3
 801613c:	f7fe ff5e 	bl	8014ffc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016140:	4603      	mov	r3, r0
}
 8016142:	4618      	mov	r0, r3
 8016144:	3708      	adds	r7, #8
 8016146:	46bd      	mov	sp, r7
 8016148:	bd80      	pop	{r7, pc}

0801614a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801614a:	b580      	push	{r7, lr}
 801614c:	b082      	sub	sp, #8
 801614e:	af00      	add	r7, sp, #0
 8016150:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8016152:	1d3b      	adds	r3, r7, #4
 8016154:	4618      	mov	r0, r3
 8016156:	f7fe ffc3 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801615a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	4618      	mov	r0, r3
 8016160:	f7ff fee6 	bl	8015f30 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8016164:	4603      	mov	r3, r0
 8016166:	4618      	mov	r0, r3
 8016168:	f7fe ff48 	bl	8014ffc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801616c:	4603      	mov	r3, r0
}
 801616e:	4618      	mov	r0, r3
 8016170:	3708      	adds	r7, #8
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}

08016176 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8016176:	b590      	push	{r4, r7, lr}
 8016178:	b083      	sub	sp, #12
 801617a:	af00      	add	r7, sp, #0
 801617c:	6078      	str	r0, [r7, #4]
 801617e:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8016180:	1d3b      	adds	r3, r7, #4
 8016182:	4618      	mov	r0, r3
 8016184:	f7fe ffac 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016188:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801618a:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801618c:	463b      	mov	r3, r7
 801618e:	4618      	mov	r0, r3
 8016190:	f7fe ffa6 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016194:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	4619      	mov	r1, r3
 801619a:	4620      	mov	r0, r4
 801619c:	f000 f815 	bl	80161ca <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 80161a0:	4603      	mov	r3, r0
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7fe ff2a 	bl	8014ffc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80161a8:	4603      	mov	r3, r0
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	370c      	adds	r7, #12
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd90      	pop	{r4, r7, pc}

080161b2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b082      	sub	sp, #8
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f000 f813 	bl	80161e6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 80161c0:	4603      	mov	r3, r0
}
 80161c2:	4618      	mov	r0, r3
 80161c4:	3708      	adds	r7, #8
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}

080161ca <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 80161ca:	b580      	push	{r7, lr}
 80161cc:	b082      	sub	sp, #8
 80161ce:	af00      	add	r7, sp, #0
 80161d0:	6078      	str	r0, [r7, #4]
 80161d2:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 80161d4:	6839      	ldr	r1, [r7, #0]
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f000 f812 	bl	8016200 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 80161dc:	4603      	mov	r3, r0
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3708      	adds	r7, #8
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd80      	pop	{r7, pc}

080161e6 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80161e6:	b580      	push	{r7, lr}
 80161e8:	b082      	sub	sp, #8
 80161ea:	af00      	add	r7, sp, #0
 80161ec:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80161ee:	2102      	movs	r1, #2
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f7fe f9bb 	bl	801456c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80161f6:	4603      	mov	r3, r0
  }
 80161f8:	4618      	mov	r0, r3
 80161fa:	3708      	adds	r7, #8
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}

08016200 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	6039      	str	r1, [r7, #0]
 801620a:	6839      	ldr	r1, [r7, #0]
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f7fe fdad 	bl	8014d6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8016212:	4603      	mov	r3, r0
 8016214:	4618      	mov	r0, r3
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801621c:	b480      	push	{r7}
 801621e:	b083      	sub	sp, #12
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
 8016224:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	781a      	ldrb	r2, [r3, #0]
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	429a      	cmp	r2, r3
 8016230:	d201      	bcs.n	8016236 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	e000      	b.n	8016238 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8016236:	687b      	ldr	r3, [r7, #4]
    }
 8016238:	4618      	mov	r0, r3
 801623a:	370c      	adds	r7, #12
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr

08016244 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8016244:	b480      	push	{r7}
 8016246:	b083      	sub	sp, #12
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d002      	beq.n	8016258 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	e000      	b.n	801625a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 8016258:	2300      	movs	r3, #0
}
 801625a:	4618      	mov	r0, r3
 801625c:	370c      	adds	r7, #12
 801625e:	46bd      	mov	sp, r7
 8016260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016264:	4770      	bx	lr
	...

08016268 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 8016268:	b580      	push	{r7, lr}
 801626a:	b086      	sub	sp, #24
 801626c:	af00      	add	r7, sp, #0
 801626e:	4603      	mov	r3, r0
 8016270:	6039      	str	r1, [r7, #0]
 8016272:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 8016274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016278:	11db      	asrs	r3, r3, #7
 801627a:	b21b      	sxth	r3, r3
 801627c:	b29b      	uxth	r3, r3
 801627e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016282:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 8016284:	8afb      	ldrh	r3, [r7, #22]
 8016286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801628a:	d306      	bcc.n	801629a <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 801628c:	4b1a      	ldr	r3, [pc, #104]	; (80162f8 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 801628e:	4a1b      	ldr	r2, [pc, #108]	; (80162fc <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 8016290:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8016294:	481a      	ldr	r0, [pc, #104]	; (8016300 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 8016296:	f004 f8a5 	bl	801a3e4 <__assert_func>
  int16_t offset = value & 0x7f;
 801629a:	88fb      	ldrh	r3, [r7, #6]
 801629c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80162a0:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 80162a2:	8afb      	ldrh	r3, [r7, #22]
 80162a4:	005b      	lsls	r3, r3, #1
 80162a6:	683a      	ldr	r2, [r7, #0]
 80162a8:	4413      	add	r3, r2
 80162aa:	881b      	ldrh	r3, [r3, #0]
 80162ac:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 80162ae:	8afb      	ldrh	r3, [r7, #22]
 80162b0:	3301      	adds	r3, #1
 80162b2:	005b      	lsls	r3, r3, #1
 80162b4:	683a      	ldr	r2, [r7, #0]
 80162b6:	4413      	add	r3, r2
 80162b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162bc:	b29a      	uxth	r2, r3
 80162be:	8afb      	ldrh	r3, [r7, #22]
 80162c0:	005b      	lsls	r3, r3, #1
 80162c2:	6839      	ldr	r1, [r7, #0]
 80162c4:	440b      	add	r3, r1
 80162c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	1ad3      	subs	r3, r2, r3
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 80162d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80162d6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80162da:	fb02 f303 	mul.w	r3, r2, r3
 80162de:	3340      	adds	r3, #64	; 0x40
 80162e0:	11db      	asrs	r3, r3, #7
 80162e2:	60fb      	str	r3, [r7, #12]
  return base + delta;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	b29a      	uxth	r2, r3
 80162e8:	8a7b      	ldrh	r3, [r7, #18]
 80162ea:	4413      	add	r3, r2
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	b21b      	sxth	r3, r3
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3718      	adds	r7, #24
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	0801ccc8 	.word	0x0801ccc8
 80162fc:	0801ccf4 	.word	0x0801ccf4
 8016300:	0801cd38 	.word	0x0801cd38

08016304 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 8016304:	b580      	push	{r7, lr}
 8016306:	b08a      	sub	sp, #40	; 0x28
 8016308:	af00      	add	r7, sp, #0
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
 8016310:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 8016312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016314:	687a      	ldr	r2, [r7, #4]
 8016316:	fb03 f202 	mul.w	r2, r3, r2
 801631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801631c:	4413      	add	r3, r2
 801631e:	005b      	lsls	r3, r3, #1
 8016320:	68ba      	ldr	r2, [r7, #8]
 8016322:	4413      	add	r3, r2
 8016324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016328:	461a      	mov	r2, r3
 801632a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801632e:	1ad3      	subs	r3, r2, r3
 8016330:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	6899      	ldr	r1, [r3, #8]
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801633a:	461a      	mov	r2, r3
 801633c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801633e:	f7fd fdab 	bl	8013e98 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8016342:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8016344:	6a3b      	ldr	r3, [r7, #32]
 8016346:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801634a:	337f      	adds	r3, #127	; 0x7f
 801634c:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801634e:	4b12      	ldr	r3, [pc, #72]	; (8016398 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8016350:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 8016352:	f107 0214 	add.w	r2, r7, #20
 8016356:	f107 0310 	add.w	r3, r7, #16
 801635a:	4611      	mov	r1, r2
 801635c:	4618      	mov	r0, r3
 801635e:	f7fd fbb3 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 8016362:	4602      	mov	r2, r0
 8016364:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016368:	61bb      	str	r3, [r7, #24]
 801636a:	f107 0318 	add.w	r3, r7, #24
 801636e:	4619      	mov	r1, r3
 8016370:	4610      	mov	r0, r2
 8016372:	f7fd fb95 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 8016376:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8016378:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801637a:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016380:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016384:	4611      	mov	r1, r2
 8016386:	4618      	mov	r0, r3
 8016388:	f7ff ff6e 	bl	8016268 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801638c:	4603      	mov	r3, r0
}
 801638e:	4618      	mov	r0, r3
 8016390:	3728      	adds	r7, #40	; 0x28
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}
 8016396:	bf00      	nop
 8016398:	ffff8000 	.word	0xffff8000

0801639c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 801639c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a0:	b0ab      	sub	sp, #172	; 0xac
 80163a2:	af02      	add	r7, sp, #8
 80163a4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80163a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80163a8:	637a      	str	r2, [r7, #52]	; 0x34
 80163aa:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80163ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163ae:	f7fd fbd6 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80163b2:	4603      	mov	r3, r0
 80163b4:	3b01      	subs	r3, #1
 80163b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80163ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163bc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80163c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163c2:	f7ff fd79 	bl	8015eb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80163c6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80163ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80163ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163d0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80163d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163d6:	f7fe fd31 	bl	8014e3c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80163da:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 80163de:	2300      	movs	r3, #0
 80163e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80163e4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80163e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80163ec:	429a      	cmp	r2, r3
 80163ee:	f280 8157 	bge.w	80166a0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 80163f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80163f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 80163fa:	2300      	movs	r3, #0
 80163fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016400:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016408:	429a      	cmp	r2, r3
 801640a:	da1c      	bge.n	8016446 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801640c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016414:	fb03 f202 	mul.w	r2, r3, r2
 8016418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801641c:	4413      	add	r3, r2
 801641e:	005a      	lsls	r2, r3, #1
 8016420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016422:	441a      	add	r2, r3
 8016424:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8016428:	4611      	mov	r1, r2
 801642a:	4618      	mov	r0, r3
 801642c:	f7ff fcd6 	bl	8015ddc <_ZSt3maxIsERKT_S2_S2_>
 8016430:	4603      	mov	r3, r0
 8016432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016436:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801643a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801643e:	3301      	adds	r3, #1
 8016440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016444:	e7dc      	b.n	8016400 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 8016446:	2300      	movs	r3, #0
 8016448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801644c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016454:	fb02 f303 	mul.w	r3, r2, r3
 8016458:	005a      	lsls	r2, r3, #1
 801645a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801645e:	4413      	add	r3, r2
 8016460:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 8016462:	2300      	movs	r3, #0
 8016464:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016468:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801646c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016470:	429a      	cmp	r2, r3
 8016472:	da28      	bge.n	80164c6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8016474:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 8016478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801647c:	005a      	lsls	r2, r3, #1
 801647e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016480:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8016482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016486:	9301      	str	r3, [sp, #4]
 8016488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801648c:	9300      	str	r3, [sp, #0]
 801648e:	460b      	mov	r3, r1
 8016490:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016494:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016496:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016498:	f7ff ff34 	bl	8016304 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801649c:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 801649e:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 80164a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80164a4:	005a      	lsls	r2, r3, #1
 80164a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80164a8:	4413      	add	r3, r2
 80164aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ae:	461a      	mov	r2, r3
 80164b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80164b4:	4413      	add	r3, r2
 80164b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 80164ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80164be:	3301      	adds	r3, #1
 80164c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80164c4:	e7d0      	b.n	8016468 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 80164c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7fe fd84 	bl	8014fd8 <_ZN6tflite17CountLeadingZerosImEEiT_>
 80164d0:	4603      	mov	r3, r0
 80164d2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80164d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80164da:	17da      	asrs	r2, r3, #31
 80164dc:	623b      	str	r3, [r7, #32]
 80164de:	627a      	str	r2, [r7, #36]	; 0x24
 80164e0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80164e4:	1e59      	subs	r1, r3, #1
 80164e6:	f1a1 0320 	sub.w	r3, r1, #32
 80164ea:	f1c1 0220 	rsb	r2, r1, #32
 80164ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164f0:	fa00 f901 	lsl.w	r9, r0, r1
 80164f4:	6a38      	ldr	r0, [r7, #32]
 80164f6:	fa00 f303 	lsl.w	r3, r0, r3
 80164fa:	ea49 0903 	orr.w	r9, r9, r3
 80164fe:	6a3b      	ldr	r3, [r7, #32]
 8016500:	fa23 f202 	lsr.w	r2, r3, r2
 8016504:	ea49 0902 	orr.w	r9, r9, r2
 8016508:	6a3b      	ldr	r3, [r7, #32]
 801650a:	fa03 f801 	lsl.w	r8, r3, r1
 801650e:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 8016512:	61bb      	str	r3, [r7, #24]
 8016514:	f149 0300 	adc.w	r3, r9, #0
 8016518:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801651a:	f04f 0200 	mov.w	r2, #0
 801651e:	f04f 0300 	mov.w	r3, #0
 8016522:	69b9      	ldr	r1, [r7, #24]
 8016524:	0b8a      	lsrs	r2, r1, #14
 8016526:	69f9      	ldr	r1, [r7, #28]
 8016528:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801652c:	69f9      	ldr	r1, [r7, #28]
 801652e:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 8016530:	4613      	mov	r3, r2
 8016532:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 8016534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016536:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801653a:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801653c:	4b5b      	ldr	r3, [pc, #364]	; (80166ac <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 801653e:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 8016540:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8016544:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016548:	4611      	mov	r1, r2
 801654a:	4618      	mov	r0, r3
 801654c:	f7fd fabc 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 8016550:	4602      	mov	r2, r0
 8016552:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016556:	657b      	str	r3, [r7, #84]	; 0x54
 8016558:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801655c:	4619      	mov	r1, r3
 801655e:	4610      	mov	r0, r2
 8016560:	f7fd fa9e 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 8016564:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8016566:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8016568:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801656c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 8016570:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8016574:	4611      	mov	r1, r2
 8016576:	4618      	mov	r0, r3
 8016578:	f7ff fe76 	bl	8016268 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801657c:	4603      	mov	r3, r0
 801657e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 8016582:	2300      	movs	r3, #0
 8016584:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016588:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801658c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016590:	429a      	cmp	r2, r3
 8016592:	da7f      	bge.n	8016694 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 8016594:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8016598:	f1c3 031f 	rsb	r3, r3, #31
 801659c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 80165a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80165a4:	1e5a      	subs	r2, r3, #1
 80165a6:	2301      	movs	r3, #1
 80165a8:	4093      	lsls	r3, r2
 80165aa:	17da      	asrs	r2, r3, #31
 80165ac:	603b      	str	r3, [r7, #0]
 80165ae:	607a      	str	r2, [r7, #4]
 80165b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80165b4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80165b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80165bc:	005a      	lsls	r2, r3, #1
 80165be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80165c0:	4413      	add	r3, r2
 80165c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165c6:	b21b      	sxth	r3, r3
 80165c8:	17da      	asrs	r2, r3, #31
 80165ca:	613b      	str	r3, [r7, #16]
 80165cc:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80165ce:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80165d2:	17da      	asrs	r2, r3, #31
 80165d4:	60bb      	str	r3, [r7, #8]
 80165d6:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80165d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80165dc:	460b      	mov	r3, r1
 80165de:	68ba      	ldr	r2, [r7, #8]
 80165e0:	fb02 f203 	mul.w	r2, r2, r3
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80165ea:	4601      	mov	r1, r0
 80165ec:	fb01 f303 	mul.w	r3, r1, r3
 80165f0:	4413      	add	r3, r2
 80165f2:	693a      	ldr	r2, [r7, #16]
 80165f4:	68b9      	ldr	r1, [r7, #8]
 80165f6:	fba2 ab01 	umull	sl, fp, r2, r1
 80165fa:	445b      	add	r3, fp
 80165fc:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80165fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8016602:	eb1a 0502 	adds.w	r5, sl, r2
 8016606:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 801660a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 801660e:	f1c1 0320 	rsb	r3, r1, #32
 8016612:	f1b1 0220 	subs.w	r2, r1, #32
 8016616:	fa25 f001 	lsr.w	r0, r5, r1
 801661a:	62b8      	str	r0, [r7, #40]	; 0x28
 801661c:	fa06 f303 	lsl.w	r3, r6, r3
 8016620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016622:	ea40 0003 	orr.w	r0, r0, r3
 8016626:	62b8      	str	r0, [r7, #40]	; 0x28
 8016628:	d404      	bmi.n	8016634 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 801662a:	fa46 f202 	asr.w	r2, r6, r2
 801662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016630:	4313      	orrs	r3, r2
 8016632:	62bb      	str	r3, [r7, #40]	; 0x28
 8016634:	fa46 f301 	asr.w	r3, r6, r1
 8016638:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801663c:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801663e:	2300      	movs	r3, #0
 8016640:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 8016642:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016646:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801664a:	4611      	mov	r1, r2
 801664c:	4618      	mov	r0, r3
 801664e:	f7fd fa3b 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 8016652:	4602      	mov	r2, r0
 8016654:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016658:	65fb      	str	r3, [r7, #92]	; 0x5c
 801665a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801665e:	4619      	mov	r1, r3
 8016660:	4610      	mov	r0, r2
 8016662:	f7fd fa1d 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 8016666:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 8016668:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801666a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801666e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016672:	fb03 f202 	mul.w	r2, r3, r2
 8016676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801667a:	4413      	add	r3, r2
 801667c:	005a      	lsls	r2, r3, #1
 801667e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016682:	441a      	add	r2, r3
 8016684:	b20b      	sxth	r3, r1
 8016686:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 8016688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801668c:	3301      	adds	r3, #1
 801668e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016692:	e779      	b.n	8016588 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 8016694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016698:	3301      	adds	r3, #1
 801669a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801669e:	e6a1      	b.n	80163e4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 80166a0:	bf00      	nop
 80166a2:	37a4      	adds	r7, #164	; 0xa4
 80166a4:	46bd      	mov	sp, r7
 80166a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166aa:	bf00      	nop
 80166ac:	ffff8000 	.word	0xffff8000

080166b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 80166b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166b4:	b0bc      	sub	sp, #240	; 0xf0
 80166b6:	af04      	add	r7, sp, #16
 80166b8:	60f8      	str	r0, [r7, #12]
 80166ba:	60b9      	str	r1, [r7, #8]
 80166bc:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	7a1b      	ldrb	r3, [r3, #8]
 80166c2:	2b03      	cmp	r3, #3
 80166c4:	d127      	bne.n	8016716 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 80166c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80166ca:	68f9      	ldr	r1, [r7, #12]
 80166cc:	4618      	mov	r0, r3
 80166ce:	f7ff fb9b 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 80166d2:	68f8      	ldr	r0, [r7, #12]
 80166d4:	f7fe f98e 	bl	80149f4 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80166d8:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 80166da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80166de:	68b9      	ldr	r1, [r7, #8]
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7ff fb91 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 80166e6:	68b8      	ldr	r0, [r7, #8]
 80166e8:	f7fe f993 	bl	8014a12 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 80166ec:	4602      	mov	r2, r0
 80166ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80166f2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80166f6:	9200      	str	r2, [sp, #0]
 80166f8:	4622      	mov	r2, r4
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f000 f930 	bl	8016960 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 8016700:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016704:	4618      	mov	r0, r3
 8016706:	f7fd fa14 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801670a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801670e:	4618      	mov	r0, r3
 8016710:	f7fd fa0f 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
 8016714:	e080      	b.n	8016818 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	7a1b      	ldrb	r3, [r3, #8]
 801671a:	2b09      	cmp	r3, #9
 801671c:	d153      	bne.n	80167c6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	7a1b      	ldrb	r3, [r3, #8]
 8016722:	2b07      	cmp	r3, #7
 8016724:	d077      	beq.n	8016816 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8016726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801672a:	68f9      	ldr	r1, [r7, #12]
 801672c:	4618      	mov	r0, r3
 801672e:	f7ff fb6b 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8016732:	f107 0314 	add.w	r3, r7, #20
 8016736:	68b9      	ldr	r1, [r7, #8]
 8016738:	4618      	mov	r0, r3
 801673a:	f7ff fb65 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801673e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016742:	4618      	mov	r0, r3
 8016744:	f7fd fa0b 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016748:	4603      	mov	r3, r0
 801674a:	3b01      	subs	r3, #1
 801674c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8016750:	f107 0214 	add.w	r2, r7, #20
 8016754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016758:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801675c:	4618      	mov	r0, r3
 801675e:	f7ff fbab 	bl	8015eb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8016762:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8016766:	f107 0214 	add.w	r2, r7, #20
 801676a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801676e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016772:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8016776:	f7fe fb61 	bl	8014e3c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801677a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801677e:	68f8      	ldr	r0, [r7, #12]
 8016780:	f7fe f8cc 	bl	801491c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8016784:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	689e      	ldr	r6, [r3, #8]
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8016792:	68b8      	ldr	r0, [r7, #8]
 8016794:	f7fe f8d1 	bl	801493a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8016798:	4603      	mov	r3, r0
 801679a:	9302      	str	r3, [sp, #8]
 801679c:	9501      	str	r5, [sp, #4]
 801679e:	9400      	str	r4, [sp, #0]
 80167a0:	4633      	mov	r3, r6
 80167a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80167a6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80167aa:	4640      	mov	r0, r8
 80167ac:	f7f8 fa28 	bl	800ec00 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 80167b0:	f107 0314 	add.w	r3, r7, #20
 80167b4:	4618      	mov	r0, r3
 80167b6:	f7fd f9bc 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 80167ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80167be:	4618      	mov	r0, r3
 80167c0:	f7fd f9b7 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
 80167c4:	e028      	b.n	8016818 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 80167c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80167ca:	68f9      	ldr	r1, [r7, #12]
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7ff fb1b 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 80167d2:	68f8      	ldr	r0, [r7, #12]
 80167d4:	f7fe fb61 	bl	8014e9a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 80167d8:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 80167da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80167de:	68b9      	ldr	r1, [r7, #8]
 80167e0:	4618      	mov	r0, r3
 80167e2:	f7ff fb11 	bl	8015e08 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 80167e6:	68b8      	ldr	r0, [r7, #8]
 80167e8:	f7ff fd2c 	bl	8016244 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 80167ec:	4602      	mov	r2, r0
 80167ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80167f2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80167f6:	9200      	str	r2, [sp, #0]
 80167f8:	4622      	mov	r2, r4
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f7ff fdce 	bl	801639c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8016800:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8016804:	4618      	mov	r0, r3
 8016806:	f7fd f994 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801680a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801680e:	4618      	mov	r0, r3
 8016810:	f7fd f98f 	bl	8013b32 <_ZN6tflite12RuntimeShapeD1Ev>
 8016814:	e000      	b.n	8016818 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 8016816:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 8016818:	37e0      	adds	r7, #224	; 0xe0
 801681a:	46bd      	mov	sp, r7
 801681c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016820 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8016820:	b5b0      	push	{r4, r5, r7, lr}
 8016822:	b09e      	sub	sp, #120	; 0x78
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801682a:	2200      	movs	r2, #0
 801682c:	6839      	ldr	r1, [r7, #0]
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	f7fd fb76 	bl	8013f20 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8016834:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8016836:	2200      	movs	r2, #0
 8016838:	6839      	ldr	r1, [r7, #0]
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f7fd fb80 	bl	8013f40 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8016840:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	691b      	ldr	r3, [r3, #16]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d101      	bne.n	801684e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801684a:	f003 fdc3 	bl	801a3d4 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 8016852:	f107 0408 	add.w	r4, r7, #8
 8016856:	461d      	mov	r5, r3
 8016858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801685a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801685c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801685e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016864:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016868:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 801686c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801686e:	7a1b      	ldrb	r3, [r3, #8]
 8016870:	3b01      	subs	r3, #1
 8016872:	2b08      	cmp	r3, #8
 8016874:	d84a      	bhi.n	801690c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 8016876:	a201      	add	r2, pc, #4	; (adr r2, 801687c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 8016878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801687c:	080168a1 	.word	0x080168a1
 8016880:	0801690d 	.word	0x0801690d
 8016884:	080168d1 	.word	0x080168d1
 8016888:	0801690d 	.word	0x0801690d
 801688c:	0801690d 	.word	0x0801690d
 8016890:	0801690d 	.word	0x0801690d
 8016894:	080168ef 	.word	0x080168ef
 8016898:	0801690d 	.word	0x0801690d
 801689c:	080168bf 	.word	0x080168bf
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	695c      	ldr	r4, [r3, #20]
 80168a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168a6:	7a1b      	ldrb	r3, [r3, #8]
 80168a8:	4618      	mov	r0, r3
 80168aa:	f7fc fbe7 	bl	801307c <TfLiteTypeGetName>
 80168ae:	4602      	mov	r2, r0
 80168b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168b2:	7a1b      	ldrb	r3, [r3, #8]
 80168b4:	491e      	ldr	r1, [pc, #120]	; (8016930 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 80168b6:	6878      	ldr	r0, [r7, #4]
 80168b8:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80168ba:	2301      	movs	r3, #1
 80168bc:	e034      	b.n	8016928 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 80168be:	f107 0308 	add.w	r3, r7, #8
 80168c2:	461a      	mov	r2, r3
 80168c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80168c6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80168c8:	f7ff fef2 	bl	80166b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 80168cc:	2300      	movs	r3, #0
 80168ce:	e02b      	b.n	8016928 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	695c      	ldr	r4, [r3, #20]
 80168d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168d6:	7a1b      	ldrb	r3, [r3, #8]
 80168d8:	4618      	mov	r0, r3
 80168da:	f7fc fbcf 	bl	801307c <TfLiteTypeGetName>
 80168de:	4602      	mov	r2, r0
 80168e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168e2:	7a1b      	ldrb	r3, [r3, #8]
 80168e4:	4912      	ldr	r1, [pc, #72]	; (8016930 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80168ea:	2301      	movs	r3, #1
 80168ec:	e01c      	b.n	8016928 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	695c      	ldr	r4, [r3, #20]
 80168f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80168f4:	7a1b      	ldrb	r3, [r3, #8]
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7fc fbc0 	bl	801307c <TfLiteTypeGetName>
 80168fc:	4602      	mov	r2, r0
 80168fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016900:	7a1b      	ldrb	r3, [r3, #8]
 8016902:	490b      	ldr	r1, [pc, #44]	; (8016930 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8016908:	2301      	movs	r3, #1
 801690a:	e00d      	b.n	8016928 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	695c      	ldr	r4, [r3, #20]
 8016910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016912:	7a1b      	ldrb	r3, [r3, #8]
 8016914:	4618      	mov	r0, r3
 8016916:	f7fc fbb1 	bl	801307c <TfLiteTypeGetName>
 801691a:	4602      	mov	r2, r0
 801691c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801691e:	7a1b      	ldrb	r3, [r3, #8]
 8016920:	4903      	ldr	r1, [pc, #12]	; (8016930 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8016926:	2301      	movs	r3, #1
  }
}
 8016928:	4618      	mov	r0, r3
 801692a:	3778      	adds	r7, #120	; 0x78
 801692c:	46bd      	mov	sp, r7
 801692e:	bdb0      	pop	{r4, r5, r7, pc}
 8016930:	0801cdc0 	.word	0x0801cdc0

08016934 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8016934:	b4b0      	push	{r4, r5, r7}
 8016936:	b083      	sub	sp, #12
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	4a07      	ldr	r2, [pc, #28]	; (801695c <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8016940:	461c      	mov	r4, r3
 8016942:	4615      	mov	r5, r2
 8016944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016948:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801694c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	370c      	adds	r7, #12
 8016954:	46bd      	mov	sp, r7
 8016956:	bcb0      	pop	{r4, r5, r7}
 8016958:	4770      	bx	lr
 801695a:	bf00      	nop
 801695c:	0801cddc 	.word	0x0801cddc

08016960 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8016960:	b590      	push	{r4, r7, lr}
 8016962:	b09f      	sub	sp, #124	; 0x7c
 8016964:	af00      	add	r7, sp, #0
 8016966:	60f8      	str	r0, [r7, #12]
 8016968:	60b9      	str	r1, [r7, #8]
 801696a:	607a      	str	r2, [r7, #4]
 801696c:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	689b      	ldr	r3, [r3, #8]
 8016972:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	68db      	ldr	r3, [r3, #12]
 8016978:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	699b      	ldr	r3, [r3, #24]
 801697e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8016980:	68b8      	ldr	r0, [r7, #8]
 8016982:	f7fd f8ec 	bl	8013b5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8016986:	4603      	mov	r3, r0
 8016988:	3b01      	subs	r3, #1
 801698a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801698c:	683a      	ldr	r2, [r7, #0]
 801698e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016990:	68b8      	ldr	r0, [r7, #8]
 8016992:	f7ff fa91 	bl	8015eb8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8016996:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8016998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801699a:	683a      	ldr	r2, [r7, #0]
 801699c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801699e:	68b8      	ldr	r0, [r7, #8]
 80169a0:	f7fe fa4c 	bl	8014e3c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80169a4:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80169a6:	2300      	movs	r3, #0
 80169a8:	677b      	str	r3, [r7, #116]	; 0x74
 80169aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80169ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169ae:	429a      	cmp	r2, r3
 80169b0:	f280 80ed 	bge.w	8016b8e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80169b4:	2300      	movs	r3, #0
 80169b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80169ba:	2300      	movs	r3, #0
 80169bc:	673b      	str	r3, [r7, #112]	; 0x70
 80169be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80169c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169c2:	429a      	cmp	r2, r3
 80169c4:	da16      	bge.n	80169f4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80169c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80169ca:	fb03 f202 	mul.w	r2, r3, r2
 80169ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169d0:	4413      	add	r3, r2
 80169d2:	461a      	mov	r2, r3
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	441a      	add	r2, r3
 80169d8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80169dc:	4611      	mov	r1, r2
 80169de:	4618      	mov	r0, r3
 80169e0:	f7ff fc1c 	bl	801621c <_ZSt3maxIhERKT_S2_S2_>
 80169e4:	4603      	mov	r3, r0
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80169ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80169ee:	3301      	adds	r3, #1
 80169f0:	673b      	str	r3, [r7, #112]	; 0x70
 80169f2:	e7e4      	b.n	80169be <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80169f4:	f000 f8cf 	bl	8016b96 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80169f8:	4603      	mov	r3, r0
 80169fa:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80169fc:	2300      	movs	r3, #0
 80169fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016a00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a04:	429a      	cmp	r2, r3
 8016a06:	da2f      	bge.n	8016a68 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8016a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016a0c:	fb03 f202 	mul.w	r2, r3, r2
 8016a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a12:	4413      	add	r3, r2
 8016a14:	461a      	mov	r2, r3
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	4413      	add	r3, r2
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	461a      	mov	r2, r3
 8016a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8016a22:	1ad3      	subs	r3, r2, r3
 8016a24:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8016a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a2a:	429a      	cmp	r2, r3
 8016a2c:	db18      	blt.n	8016a60 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8016a2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016a30:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016a32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016a34:	f7fe fa92 	bl	8014f5c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8016a38:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8016a3a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8016a3c:	f000 f8b3 	bl	8016ba6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016a40:	4603      	mov	r3, r0
 8016a42:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8016a44:	69f8      	ldr	r0, [r7, #28]
 8016a46:	f000 f8dd 	bl	8016c04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f000 fa21 	bl	8016e94 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8016a52:	4603      	mov	r3, r0
 8016a54:	4619      	mov	r1, r3
 8016a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a58:	f000 f8b6 	bl	8016bc8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8016a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016a62:	3301      	adds	r3, #1
 8016a64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016a66:	e7cb      	b.n	8016a00 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8016a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f000 fa2b 	bl	8016ec8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016a72:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016a7a:	210c      	movs	r1, #12
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f7fe fa80 	bl	8014f82 <_ZN6tflite13GetReciprocalEliPi>
 8016a82:	4603      	mov	r3, r0
 8016a84:	4618      	mov	r0, r3
 8016a86:	f7fe fab9 	bl	8014ffc <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8016a8e:	2300      	movs	r3, #0
 8016a90:	66bb      	str	r3, [r7, #104]	; 0x68
 8016a92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a96:	429a      	cmp	r2, r3
 8016a98:	da75      	bge.n	8016b86 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8016a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016a9e:	fb03 f202 	mul.w	r2, r3, r2
 8016aa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016aa4:	4413      	add	r3, r2
 8016aa6:	461a      	mov	r2, r3
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	4413      	add	r3, r2
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	461a      	mov	r2, r3
 8016ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8016ab4:	1ad3      	subs	r3, r2, r3
 8016ab6:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8016ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016abc:	429a      	cmp	r2, r3
 8016abe:	db50      	blt.n	8016b62 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8016ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016ac2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016ac4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016ac6:	f7fe fa49 	bl	8014f5c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8016aca:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8016acc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016ace:	f000 f86a 	bl	8016ba6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8016ad6:	69b8      	ldr	r0, [r7, #24]
 8016ad8:	f000 f894 	bl	8016c04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8016adc:	4603      	mov	r3, r0
 8016ade:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8016ae0:	6979      	ldr	r1, [r7, #20]
 8016ae2:	6a38      	ldr	r0, [r7, #32]
 8016ae4:	f7ff fad2 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	633b      	str	r3, [r7, #48]	; 0x30
 8016aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016af0:	4618      	mov	r0, r3
 8016af2:	f7fe faf5 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016af6:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8016af8:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8016afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016afc:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8016afe:	4611      	mov	r1, r2
 8016b00:	4618      	mov	r0, r3
 8016b02:	f7fd fd33 	bl	801456c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8016b06:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8016b08:	f7fc fd07 	bl	801351a <_ZNSt14numeric_limitsIhE3minEv>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	461a      	mov	r2, r3
            unsat_output +
 8016b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b12:	4413      	add	r3, r2
        const int32_t shifted_output =
 8016b14:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8016b16:	f7fc fd08 	bl	801352a <_ZNSt14numeric_limitsIhE3maxEv>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8016b1e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8016b22:	f107 0310 	add.w	r3, r7, #16
 8016b26:	4611      	mov	r1, r2
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7fc ffb9 	bl	8013aa0 <_ZSt3minIlERKT_S2_S2_>
 8016b2e:	4604      	mov	r4, r0
 8016b30:	f7fc fcf3 	bl	801351a <_ZNSt14numeric_limitsIhE3minEv>
 8016b34:	4603      	mov	r3, r0
 8016b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8016b38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	4620      	mov	r0, r4
 8016b40:	f7fc ffc2 	bl	8013ac8 <_ZSt3maxIlERKT_S2_S2_>
 8016b44:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8016b46:	6819      	ldr	r1, [r3, #0]
 8016b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b4c:	fb03 f202 	mul.w	r2, r3, r2
 8016b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b52:	4413      	add	r3, r2
 8016b54:	461a      	mov	r2, r3
 8016b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b5a:	4413      	add	r3, r2
 8016b5c:	b2ca      	uxtb	r2, r1
 8016b5e:	701a      	strb	r2, [r3, #0]
 8016b60:	e00d      	b.n	8016b7e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8016b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b66:	fb03 f202 	mul.w	r2, r3, r2
 8016b6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b6c:	4413      	add	r3, r2
 8016b6e:	461a      	mov	r2, r3
 8016b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b74:	189c      	adds	r4, r3, r2
 8016b76:	f7fc fcd0 	bl	801351a <_ZNSt14numeric_limitsIhE3minEv>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8016b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016b80:	3301      	adds	r3, #1
 8016b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8016b84:	e785      	b.n	8016a92 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 8016b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016b88:	3301      	adds	r3, #1
 8016b8a:	677b      	str	r3, [r7, #116]	; 0x74
 8016b8c:	e70d      	b.n	80169aa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8016b8e:	bf00      	nop
 8016b90:	377c      	adds	r7, #124	; 0x7c
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd90      	pop	{r4, r7, pc}

08016b96 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8016b96:	b580      	push	{r7, lr}
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	f000 f99f 	bl	8016ede <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	bd80      	pop	{r7, pc}

08016ba6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8016ba6:	b580      	push	{r7, lr}
 8016ba8:	b084      	sub	sp, #16
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8016bae:	f107 030c 	add.w	r3, r7, #12
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f000 f9a7 	bl	8016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016bb8:	4602      	mov	r2, r0
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	6013      	str	r3, [r2, #0]
    return retval;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
  }
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	3710      	adds	r7, #16
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bd80      	pop	{r7, pc}

08016bc8 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8016bc8:	b590      	push	{r4, r7, lr}
 8016bca:	b083      	sub	sp, #12
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
 8016bd0:	6039      	str	r1, [r7, #0]
 8016bd2:	1d3b      	adds	r3, r7, #4
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f000 f977 	bl	8016ec8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	681c      	ldr	r4, [r3, #0]
 8016bde:	463b      	mov	r3, r7
 8016be0:	4618      	mov	r0, r3
 8016be2:	f000 f971 	bl	8016ec8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016be6:	4603      	mov	r3, r0
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	4619      	mov	r1, r3
 8016bec:	4620      	mov	r0, r4
 8016bee:	f7fe f8bd 	bl	8014d6c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f000 f991 	bl	8016f1c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	370c      	adds	r7, #12
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd90      	pop	{r4, r7, pc}

08016c04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8016c04:	b590      	push	{r4, r7, lr}
 8016c06:	b091      	sub	sp, #68	; 0x44
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8016c0c:	f000 f997 	bl	8016f3e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8016c10:	4603      	mov	r3, r0
 8016c12:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8016c14:	2001      	movs	r0, #1
 8016c16:	f000 f99b 	bl	8016f50 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	4619      	mov	r1, r3
 8016c1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016c20:	f000 f9aa 	bl	8016f78 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016c24:	4603      	mov	r3, r0
 8016c26:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8016c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	f000 f9c2 	bl	8016fb4 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016c30:	4603      	mov	r3, r0
 8016c32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016c34:	4618      	mov	r0, r3
 8016c36:	f000 f99f 	bl	8016f78 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8016c3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c40:	f000 f9d6 	bl	8016ff0 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8016c44:	4603      	mov	r3, r0
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7ff f9be 	bl	8015fc8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8016c50:	6879      	ldr	r1, [r7, #4]
 8016c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c54:	f000 f990 	bl	8016f78 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8016c5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c60:	4618      	mov	r0, r3
 8016c62:	f000 f950 	bl	8016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016c66:	4603      	mov	r3, r0
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8016c6c:	4883      	ldr	r0, [pc, #524]	; (8016e7c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8016c6e:	f7ff f952 	bl	8015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016c72:	4603      	mov	r3, r0
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7fe fa3e 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8016c7e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8016c82:	f7fe f837 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016c86:	4603      	mov	r3, r0
 8016c88:	4619      	mov	r1, r3
 8016c8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016c8c:	f7fe f83d 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016c90:	4603      	mov	r3, r0
 8016c92:	4618      	mov	r0, r3
 8016c94:	f7fe f88c 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016c98:	4604      	mov	r4, r0
 8016c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c9e:	f7ff f9f5 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ca6:	4619      	mov	r1, r3
 8016ca8:	4620      	mov	r0, r4
 8016caa:	f7ff f95a 	bl	8015f62 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8016cb2:	4873      	ldr	r0, [pc, #460]	; (8016e80 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8016cb4:	f7ff f92f 	bl	8015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7fe fa1b 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	623b      	str	r3, [r7, #32]
 8016cc4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8016cc8:	f7fe f814 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	4619      	mov	r1, r3
 8016cd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016cd2:	f7fe f81a 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f7fe f869 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016cde:	4604      	mov	r4, r0
 8016ce0:	6a39      	ldr	r1, [r7, #32]
 8016ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ce4:	f7ff f9d2 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cec:	4619      	mov	r1, r3
 8016cee:	4620      	mov	r0, r4
 8016cf0:	f7ff f937 	bl	8015f62 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8016cf8:	4862      	ldr	r0, [pc, #392]	; (8016e84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8016cfa:	f7ff f90c 	bl	8015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7fe f9f8 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016d06:	4603      	mov	r3, r0
 8016d08:	61fb      	str	r3, [r7, #28]
 8016d0a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8016d0e:	f7fd fff1 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016d12:	4603      	mov	r3, r0
 8016d14:	4619      	mov	r1, r3
 8016d16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d18:	f7fd fff7 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f7fe f846 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016d24:	4604      	mov	r4, r0
 8016d26:	69f9      	ldr	r1, [r7, #28]
 8016d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d2a:	f7ff f9af 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d32:	4619      	mov	r1, r3
 8016d34:	4620      	mov	r0, r4
 8016d36:	f7ff f914 	bl	8015f62 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8016d3e:	4852      	ldr	r0, [pc, #328]	; (8016e88 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8016d40:	f7ff f8e9 	bl	8015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016d44:	4603      	mov	r3, r0
 8016d46:	4618      	mov	r0, r3
 8016d48:	f7fe f9d5 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	61bb      	str	r3, [r7, #24]
 8016d50:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8016d54:	f7fd ffce 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d5e:	f7fd ffd4 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016d62:	4603      	mov	r3, r0
 8016d64:	4618      	mov	r0, r3
 8016d66:	f7fe f823 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016d6a:	4604      	mov	r4, r0
 8016d6c:	69b9      	ldr	r1, [r7, #24]
 8016d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d70:	f7ff f98c 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016d74:	4603      	mov	r3, r0
 8016d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016d78:	4619      	mov	r1, r3
 8016d7a:	4620      	mov	r0, r4
 8016d7c:	f7ff f8f1 	bl	8015f62 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016d80:	4603      	mov	r3, r0
 8016d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8016d84:	4841      	ldr	r0, [pc, #260]	; (8016e8c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8016d86:	f7ff f8c6 	bl	8015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f7fe f9b2 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016d92:	4603      	mov	r3, r0
 8016d94:	617b      	str	r3, [r7, #20]
 8016d96:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8016d9a:	f7fd ffab 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	4619      	mov	r1, r3
 8016da2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016da4:	f7fd ffb1 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016da8:	4603      	mov	r3, r0
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7fe f800 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016db0:	4604      	mov	r4, r0
 8016db2:	6979      	ldr	r1, [r7, #20]
 8016db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016db6:	f7ff f969 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016dbe:	4619      	mov	r1, r3
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	f7ff f8ce 	bl	8015f62 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8016dca:	4831      	ldr	r0, [pc, #196]	; (8016e90 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8016dcc:	f7ff f8a3 	bl	8015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f7fe f98f 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	613b      	str	r3, [r7, #16]
 8016ddc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8016de0:	f7fd ff88 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016de4:	4603      	mov	r3, r0
 8016de6:	4619      	mov	r1, r3
 8016de8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016dea:	f7fd ff8e 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016dee:	4603      	mov	r3, r0
 8016df0:	4618      	mov	r0, r3
 8016df2:	f7fd ffdd 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016df6:	4604      	mov	r4, r0
 8016df8:	6939      	ldr	r1, [r7, #16]
 8016dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016dfc:	f7ff f946 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016e00:	4603      	mov	r3, r0
 8016e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e04:	4619      	mov	r1, r3
 8016e06:	4620      	mov	r0, r4
 8016e08:	f7ff f8ab 	bl	8015f62 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8016e10:	20f2      	movs	r0, #242	; 0xf2
 8016e12:	f7ff f880 	bl	8015f16 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016e16:	4603      	mov	r3, r0
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f7fe f96c 	bl	80150f6 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	60fb      	str	r3, [r7, #12]
 8016e22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8016e26:	f7fd ff65 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016e30:	f7fd ff6b 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016e34:	4603      	mov	r3, r0
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7fd ffba 	bl	8014db0 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	68f9      	ldr	r1, [r7, #12]
 8016e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e42:	f7ff f923 	bl	801608c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016e46:	4603      	mov	r3, r0
 8016e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	f7ff f888 	bl	8015f62 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016e52:	4603      	mov	r3, r0
 8016e54:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8016e56:	6878      	ldr	r0, [r7, #4]
 8016e58:	f000 f8e4 	bl	8017024 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8016e5c:	4604      	mov	r4, r0
 8016e5e:	f7fe f95e 	bl	801511e <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8016e62:	4603      	mov	r3, r0
 8016e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e66:	4619      	mov	r1, r3
 8016e68:	4620      	mov	r0, r4
 8016e6a:	f7ff f87a 	bl	8015f62 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8016e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3744      	adds	r7, #68	; 0x44
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd90      	pop	{r4, r7, pc}
 8016e7c:	63afbe7b 	.word	0x63afbe7b
 8016e80:	4da2cbf2 	.word	0x4da2cbf2
 8016e84:	2f16ac6c 	.word	0x2f16ac6c
 8016e88:	1152aaa4 	.word	0x1152aaa4
 8016e8c:	02582ab7 	.word	0x02582ab7
 8016e90:	000afe11 	.word	0x000afe11

08016e94 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016e94:	b5b0      	push	{r4, r5, r7, lr}
 8016e96:	b084      	sub	sp, #16
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8016e9c:	1d3b      	adds	r3, r7, #4
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7fe f91e 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	681d      	ldr	r5, [r3, #0]
 8016ea8:	f107 030c 	add.w	r3, r7, #12
 8016eac:	4618      	mov	r0, r3
 8016eae:	f000 f80b 	bl	8016ec8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016eb2:	4604      	mov	r4, r0
 8016eb4:	4628      	mov	r0, r5
 8016eb6:	f000 f8c7 	bl	8017048 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	6023      	str	r3, [r4, #0]
  return result;
 8016ebe:	68fb      	ldr	r3, [r7, #12]
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3710      	adds	r7, #16
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bdb0      	pop	{r4, r5, r7, pc}

08016ec8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8016ec8:	b480      	push	{r7}
 8016eca:	b083      	sub	sp, #12
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6078      	str	r0, [r7, #4]
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	370c      	adds	r7, #12
 8016ed6:	46bd      	mov	sp, r7
 8016ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016edc:	4770      	bx	lr

08016ede <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8016ede:	b590      	push	{r4, r7, lr}
 8016ee0:	b085      	sub	sp, #20
 8016ee2:	af00      	add	r7, sp, #0
 8016ee4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8016ee6:	f107 030c 	add.w	r3, r7, #12
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7ff ffec 	bl	8016ec8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	6878      	ldr	r0, [r7, #4]
 8016ef4:	f7fd fefe 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	6023      	str	r3, [r4, #0]
    return retval;
 8016efc:	68fb      	ldr	r3, [r7, #12]
  }
 8016efe:	4618      	mov	r0, r3
 8016f00:	3714      	adds	r7, #20
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd90      	pop	{r4, r7, pc}

08016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8016f06:	b480      	push	{r7}
 8016f08:	b083      	sub	sp, #12
 8016f0a:	af00      	add	r7, sp, #0
 8016f0c:	6078      	str	r0, [r7, #4]
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	4618      	mov	r0, r3
 8016f12:	370c      	adds	r7, #12
 8016f14:	46bd      	mov	sp, r7
 8016f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1a:	4770      	bx	lr

08016f1c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b084      	sub	sp, #16
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8016f24:	f107 030c 	add.w	r3, r7, #12
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7ff ffcd 	bl	8016ec8 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8016f2e:	4602      	mov	r2, r0
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6013      	str	r3, [r2, #0]
    return retval;
 8016f34:	68fb      	ldr	r3, [r7, #12]
  }
 8016f36:	4618      	mov	r0, r3
 8016f38:	3710      	adds	r7, #16
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}

08016f3e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8016f3e:	b580      	push	{r7, lr}
 8016f40:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8016f42:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8016f46:	f000 f803 	bl	8016f50 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8016f4a:	4603      	mov	r3, r0
  }
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	bd80      	pop	{r7, pc}

08016f50 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8016f50:	b590      	push	{r4, r7, lr}
 8016f52:	b085      	sub	sp, #20
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8016f58:	f107 030c 	add.w	r3, r7, #12
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7ff ffd2 	bl	8016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f62:	4604      	mov	r4, r0
 8016f64:	6878      	ldr	r0, [r7, #4]
 8016f66:	f7fd fec5 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	6023      	str	r3, [r4, #0]
    return retval;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
  }
 8016f70:	4618      	mov	r0, r3
 8016f72:	3714      	adds	r7, #20
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd90      	pop	{r4, r7, pc}

08016f78 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8016f78:	b590      	push	{r4, r7, lr}
 8016f7a:	b083      	sub	sp, #12
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
 8016f80:	6039      	str	r1, [r7, #0]
 8016f82:	1d3b      	adds	r3, r7, #4
 8016f84:	4618      	mov	r0, r3
 8016f86:	f7ff ffbe 	bl	8016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	681c      	ldr	r4, [r3, #0]
 8016f8e:	463b      	mov	r3, r7
 8016f90:	4618      	mov	r0, r3
 8016f92:	f7ff ffb8 	bl	8016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016f96:	4603      	mov	r3, r0
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	4619      	mov	r1, r3
 8016f9c:	4620      	mov	r0, r4
 8016f9e:	f7fe f9db 	bl	8015358 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7ff fdfe 	bl	8016ba6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016faa:	4603      	mov	r3, r0
 8016fac:	4618      	mov	r0, r3
 8016fae:	370c      	adds	r7, #12
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd90      	pop	{r4, r7, pc}

08016fb4 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8016fb4:	b590      	push	{r4, r7, lr}
 8016fb6:	b083      	sub	sp, #12
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
 8016fbc:	6039      	str	r1, [r7, #0]
 8016fbe:	1d3b      	adds	r3, r7, #4
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f7ff ffa0 	bl	8016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	681c      	ldr	r4, [r3, #0]
 8016fca:	463b      	mov	r3, r7
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7ff ff9a 	bl	8016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	4619      	mov	r1, r3
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f7fd fe96 	bl	8014d0a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	f7ff fde0 	bl	8016ba6 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	4618      	mov	r0, r3
 8016fea:	370c      	adds	r7, #12
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd90      	pop	{r4, r7, pc}

08016ff0 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016ff0:	b5b0      	push	{r4, r5, r7, lr}
 8016ff2:	b084      	sub	sp, #16
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8016ff8:	1d3b      	adds	r3, r7, #4
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f7ff ff83 	bl	8016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8017000:	4603      	mov	r3, r0
 8017002:	681d      	ldr	r5, [r3, #0]
 8017004:	f107 030c 	add.w	r3, r7, #12
 8017008:	4618      	mov	r0, r3
 801700a:	f7fe f869 	bl	80150e0 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801700e:	4604      	mov	r4, r0
 8017010:	4628      	mov	r0, r5
 8017012:	f000 f825 	bl	8017060 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8017016:	4603      	mov	r3, r0
 8017018:	6023      	str	r3, [r4, #0]
  return result;
 801701a:	68fb      	ldr	r3, [r7, #12]
}
 801701c:	4618      	mov	r0, r3
 801701e:	3710      	adds	r7, #16
 8017020:	46bd      	mov	sp, r7
 8017022:	bdb0      	pop	{r4, r5, r7, pc}

08017024 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8017024:	b580      	push	{r7, lr}
 8017026:	b082      	sub	sp, #8
 8017028:	af00      	add	r7, sp, #0
 801702a:	6078      	str	r0, [r7, #4]
 801702c:	1d3b      	adds	r3, r7, #4
 801702e:	4618      	mov	r0, r3
 8017030:	f7ff ff69 	bl	8016f06 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8017034:	4603      	mov	r3, r0
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	4618      	mov	r0, r3
 801703a:	f7fe ffb3 	bl	8015fa4 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801703e:	4603      	mov	r3, r0
 8017040:	4618      	mov	r0, r3
 8017042:	3708      	adds	r7, #8
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}

08017048 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8017048:	b580      	push	{r7, lr}
 801704a:	b082      	sub	sp, #8
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f000 f811 	bl	8017078 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 8017056:	4603      	mov	r3, r0
}
 8017058:	4618      	mov	r0, r3
 801705a:	3708      	adds	r7, #8
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}

08017060 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8017060:	b580      	push	{r7, lr}
 8017062:	b082      	sub	sp, #8
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f000 f813 	bl	8017094 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801706e:	4603      	mov	r3, r0
}
 8017070:	4618      	mov	r0, r3
 8017072:	3708      	adds	r7, #8
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}

08017078 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8017078:	b580      	push	{r7, lr}
 801707a:	b082      	sub	sp, #8
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8017080:	210c      	movs	r1, #12
 8017082:	6878      	ldr	r0, [r7, #4]
 8017084:	f7fd fa72 	bl	801456c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8017088:	4603      	mov	r3, r0
  }
 801708a:	4618      	mov	r0, r3
 801708c:	3708      	adds	r7, #8
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}
	...

08017094 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8017094:	b580      	push	{r7, lr}
 8017096:	b08a      	sub	sp, #40	; 0x28
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801709c:	f7fc fde1 	bl	8013c62 <_ZNSt14numeric_limitsIlE3minEv>
 80170a0:	4603      	mov	r3, r0
 80170a2:	4618      	mov	r0, r3
 80170a4:	f7fd fe26 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80170a8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80170aa:	f7fc f863 	bl	8013174 <_ZNSt14numeric_limitsIlE3maxEv>
 80170ae:	4603      	mov	r3, r0
 80170b0:	4618      	mov	r0, r3
 80170b2:	f7fd fe1f 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80170b6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80170b8:	2320      	movs	r3, #32
 80170ba:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80170bc:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80170c0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80170c2:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 80170c6:	f7fd fe15 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80170ca:	4603      	mov	r3, r0
 80170cc:	4619      	mov	r1, r3
 80170ce:	6878      	ldr	r0, [r7, #4]
 80170d0:	f7fd fe5a 	bl	8014d88 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80170d4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80170d6:	480f      	ldr	r0, [pc, #60]	; (8017114 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 80170d8:	f7fd fe0c 	bl	8014cf4 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80170dc:	4603      	mov	r3, r0
 80170de:	4619      	mov	r1, r3
 80170e0:	6878      	ldr	r0, [r7, #4]
 80170e2:	f7fd fe2f 	bl	8014d44 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80170e6:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80170e8:	2105      	movs	r1, #5
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	f7fe fa18 	bl	8015520 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80170f0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80170f2:	68fa      	ldr	r2, [r7, #12]
 80170f4:	6a39      	ldr	r1, [r7, #32]
 80170f6:	6978      	ldr	r0, [r7, #20]
 80170f8:	f7fe fa56 	bl	80155a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80170fc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80170fe:	68fa      	ldr	r2, [r7, #12]
 8017100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017102:	6938      	ldr	r0, [r7, #16]
 8017104:	f7fe fa50 	bl	80155a8 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8017108:	60f8      	str	r0, [r7, #12]
    return result;
 801710a:	68fb      	ldr	r3, [r7, #12]
  }
 801710c:	4618      	mov	r0, r3
 801710e:	3728      	adds	r7, #40	; 0x28
 8017110:	46bd      	mov	sp, r7
 8017112:	bd80      	pop	{r7, pc}
 8017114:	fc000001 	.word	0xfc000001

08017118 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 8017118:	b580      	push	{r7, lr}
 801711a:	ed2d 8b02 	vpush	{d8}
 801711e:	b094      	sub	sp, #80	; 0x50
 8017120:	af00      	add	r7, sp, #0
 8017122:	6178      	str	r0, [r7, #20]
 8017124:	ed87 0a04 	vstr	s0, [r7, #16]
 8017128:	edc7 0a03 	vstr	s1, [r7, #12]
 801712c:	60b9      	str	r1, [r7, #8]
 801712e:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 8017130:	ed97 7a03 	vldr	s14, [r7, #12]
 8017134:	edd7 7a04 	vldr	s15, [r7, #16]
 8017138:	ee77 6a67 	vsub.f32	s13, s14, s15
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	3b01      	subs	r3, #1
 8017140:	ee07 3a90 	vmov	s15, r3
 8017144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801714c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8017150:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017154:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801715c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 8017160:	2300      	movs	r3, #0
 8017162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	3b01      	subs	r3, #1
 8017168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801716a:	429a      	cmp	r2, r3
 801716c:	f280 80c0 	bge.w	80172f0 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 8017170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017172:	ee07 3a90 	vmov	s15, r3
 8017176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801717a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801717e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017182:	edd7 7a04 	vldr	s15, [r7, #16]
 8017186:	ee77 7a27 	vadd.f32	s15, s14, s15
 801718a:	697b      	ldr	r3, [r7, #20]
 801718c:	eeb0 0a67 	vmov.f32	s0, s15
 8017190:	4798      	blx	r3
 8017192:	eef0 7a40 	vmov.f32	s15, s0
 8017196:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8017368 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801719a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801719e:	eeb0 0a67 	vmov.f32	s0, s15
 80171a2:	f7fc f999 	bl	80134d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80171a6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 80171aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171ac:	3301      	adds	r3, #1
 80171ae:	ee07 3a90 	vmov	s15, r3
 80171b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80171b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80171ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171be:	edd7 7a04 	vldr	s15, [r7, #16]
 80171c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171c6:	697b      	ldr	r3, [r7, #20]
 80171c8:	eeb0 0a67 	vmov.f32	s0, s15
 80171cc:	4798      	blx	r3
 80171ce:	eef0 7a40 	vmov.f32	s15, s0
 80171d2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8017368 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80171d6:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 80171da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171dc:	ee07 3a90 	vmov	s15, r3
 80171e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80171e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80171e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80171f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80171f4:	697b      	ldr	r3, [r7, #20]
 80171f6:	eeb0 0a67 	vmov.f32	s0, s15
 80171fa:	4798      	blx	r3
 80171fc:	eef0 7a40 	vmov.f32	s15, s0
 8017200:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8017368 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8017204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017208:	eeb0 0a67 	vmov.f32	s0, s15
 801720c:	f7fc f964 	bl	80134d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017210:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8017214:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017218:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801721c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017220:	eeb0 0a47 	vmov.f32	s0, s14
 8017224:	f7fc f958 	bl	80134d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017228:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 801722c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801722e:	ee07 3a90 	vmov	s15, r3
 8017232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017236:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801723a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801723e:	edd7 7a04 	vldr	s15, [r7, #16]
 8017242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017246:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801724a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	eeb0 0a67 	vmov.f32	s0, s15
 8017254:	4798      	blx	r3
 8017256:	eef0 7a40 	vmov.f32	s15, s0
 801725a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8017368 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801725e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017262:	eeb0 0a67 	vmov.f32	s0, s15
 8017266:	f7fc f937 	bl	80134d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801726a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 801726e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8017272:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8017276:	ee77 7a67 	vsub.f32	s15, s14, s15
 801727a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 801727e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017282:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017286:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801728a:	eeb0 0a47 	vmov.f32	s0, s14
 801728e:	f7fc f923 	bl	80134d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017292:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8017296:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801729a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801729e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80172a2:	edc7 7a06 	vstr	s15, [r7, #24]
 80172a6:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80172aa:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 80172ac:	f107 021c 	add.w	r2, r7, #28
 80172b0:	f107 0318 	add.w	r3, r7, #24
 80172b4:	4611      	mov	r1, r2
 80172b6:	4618      	mov	r0, r3
 80172b8:	f7ed f8cc 	bl	8004454 <_ZSt3maxIfERKT_S2_S2_>
 80172bc:	4602      	mov	r2, r0
 80172be:	4b2b      	ldr	r3, [pc, #172]	; (801736c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 80172c0:	623b      	str	r3, [r7, #32]
 80172c2:	f107 0320 	add.w	r3, r7, #32
 80172c6:	4619      	mov	r1, r3
 80172c8:	4610      	mov	r0, r2
 80172ca:	f7fc f8d8 	bl	801347e <_ZSt3minIfERKT_S2_S2_>
 80172ce:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 80172d0:	edd3 7a00 	vldr	s15, [r3]
 80172d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172d6:	005b      	lsls	r3, r3, #1
 80172d8:	68ba      	ldr	r2, [r7, #8]
 80172da:	4413      	add	r3, r2
 80172dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172e0:	ee17 2a90 	vmov	r2, s15
 80172e4:	b212      	sxth	r2, r2
 80172e6:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 80172e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172ea:	3301      	adds	r3, #1
 80172ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80172ee:	e739      	b.n	8017164 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 80172f0:	697b      	ldr	r3, [r7, #20]
 80172f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80172f6:	4798      	blx	r3
 80172f8:	eef0 7a40 	vmov.f32	s15, s0
 80172fc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8017368 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8017300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017304:	eeb0 0a67 	vmov.f32	s0, s15
 8017308:	f7fc f8e6 	bl	80134d8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801730c:	eef0 7a40 	vmov.f32	s15, s0
 8017310:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8017314:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8017318:	62bb      	str	r3, [r7, #40]	; 0x28
 801731a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801731e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017322:	4611      	mov	r1, r2
 8017324:	4618      	mov	r0, r3
 8017326:	f7ed f895 	bl	8004454 <_ZSt3maxIfERKT_S2_S2_>
 801732a:	4602      	mov	r2, r0
 801732c:	4b0f      	ldr	r3, [pc, #60]	; (801736c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801732e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017334:	4619      	mov	r1, r3
 8017336:	4610      	mov	r0, r2
 8017338:	f7fc f8a1 	bl	801347e <_ZSt3minIfERKT_S2_S2_>
 801733c:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 801733e:	edd3 7a00 	vldr	s15, [r3]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017348:	3b01      	subs	r3, #1
 801734a:	005b      	lsls	r3, r3, #1
 801734c:	68ba      	ldr	r2, [r7, #8]
 801734e:	4413      	add	r3, r2
 8017350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017354:	ee17 2a90 	vmov	r2, s15
 8017358:	b212      	sxth	r2, r2
 801735a:	801a      	strh	r2, [r3, #0]
}
 801735c:	bf00      	nop
 801735e:	3750      	adds	r7, #80	; 0x50
 8017360:	46bd      	mov	sp, r7
 8017362:	ecbd 8b02 	vpop	{d8}
 8017366:	bd80      	pop	{r7, pc}
 8017368:	47000000 	.word	0x47000000
 801736c:	46fffe00 	.word	0x46fffe00

08017370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8017370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017374:	b090      	sub	sp, #64	; 0x40
 8017376:	af06      	add	r7, sp, #24
 8017378:	60f8      	str	r0, [r7, #12]
 801737a:	60b9      	str	r1, [r7, #8]
 801737c:	607a      	str	r2, [r7, #4]
 801737e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	781b      	ldrb	r3, [r3, #0]
 8017384:	2b09      	cmp	r3, #9
 8017386:	d004      	beq.n	8017392 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	781b      	ldrb	r3, [r3, #0]
 801738c:	2b07      	cmp	r3, #7
 801738e:	f040 81b6 	bne.w	80176fe <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 8017392:	68bb      	ldr	r3, [r7, #8]
 8017394:	781b      	ldrb	r3, [r3, #0]
 8017396:	2b07      	cmp	r3, #7
 8017398:	d156      	bne.n	8017448 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	691b      	ldr	r3, [r3, #16]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d011      	beq.n	80173c6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	695c      	ldr	r4, [r3, #20]
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	691b      	ldr	r3, [r3, #16]
 80173aa:	2200      	movs	r2, #0
 80173ac:	9203      	str	r2, [sp, #12]
 80173ae:	9302      	str	r3, [sp, #8]
 80173b0:	4ba1      	ldr	r3, [pc, #644]	; (8017638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 80173b2:	9301      	str	r3, [sp, #4]
 80173b4:	4ba1      	ldr	r3, [pc, #644]	; (801763c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80173b6:	9300      	str	r3, [sp, #0]
 80173b8:	2325      	movs	r3, #37	; 0x25
 80173ba:	4aa1      	ldr	r2, [pc, #644]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80173bc:	49a1      	ldr	r1, [pc, #644]	; (8017644 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 80173be:	68f8      	ldr	r0, [r7, #12]
 80173c0:	47a0      	blx	r4
 80173c2:	2301      	movs	r3, #1
 80173c4:	e1e0      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80173cc:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80173d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80173d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173d8:	dd07      	ble.n	80173ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80173e0:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80173e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173e8:	e006      	b.n	80173f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80173f0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8017648 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80173f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80173f8:	edc7 7a08 	vstr	s15, [r7, #32]
 80173fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8017400:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801764c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 8017404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801740c:	f340 80dd 	ble.w	80175ca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	695c      	ldr	r4, [r3, #20]
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	68db      	ldr	r3, [r3, #12]
 8017418:	4618      	mov	r0, r3
 801741a:	f7e9 f89f 	bl	800055c <__aeabi_f2d>
 801741e:	4602      	mov	r2, r0
 8017420:	460b      	mov	r3, r1
 8017422:	f04f 0000 	mov.w	r0, #0
 8017426:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801742a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801742e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017432:	4b87      	ldr	r3, [pc, #540]	; (8017650 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8017434:	9301      	str	r3, [sp, #4]
 8017436:	4b87      	ldr	r3, [pc, #540]	; (8017654 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8017438:	9300      	str	r3, [sp, #0]
 801743a:	2326      	movs	r3, #38	; 0x26
 801743c:	4a80      	ldr	r2, [pc, #512]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801743e:	4986      	ldr	r1, [pc, #536]	; (8017658 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8017440:	68f8      	ldr	r0, [r7, #12]
 8017442:	47a0      	blx	r4
 8017444:	2301      	movs	r3, #1
 8017446:	e19f      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8017448:	68bb      	ldr	r3, [r7, #8]
 801744a:	781b      	ldrb	r3, [r3, #0]
 801744c:	2b09      	cmp	r3, #9
 801744e:	d018      	beq.n	8017482 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	695c      	ldr	r4, [r3, #20]
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	4618      	mov	r0, r3
 801745a:	f7fb fe0f 	bl	801307c <TfLiteTypeGetName>
 801745e:	4605      	mov	r5, r0
 8017460:	2009      	movs	r0, #9
 8017462:	f7fb fe0b 	bl	801307c <TfLiteTypeGetName>
 8017466:	4603      	mov	r3, r0
 8017468:	9303      	str	r3, [sp, #12]
 801746a:	9502      	str	r5, [sp, #8]
 801746c:	4b7b      	ldr	r3, [pc, #492]	; (801765c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801746e:	9301      	str	r3, [sp, #4]
 8017470:	4b7b      	ldr	r3, [pc, #492]	; (8017660 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8017472:	9300      	str	r3, [sp, #0]
 8017474:	2329      	movs	r3, #41	; 0x29
 8017476:	4a72      	ldr	r2, [pc, #456]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017478:	497a      	ldr	r1, [pc, #488]	; (8017664 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801747a:	68f8      	ldr	r0, [r7, #12]
 801747c:	47a0      	blx	r4
 801747e:	2301      	movs	r3, #1
 8017480:	e182      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	781b      	ldrb	r3, [r3, #0]
 8017486:	2b07      	cmp	r3, #7
 8017488:	d155      	bne.n	8017536 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	691b      	ldr	r3, [r3, #16]
 801748e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017492:	d011      	beq.n	80174b8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	695c      	ldr	r4, [r3, #20]
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	691b      	ldr	r3, [r3, #16]
 801749c:	4a72      	ldr	r2, [pc, #456]	; (8017668 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801749e:	9203      	str	r2, [sp, #12]
 80174a0:	9302      	str	r3, [sp, #8]
 80174a2:	4b72      	ldr	r3, [pc, #456]	; (801766c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 80174a4:	9301      	str	r3, [sp, #4]
 80174a6:	4b65      	ldr	r3, [pc, #404]	; (801763c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80174a8:	9300      	str	r3, [sp, #0]
 80174aa:	232b      	movs	r3, #43	; 0x2b
 80174ac:	4a64      	ldr	r2, [pc, #400]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80174ae:	4965      	ldr	r1, [pc, #404]	; (8017644 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 80174b0:	68f8      	ldr	r0, [r7, #12]
 80174b2:	47a0      	blx	r4
 80174b4:	2301      	movs	r3, #1
 80174b6:	e167      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80174be:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8017670 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 80174c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80174c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174ca:	dd07      	ble.n	80174dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80174d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8017670 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 80174d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80174da:	e006      	b.n	80174ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	edd3 7a03 	vldr	s15, [r3, #12]
 80174e2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8017670 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 80174e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80174ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80174ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80174f2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8017674 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 80174f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80174fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174fe:	dd64      	ble.n	80175ca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	695c      	ldr	r4, [r3, #20]
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	68db      	ldr	r3, [r3, #12]
 8017508:	4618      	mov	r0, r3
 801750a:	f7e9 f827 	bl	800055c <__aeabi_f2d>
 801750e:	4602      	mov	r2, r0
 8017510:	460b      	mov	r3, r1
 8017512:	f04f 0000 	mov.w	r0, #0
 8017516:	4958      	ldr	r1, [pc, #352]	; (8017678 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8017518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801751c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017520:	4b56      	ldr	r3, [pc, #344]	; (801767c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8017522:	9301      	str	r3, [sp, #4]
 8017524:	4b4b      	ldr	r3, [pc, #300]	; (8017654 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8017526:	9300      	str	r3, [sp, #0]
 8017528:	232c      	movs	r3, #44	; 0x2c
 801752a:	4a45      	ldr	r2, [pc, #276]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801752c:	494a      	ldr	r1, [pc, #296]	; (8017658 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801752e:	68f8      	ldr	r0, [r7, #12]
 8017530:	47a0      	blx	r4
 8017532:	2301      	movs	r3, #1
 8017534:	e128      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	2b09      	cmp	r3, #9
 801753c:	d018      	beq.n	8017570 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	695c      	ldr	r4, [r3, #20]
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	781b      	ldrb	r3, [r3, #0]
 8017546:	4618      	mov	r0, r3
 8017548:	f7fb fd98 	bl	801307c <TfLiteTypeGetName>
 801754c:	4605      	mov	r5, r0
 801754e:	2009      	movs	r0, #9
 8017550:	f7fb fd94 	bl	801307c <TfLiteTypeGetName>
 8017554:	4603      	mov	r3, r0
 8017556:	9303      	str	r3, [sp, #12]
 8017558:	9502      	str	r5, [sp, #8]
 801755a:	4b40      	ldr	r3, [pc, #256]	; (801765c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801755c:	9301      	str	r3, [sp, #4]
 801755e:	4b48      	ldr	r3, [pc, #288]	; (8017680 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8017560:	9300      	str	r3, [sp, #0]
 8017562:	232f      	movs	r3, #47	; 0x2f
 8017564:	4a36      	ldr	r2, [pc, #216]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017566:	493f      	ldr	r1, [pc, #252]	; (8017664 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8017568:	68f8      	ldr	r0, [r7, #12]
 801756a:	47a0      	blx	r4
 801756c:	2301      	movs	r3, #1
 801756e:	e10b      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	691b      	ldr	r3, [r3, #16]
 8017574:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8017578:	d012      	beq.n	80175a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	695c      	ldr	r4, [r3, #20]
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	691b      	ldr	r3, [r3, #16]
 8017582:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8017586:	9203      	str	r2, [sp, #12]
 8017588:	9302      	str	r3, [sp, #8]
 801758a:	4b3e      	ldr	r3, [pc, #248]	; (8017684 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801758c:	9301      	str	r3, [sp, #4]
 801758e:	4b2b      	ldr	r3, [pc, #172]	; (801763c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8017590:	9300      	str	r3, [sp, #0]
 8017592:	2330      	movs	r3, #48	; 0x30
 8017594:	4a2a      	ldr	r2, [pc, #168]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8017596:	492b      	ldr	r1, [pc, #172]	; (8017644 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8017598:	68f8      	ldr	r0, [r7, #12]
 801759a:	47a0      	blx	r4
 801759c:	2301      	movs	r3, #1
 801759e:	e0f3      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80175a6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017688 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 80175aa:	eef4 7a47 	vcmp.f32	s15, s14
 80175ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b2:	d00a      	beq.n	80175ca <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	695c      	ldr	r4, [r3, #20]
 80175b8:	4b34      	ldr	r3, [pc, #208]	; (801768c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 80175ba:	9300      	str	r3, [sp, #0]
 80175bc:	2331      	movs	r3, #49	; 0x31
 80175be:	4a20      	ldr	r2, [pc, #128]	; (8017640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80175c0:	4933      	ldr	r1, [pc, #204]	; (8017690 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 80175c2:	68f8      	ldr	r0, [r7, #12]
 80175c4:	47a0      	blx	r4
 80175c6:	2301      	movs	r3, #1
 80175c8:	e0de      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	781b      	ldrb	r3, [r3, #0]
 80175ce:	2b07      	cmp	r3, #7
 80175d0:	d160      	bne.n	8017694 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 80175d2:	68bb      	ldr	r3, [r7, #8]
 80175d4:	68db      	ldr	r3, [r3, #12]
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7e8 ffc0 	bl	800055c <__aeabi_f2d>
 80175dc:	4604      	mov	r4, r0
 80175de:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	4618      	mov	r0, r3
 80175e6:	f7e8 ffb9 	bl	800055c <__aeabi_f2d>
 80175ea:	4602      	mov	r2, r0
 80175ec:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 80175ee:	4620      	mov	r0, r4
 80175f0:	4629      	mov	r1, r5
 80175f2:	f7e9 f80b 	bl	800060c <__aeabi_dmul>
 80175f6:	4602      	mov	r2, r0
 80175f8:	460b      	mov	r3, r1
 80175fa:	4610      	mov	r0, r2
 80175fc:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 80175fe:	a30c      	add	r3, pc, #48	; (adr r3, 8017630 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8017600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017604:	f7e9 f92c 	bl	8000860 <__aeabi_ddiv>
 8017608:	4602      	mov	r2, r0
 801760a:	460b      	mov	r3, r1
 801760c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8017610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017612:	3308      	adds	r3, #8
 8017614:	f107 0214 	add.w	r2, r7, #20
 8017618:	4611      	mov	r1, r2
 801761a:	4618      	mov	r0, r3
 801761c:	ed97 0b06 	vldr	d0, [r7, #24]
 8017620:	f7fb fdb2 	bl	8013188 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 8017624:	697a      	ldr	r2, [r7, #20]
 8017626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017628:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 801762a:	e0ac      	b.n	8017786 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 801762c:	f3af 8000 	nop.w
 8017630:	00140014 	.word	0x00140014
 8017634:	3f240014 	.word	0x3f240014
 8017638:	0801cfb0 	.word	0x0801cfb0
 801763c:	0801cfb4 	.word	0x0801cfb4
 8017640:	0801cf04 	.word	0x0801cf04
 8017644:	0801cf94 	.word	0x0801cf94
 8017648:	38000000 	.word	0x38000000
 801764c:	3303126f 	.word	0x3303126f
 8017650:	0801cff0 	.word	0x0801cff0
 8017654:	0801cffc 	.word	0x0801cffc
 8017658:	0801cfd0 	.word	0x0801cfd0
 801765c:	0801d030 	.word	0x0801d030
 8017660:	0801d03c 	.word	0x0801d03c
 8017664:	0801d014 	.word	0x0801d014
 8017668:	ffff8000 	.word	0xffff8000
 801766c:	0801d048 	.word	0x0801d048
 8017670:	37800000 	.word	0x37800000
 8017674:	3283126f 	.word	0x3283126f
 8017678:	3ef00000 	.word	0x3ef00000
 801767c:	0801d050 	.word	0x0801d050
 8017680:	0801d05c 	.word	0x0801d05c
 8017684:	0801d06c 	.word	0x0801d06c
 8017688:	3b800000 	.word	0x3b800000
 801768c:	0801d08c 	.word	0x0801d08c
 8017690:	0801d074 	.word	0x0801d074
          static_cast<double>(params->beta),
 8017694:	683b      	ldr	r3, [r7, #0]
 8017696:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8017698:	4618      	mov	r0, r3
 801769a:	f7e8 ff5f 	bl	800055c <__aeabi_f2d>
 801769e:	4680      	mov	r8, r0
 80176a0:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 80176a6:	4618      	mov	r0, r3
 80176a8:	f7e8 ff58 	bl	800055c <__aeabi_f2d>
 80176ac:	4682      	mov	sl, r0
 80176ae:	468b      	mov	fp, r1
 80176b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176b2:	3308      	adds	r3, #8
 80176b4:	f107 0210 	add.w	r2, r7, #16
 80176b8:	4619      	mov	r1, r3
 80176ba:	2005      	movs	r0, #5
 80176bc:	ec4b ab11 	vmov	d1, sl, fp
 80176c0:	ec49 8b10 	vmov	d0, r8, r9
 80176c4:	f7fb fe2c 	bl	8013320 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 80176c8:	693a      	ldr	r2, [r7, #16]
 80176ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176cc:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 80176ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176d0:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 80176d2:	221f      	movs	r2, #31
 80176d4:	4619      	mov	r1, r3
 80176d6:	2005      	movs	r0, #5
 80176d8:	f7fb fe6a 	bl	80133b0 <_ZN6tflite20CalculateInputRadiusEiii>
 80176dc:	4603      	mov	r3, r0
 80176de:	4618      	mov	r0, r3
 80176e0:	f7e8 ff2a 	bl	8000538 <__aeabi_i2d>
 80176e4:	4602      	mov	r2, r0
 80176e6:	460b      	mov	r3, r1
 80176e8:	4614      	mov	r4, r2
 80176ea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 80176ee:	4620      	mov	r0, r4
 80176f0:	4629      	mov	r1, r5
 80176f2:	f7e9 fa3b 	bl	8000b6c <__aeabi_d2iz>
 80176f6:	4602      	mov	r2, r0
 80176f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176fa:	619a      	str	r2, [r3, #24]
    }
 80176fc:	e043      	b.n	8017786 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	2b01      	cmp	r3, #1
 8017704:	d018      	beq.n	8017738 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	695c      	ldr	r4, [r3, #20]
 801770a:	68bb      	ldr	r3, [r7, #8]
 801770c:	781b      	ldrb	r3, [r3, #0]
 801770e:	4618      	mov	r0, r3
 8017710:	f7fb fcb4 	bl	801307c <TfLiteTypeGetName>
 8017714:	4605      	mov	r5, r0
 8017716:	2001      	movs	r0, #1
 8017718:	f7fb fcb0 	bl	801307c <TfLiteTypeGetName>
 801771c:	4603      	mov	r3, r0
 801771e:	9303      	str	r3, [sp, #12]
 8017720:	9502      	str	r5, [sp, #8]
 8017722:	4b1c      	ldr	r3, [pc, #112]	; (8017794 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8017724:	9301      	str	r3, [sp, #4]
 8017726:	4b1c      	ldr	r3, [pc, #112]	; (8017798 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8017728:	9300      	str	r3, [sp, #0]
 801772a:	234e      	movs	r3, #78	; 0x4e
 801772c:	4a1b      	ldr	r2, [pc, #108]	; (801779c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801772e:	491c      	ldr	r1, [pc, #112]	; (80177a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8017730:	68f8      	ldr	r0, [r7, #12]
 8017732:	47a0      	blx	r4
 8017734:	2301      	movs	r3, #1
 8017736:	e027      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	781b      	ldrb	r3, [r3, #0]
 801773c:	2b01      	cmp	r3, #1
 801773e:	d018      	beq.n	8017772 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	695c      	ldr	r4, [r3, #20]
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	781b      	ldrb	r3, [r3, #0]
 8017748:	4618      	mov	r0, r3
 801774a:	f7fb fc97 	bl	801307c <TfLiteTypeGetName>
 801774e:	4605      	mov	r5, r0
 8017750:	2001      	movs	r0, #1
 8017752:	f7fb fc93 	bl	801307c <TfLiteTypeGetName>
 8017756:	4603      	mov	r3, r0
 8017758:	9303      	str	r3, [sp, #12]
 801775a:	9502      	str	r5, [sp, #8]
 801775c:	4b0d      	ldr	r3, [pc, #52]	; (8017794 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801775e:	9301      	str	r3, [sp, #4]
 8017760:	4b10      	ldr	r3, [pc, #64]	; (80177a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 8017762:	9300      	str	r3, [sp, #0]
 8017764:	234f      	movs	r3, #79	; 0x4f
 8017766:	4a0d      	ldr	r2, [pc, #52]	; (801779c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8017768:	490d      	ldr	r1, [pc, #52]	; (80177a0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801776a:	68f8      	ldr	r0, [r7, #12]
 801776c:	47a0      	blx	r4
 801776e:	2301      	movs	r3, #1
 8017770:	e00a      	b.n	8017788 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 8017772:	683b      	ldr	r3, [r7, #0]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	4618      	mov	r0, r3
 8017778:	f7e8 fef0 	bl	800055c <__aeabi_f2d>
 801777c:	4602      	mov	r2, r0
 801777e:	460b      	mov	r3, r1
 8017780:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017782:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8017786:	2300      	movs	r3, #0
}
 8017788:	4618      	mov	r0, r3
 801778a:	3728      	adds	r7, #40	; 0x28
 801778c:	46bd      	mov	sp, r7
 801778e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017792:	bf00      	nop
 8017794:	0801d0b0 	.word	0x0801d0b0
 8017798:	0801d03c 	.word	0x0801d03c
 801779c:	0801cf04 	.word	0x0801cf04
 80177a0:	0801d014 	.word	0x0801d014
 80177a4:	0801d05c 	.word	0x0801d05c

080177a8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b084      	sub	sp, #16
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	60f8      	str	r0, [r7, #12]
 80177b0:	60b9      	str	r1, [r7, #8]
 80177b2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d101      	bne.n	80177c0 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 80177bc:	f002 fe0a 	bl	801a3d4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177c4:	2138      	movs	r1, #56	; 0x38
 80177c6:	68f8      	ldr	r0, [r7, #12]
 80177c8:	4798      	blx	r3
 80177ca:	4603      	mov	r3, r0
}
 80177cc:	4618      	mov	r0, r3
 80177ce:	3710      	adds	r7, #16
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	ed87 0a00 	vstr	s0, [r7]
 80177e0:	ed97 0a00 	vldr	s0, [r7]
 80177e4:	f7ea f81e 	bl	8001824 <_ZSt3expf>
 80177e8:	eef0 7a40 	vmov.f32	s15, s0
 80177ec:	eeb0 0a67 	vmov.f32	s0, s15
 80177f0:	3708      	adds	r7, #8
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}

080177f6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 80177f6:	b580      	push	{r7, lr}
 80177f8:	b082      	sub	sp, #8
 80177fa:	af00      	add	r7, sp, #0
 80177fc:	ed87 0a01 	vstr	s0, [r7, #4]
 8017800:	ed97 0a01 	vldr	s0, [r7, #4]
 8017804:	2000      	movs	r0, #0
 8017806:	f7ff ffe5 	bl	80177d4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801780a:	eef0 7a40 	vmov.f32	s15, s0
 801780e:	eeb0 0a67 	vmov.f32	s0, s15
 8017812:	3708      	adds	r7, #8
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}

08017818 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8017818:	b480      	push	{r7}
 801781a:	b083      	sub	sp, #12
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
 8017820:	4b03      	ldr	r3, [pc, #12]	; (8017830 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 8017822:	4618      	mov	r0, r3
 8017824:	370c      	adds	r7, #12
 8017826:	46bd      	mov	sp, r7
 8017828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782c:	4770      	bx	lr
 801782e:	bf00      	nop
 8017830:	080177f7 	.word	0x080177f7

08017834 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8017834:	b480      	push	{r7}
 8017836:	b083      	sub	sp, #12
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
 801783c:	ed87 0a00 	vstr	s0, [r7]
 8017840:	edd7 7a00 	vldr	s15, [r7]
 8017844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017848:	ee77 7a87 	vadd.f32	s15, s15, s14
 801784c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017850:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017854:	eef0 7a66 	vmov.f32	s15, s13
 8017858:	eeb0 0a67 	vmov.f32	s0, s15
 801785c:	370c      	adds	r7, #12
 801785e:	46bd      	mov	sp, r7
 8017860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017864:	4770      	bx	lr

08017866 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 8017866:	b580      	push	{r7, lr}
 8017868:	b082      	sub	sp, #8
 801786a:	af00      	add	r7, sp, #0
 801786c:	ed87 0a01 	vstr	s0, [r7, #4]
 8017870:	ed97 0a01 	vldr	s0, [r7, #4]
 8017874:	2000      	movs	r0, #0
 8017876:	f7ff ffdd 	bl	8017834 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801787a:	eef0 7a40 	vmov.f32	s15, s0
 801787e:	eeb0 0a67 	vmov.f32	s0, s15
 8017882:	3708      	adds	r7, #8
 8017884:	46bd      	mov	sp, r7
 8017886:	bd80      	pop	{r7, pc}

08017888 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8017888:	b480      	push	{r7}
 801788a:	b083      	sub	sp, #12
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
 8017890:	4b03      	ldr	r3, [pc, #12]	; (80178a0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 8017892:	4618      	mov	r0, r3
 8017894:	370c      	adds	r7, #12
 8017896:	46bd      	mov	sp, r7
 8017898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789c:	4770      	bx	lr
 801789e:	bf00      	nop
 80178a0:	08017867 	.word	0x08017867

080178a4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80178a4:	b590      	push	{r4, r7, lr}
 80178a6:	b08f      	sub	sp, #60	; 0x3c
 80178a8:	af04      	add	r7, sp, #16
 80178aa:	6078      	str	r0, [r7, #4]
 80178ac:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 80178ae:	6838      	ldr	r0, [r7, #0]
 80178b0:	f7fd fa9b 	bl	8014dea <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80178b4:	4603      	mov	r3, r0
 80178b6:	2b01      	cmp	r3, #1
 80178b8:	bf14      	ite	ne
 80178ba:	2301      	movne	r3, #1
 80178bc:	2300      	moveq	r3, #0
 80178be:	b2db      	uxtb	r3, r3
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d013      	beq.n	80178ec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	695c      	ldr	r4, [r3, #20]
 80178c8:	6838      	ldr	r0, [r7, #0]
 80178ca:	f7fd fa8e 	bl	8014dea <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80178ce:	4603      	mov	r3, r0
 80178d0:	2201      	movs	r2, #1
 80178d2:	9203      	str	r2, [sp, #12]
 80178d4:	9302      	str	r3, [sp, #8]
 80178d6:	4b7c      	ldr	r3, [pc, #496]	; (8017ac8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 80178d8:	9301      	str	r3, [sp, #4]
 80178da:	4b7c      	ldr	r3, [pc, #496]	; (8017acc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 80178dc:	9300      	str	r3, [sp, #0]
 80178de:	235d      	movs	r3, #93	; 0x5d
 80178e0:	4a7b      	ldr	r2, [pc, #492]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80178e2:	497c      	ldr	r1, [pc, #496]	; (8017ad4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	47a0      	blx	r4
 80178e8:	2301      	movs	r3, #1
 80178ea:	e146      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 80178ec:	6838      	ldr	r0, [r7, #0]
 80178ee:	f7fd fa89 	bl	8014e04 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80178f2:	4603      	mov	r3, r0
 80178f4:	2b01      	cmp	r3, #1
 80178f6:	bf14      	ite	ne
 80178f8:	2301      	movne	r3, #1
 80178fa:	2300      	moveq	r3, #0
 80178fc:	b2db      	uxtb	r3, r3
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d013      	beq.n	801792a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	695c      	ldr	r4, [r3, #20]
 8017906:	6838      	ldr	r0, [r7, #0]
 8017908:	f7fd fa7c 	bl	8014e04 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801790c:	4603      	mov	r3, r0
 801790e:	2201      	movs	r2, #1
 8017910:	9203      	str	r2, [sp, #12]
 8017912:	9302      	str	r3, [sp, #8]
 8017914:	4b6c      	ldr	r3, [pc, #432]	; (8017ac8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8017916:	9301      	str	r3, [sp, #4]
 8017918:	4b6f      	ldr	r3, [pc, #444]	; (8017ad8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801791a:	9300      	str	r3, [sp, #0]
 801791c:	235e      	movs	r3, #94	; 0x5e
 801791e:	4a6c      	ldr	r2, [pc, #432]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017920:	496c      	ldr	r1, [pc, #432]	; (8017ad4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8017922:	6878      	ldr	r0, [r7, #4]
 8017924:	47a0      	blx	r4
 8017926:	2301      	movs	r3, #1
 8017928:	e127      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801792a:	2200      	movs	r2, #0
 801792c:	6839      	ldr	r1, [r7, #0]
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f7fb fe94 	bl	801365c <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8017934:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 8017936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017938:	2b00      	cmp	r3, #0
 801793a:	d10a      	bne.n	8017952 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	695c      	ldr	r4, [r3, #20]
 8017940:	4b66      	ldr	r3, [pc, #408]	; (8017adc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8017942:	9300      	str	r3, [sp, #0]
 8017944:	2360      	movs	r3, #96	; 0x60
 8017946:	4a62      	ldr	r2, [pc, #392]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017948:	4965      	ldr	r1, [pc, #404]	; (8017ae0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	47a0      	blx	r4
 801794e:	2301      	movs	r3, #1
 8017950:	e113      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8017952:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017954:	f7fb fe05 	bl	8013562 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8017958:	4603      	mov	r3, r0
 801795a:	2b00      	cmp	r3, #0
 801795c:	bfd4      	ite	le
 801795e:	2301      	movle	r3, #1
 8017960:	2300      	movgt	r3, #0
 8017962:	b2db      	uxtb	r3, r3
 8017964:	2b00      	cmp	r3, #0
 8017966:	d00a      	beq.n	801797e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	695c      	ldr	r4, [r3, #20]
 801796c:	4b5d      	ldr	r3, [pc, #372]	; (8017ae4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801796e:	9300      	str	r3, [sp, #0]
 8017970:	2361      	movs	r3, #97	; 0x61
 8017972:	4a57      	ldr	r2, [pc, #348]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017974:	495a      	ldr	r1, [pc, #360]	; (8017ae0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8017976:	6878      	ldr	r0, [r7, #4]
 8017978:	47a0      	blx	r4
 801797a:	2301      	movs	r3, #1
 801797c:	e0fd      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801797e:	2200      	movs	r2, #0
 8017980:	6839      	ldr	r1, [r7, #0]
 8017982:	6878      	ldr	r0, [r7, #4]
 8017984:	f7fb fe7a 	bl	801367c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8017988:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801798a:	6a3b      	ldr	r3, [r7, #32]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d10a      	bne.n	80179a6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	695c      	ldr	r4, [r3, #20]
 8017994:	4b54      	ldr	r3, [pc, #336]	; (8017ae8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8017996:	9300      	str	r3, [sp, #0]
 8017998:	2363      	movs	r3, #99	; 0x63
 801799a:	4a4d      	ldr	r2, [pc, #308]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801799c:	4950      	ldr	r1, [pc, #320]	; (8017ae0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801799e:	6878      	ldr	r0, [r7, #4]
 80179a0:	47a0      	blx	r4
 80179a2:	2301      	movs	r3, #1
 80179a4:	e0e9      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	691b      	ldr	r3, [r3, #16]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d10a      	bne.n	80179c4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	695c      	ldr	r4, [r3, #20]
 80179b2:	4b4e      	ldr	r3, [pc, #312]	; (8017aec <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 80179b4:	9300      	str	r3, [sp, #0]
 80179b6:	2365      	movs	r3, #101	; 0x65
 80179b8:	4a45      	ldr	r2, [pc, #276]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80179ba:	4949      	ldr	r1, [pc, #292]	; (8017ae0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80179bc:	6878      	ldr	r0, [r7, #4]
 80179be:	47a0      	blx	r4
 80179c0:	2301      	movs	r3, #1
 80179c2:	e0da      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	691b      	ldr	r3, [r3, #16]
 80179c8:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 80179ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179cc:	781b      	ldrb	r3, [r3, #0]
 80179ce:	2b07      	cmp	r3, #7
 80179d0:	d12f      	bne.n	8017a32 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179d6:	f240 4102 	movw	r1, #1026	; 0x402
 80179da:	6878      	ldr	r0, [r7, #4]
 80179dc:	4798      	blx	r3
 80179de:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 80179e0:	69bb      	ldr	r3, [r7, #24]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d10a      	bne.n	80179fc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	695c      	ldr	r4, [r3, #20]
 80179ea:	4b41      	ldr	r3, [pc, #260]	; (8017af0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 80179ec:	9300      	str	r3, [sp, #0]
 80179ee:	236b      	movs	r3, #107	; 0x6b
 80179f0:	4a37      	ldr	r2, [pc, #220]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80179f2:	493b      	ldr	r1, [pc, #236]	; (8017ae0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80179f4:	6878      	ldr	r0, [r7, #4]
 80179f6:	47a0      	blx	r4
 80179f8:	2301      	movs	r3, #1
 80179fa:	e0be      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 80179fc:	69fb      	ldr	r3, [r7, #28]
 80179fe:	69ba      	ldr	r2, [r7, #24]
 8017a00:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a06:	f240 4102 	movw	r1, #1026	; 0x402
 8017a0a:	6878      	ldr	r0, [r7, #4]
 8017a0c:	4798      	blx	r3
 8017a0e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8017a10:	697b      	ldr	r3, [r7, #20]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d10a      	bne.n	8017a2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	695c      	ldr	r4, [r3, #20]
 8017a1a:	4b36      	ldr	r3, [pc, #216]	; (8017af4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8017a1c:	9300      	str	r3, [sp, #0]
 8017a1e:	236f      	movs	r3, #111	; 0x6f
 8017a20:	4a2b      	ldr	r2, [pc, #172]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017a22:	492f      	ldr	r1, [pc, #188]	; (8017ae0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8017a24:	6878      	ldr	r0, [r7, #4]
 8017a26:	47a0      	blx	r4
 8017a28:	2301      	movs	r3, #1
 8017a2a:	e0a6      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 8017a2c:	69fb      	ldr	r3, [r7, #28]
 8017a2e:	697a      	ldr	r2, [r7, #20]
 8017a30:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8017a32:	6a3b      	ldr	r3, [r7, #32]
 8017a34:	781b      	ldrb	r3, [r3, #0]
 8017a36:	2b07      	cmp	r3, #7
 8017a38:	d112      	bne.n	8017a60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 8017a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3c:	781b      	ldrb	r3, [r3, #0]
 8017a3e:	2b09      	cmp	r3, #9
 8017a40:	d028      	beq.n	8017a94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8017a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a44:	781b      	ldrb	r3, [r3, #0]
 8017a46:	2b07      	cmp	r3, #7
 8017a48:	d024      	beq.n	8017a94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	695c      	ldr	r4, [r3, #20]
 8017a4e:	4b2a      	ldr	r3, [pc, #168]	; (8017af8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8017a50:	9300      	str	r3, [sp, #0]
 8017a52:	2375      	movs	r3, #117	; 0x75
 8017a54:	4a1e      	ldr	r2, [pc, #120]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017a56:	4922      	ldr	r1, [pc, #136]	; (8017ae0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8017a58:	6878      	ldr	r0, [r7, #4]
 8017a5a:	47a0      	blx	r4
 8017a5c:	2301      	movs	r3, #1
 8017a5e:	e08c      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8017a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a62:	781a      	ldrb	r2, [r3, #0]
 8017a64:	6a3b      	ldr	r3, [r7, #32]
 8017a66:	781b      	ldrb	r3, [r3, #0]
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	d013      	beq.n	8017a94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	695c      	ldr	r4, [r3, #20]
 8017a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a72:	781b      	ldrb	r3, [r3, #0]
 8017a74:	461a      	mov	r2, r3
 8017a76:	6a3b      	ldr	r3, [r7, #32]
 8017a78:	781b      	ldrb	r3, [r3, #0]
 8017a7a:	9303      	str	r3, [sp, #12]
 8017a7c:	9202      	str	r2, [sp, #8]
 8017a7e:	4b1f      	ldr	r3, [pc, #124]	; (8017afc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8017a80:	9301      	str	r3, [sp, #4]
 8017a82:	4b1f      	ldr	r3, [pc, #124]	; (8017b00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8017a84:	9300      	str	r3, [sp, #0]
 8017a86:	2378      	movs	r3, #120	; 0x78
 8017a88:	4a11      	ldr	r2, [pc, #68]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017a8a:	4912      	ldr	r1, [pc, #72]	; (8017ad4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	47a0      	blx	r4
 8017a90:	2301      	movs	r3, #1
 8017a92:	e072      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 8017a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a96:	781b      	ldrb	r3, [r3, #0]
 8017a98:	2b07      	cmp	r3, #7
 8017a9a:	d161      	bne.n	8017b60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8017a9c:	6a3b      	ldr	r3, [r7, #32]
 8017a9e:	691b      	ldr	r3, [r3, #16]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d035      	beq.n	8017b10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	695c      	ldr	r4, [r3, #20]
 8017aa8:	6a3b      	ldr	r3, [r7, #32]
 8017aaa:	691b      	ldr	r3, [r3, #16]
 8017aac:	2200      	movs	r2, #0
 8017aae:	9203      	str	r2, [sp, #12]
 8017ab0:	9302      	str	r3, [sp, #8]
 8017ab2:	4b14      	ldr	r3, [pc, #80]	; (8017b04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8017ab4:	9301      	str	r3, [sp, #4]
 8017ab6:	4b14      	ldr	r3, [pc, #80]	; (8017b08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8017ab8:	9300      	str	r3, [sp, #0]
 8017aba:	237d      	movs	r3, #125	; 0x7d
 8017abc:	4a04      	ldr	r2, [pc, #16]	; (8017ad0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8017abe:	4905      	ldr	r1, [pc, #20]	; (8017ad4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8017ac0:	6878      	ldr	r0, [r7, #4]
 8017ac2:	47a0      	blx	r4
 8017ac4:	2301      	movs	r3, #1
 8017ac6:	e058      	b.n	8017b7a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 8017ac8:	0801d0c0 	.word	0x0801d0c0
 8017acc:	0801d0c4 	.word	0x0801d0c4
 8017ad0:	0801cf04 	.word	0x0801cf04
 8017ad4:	0801cf94 	.word	0x0801cf94
 8017ad8:	0801d0d4 	.word	0x0801d0d4
 8017adc:	0801d0e8 	.word	0x0801d0e8
 8017ae0:	0801d074 	.word	0x0801d074
 8017ae4:	0801d0fc 	.word	0x0801d0fc
 8017ae8:	0801d118 	.word	0x0801d118
 8017aec:	0801d12c 	.word	0x0801d12c
 8017af0:	0801d148 	.word	0x0801d148
 8017af4:	0801d160 	.word	0x0801d160
 8017af8:	0801d184 	.word	0x0801d184
 8017afc:	0801d05c 	.word	0x0801d05c
 8017b00:	0801d03c 	.word	0x0801d03c
 8017b04:	0801cfb0 	.word	0x0801cfb0
 8017b08:	0801cfb4 	.word	0x0801cfb4
 8017b0c:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8017b10:	f107 0308 	add.w	r3, r7, #8
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7ff fe7f 	bl	8017818 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8017b1a:	69fb      	ldr	r3, [r7, #28]
 8017b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b1e:	f240 2201 	movw	r2, #513	; 0x201
 8017b22:	4619      	mov	r1, r3
 8017b24:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 8017b0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8017b28:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8017b2c:	f7ff faf4 	bl	8017118 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8017b30:	f107 030c 	add.w	r3, r7, #12
 8017b34:	4618      	mov	r0, r3
 8017b36:	f7ff fea7 	bl	8017888 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 8017b3a:	69fb      	ldr	r3, [r7, #28]
 8017b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b3e:	f240 2201 	movw	r2, #513	; 0x201
 8017b42:	4619      	mov	r1, r3
 8017b44:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8017b48:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8017b0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8017b4c:	f7ff fae4 	bl	8017118 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8017b50:	6a3b      	ldr	r3, [r7, #32]
 8017b52:	691a      	ldr	r2, [r3, #16]
 8017b54:	69fb      	ldr	r3, [r7, #28]
 8017b56:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8017b58:	6a3b      	ldr	r3, [r7, #32]
 8017b5a:	68da      	ldr	r2, [r3, #12]
 8017b5c:	69fb      	ldr	r3, [r7, #28]
 8017b5e:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	695b      	ldr	r3, [r3, #20]
 8017b64:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8017b66:	69fb      	ldr	r3, [r7, #28]
 8017b68:	9300      	str	r3, [sp, #0]
 8017b6a:	693b      	ldr	r3, [r7, #16]
 8017b6c:	6a3a      	ldr	r2, [r7, #32]
 8017b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b70:	6878      	ldr	r0, [r7, #4]
 8017b72:	f7ff fbfd 	bl	8017370 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8017b76:	4603      	mov	r3, r0
 8017b78:	bf00      	nop
}
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	372c      	adds	r7, #44	; 0x2c
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd90      	pop	{r4, r7, pc}
 8017b82:	bf00      	nop

08017b84 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b084      	sub	sp, #16
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
 8017b8c:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 8017b8e:	4b21      	ldr	r3, [pc, #132]	; (8017c14 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017b90:	681a      	ldr	r2, [r3, #0]
 8017b92:	683b      	ldr	r3, [r7, #0]
 8017b94:	425b      	negs	r3, r3
 8017b96:	441a      	add	r2, r3
 8017b98:	4b1f      	ldr	r3, [pc, #124]	; (8017c18 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	d224      	bcs.n	8017bea <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 8017ba0:	4b1e      	ldr	r3, [pc, #120]	; (8017c1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2b09      	cmp	r3, #9
 8017ba6:	d906      	bls.n	8017bb6 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 8017ba8:	683b      	ldr	r3, [r7, #0]
 8017baa:	4619      	mov	r1, r3
 8017bac:	481c      	ldr	r0, [pc, #112]	; (8017c20 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 8017bae:	f7ec f93d 	bl	8003e2c <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	e029      	b.n	8017c0a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8017bb6:	2101      	movs	r1, #1
 8017bb8:	6838      	ldr	r0, [r7, #0]
 8017bba:	f7fb fa29 	bl	8013010 <_Z9ei_callocjj>
 8017bbe:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d106      	bne.n	8017bd4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	4619      	mov	r1, r3
 8017bca:	4816      	ldr	r0, [pc, #88]	; (8017c24 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 8017bcc:	f7ec f92e 	bl	8003e2c <_Z9ei_printfPKcz>
      return NULL;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	e01a      	b.n	8017c0a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 8017bd4:	4b11      	ldr	r3, [pc, #68]	; (8017c1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	1c5a      	adds	r2, r3, #1
 8017bda:	4910      	ldr	r1, [pc, #64]	; (8017c1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 8017bdc:	600a      	str	r2, [r1, #0]
 8017bde:	4912      	ldr	r1, [pc, #72]	; (8017c28 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 8017be0:	68fa      	ldr	r2, [r7, #12]
 8017be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	e00f      	b.n	8017c0a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 8017bea:	4b0a      	ldr	r3, [pc, #40]	; (8017c14 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017bec:	681a      	ldr	r2, [r3, #0]
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	425b      	negs	r3, r3
 8017bf2:	4413      	add	r3, r2
 8017bf4:	4a07      	ldr	r2, [pc, #28]	; (8017c14 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017bf6:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8017bf8:	4b06      	ldr	r3, [pc, #24]	; (8017c14 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 8017bfe:	683a      	ldr	r2, [r7, #0]
 8017c00:	2100      	movs	r1, #0
 8017c02:	68f8      	ldr	r0, [r7, #12]
 8017c04:	f002 fc8c 	bl	801a520 <memset>

  return ptr;
 8017c08:	68fb      	ldr	r3, [r7, #12]
}
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	3710      	adds	r7, #16
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd80      	pop	{r7, pc}
 8017c12:	bf00      	nop
 8017c14:	20002a54 	.word	0x20002a54
 8017c18:	20002a50 	.word	0x20002a50
 8017c1c:	20002eec 	.word	0x20002eec
 8017c20:	0801d1d4 	.word	0x0801d1d4
 8017c24:	0801d254 	.word	0x0801d254
 8017c28:	20002ec4 	.word	0x20002ec4

08017c2c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b086      	sub	sp, #24
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	60f8      	str	r0, [r7, #12]
 8017c34:	60b9      	str	r1, [r7, #8]
 8017c36:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 8017c38:	4b1b      	ldr	r3, [pc, #108]	; (8017ca8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	2b03      	cmp	r3, #3
 8017c3e:	d906      	bls.n	8017c4e <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 8017c40:	68bb      	ldr	r3, [r7, #8]
 8017c42:	4619      	mov	r1, r3
 8017c44:	4819      	ldr	r0, [pc, #100]	; (8017cac <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 8017c46:	f7ec f8f1 	bl	8003e2c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8017c4a:	2301      	movs	r3, #1
 8017c4c:	e028      	b.n	8017ca0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 8017c4e:	68bb      	ldr	r3, [r7, #8]
 8017c50:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 8017c52:	693b      	ldr	r3, [r7, #16]
 8017c54:	4619      	mov	r1, r3
 8017c56:	68f8      	ldr	r0, [r7, #12]
 8017c58:	f7ff ff94 	bl	8017b84 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8017c60:	697b      	ldr	r3, [r7, #20]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d106      	bne.n	8017c74 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 8017c66:	68bb      	ldr	r3, [r7, #8]
 8017c68:	4619      	mov	r1, r3
 8017c6a:	4811      	ldr	r0, [pc, #68]	; (8017cb0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 8017c6c:	f7ec f8de 	bl	8003e2c <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8017c70:	2301      	movs	r3, #1
 8017c72:	e015      	b.n	8017ca0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 8017c74:	4b0c      	ldr	r3, [pc, #48]	; (8017ca8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	4a0e      	ldr	r2, [pc, #56]	; (8017cb4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 8017c7a:	00db      	lsls	r3, r3, #3
 8017c7c:	4413      	add	r3, r2
 8017c7e:	f107 0210 	add.w	r2, r7, #16
 8017c82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017c86:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 8017c8a:	4b07      	ldr	r3, [pc, #28]	; (8017ca8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	461a      	mov	r2, r3
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 8017c94:	4b04      	ldr	r3, [pc, #16]	; (8017ca8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	3301      	adds	r3, #1
 8017c9a:	4a03      	ldr	r2, [pc, #12]	; (8017ca8 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 8017c9c:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 8017c9e:	2300      	movs	r3, #0
}
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3718      	adds	r7, #24
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	20002f10 	.word	0x20002f10
 8017cac:	0801d28c 	.word	0x0801d28c
 8017cb0:	0801d2e4 	.word	0x0801d2e4
 8017cb4:	20002ef0 	.word	0x20002ef0

08017cb8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8017cb8:	b480      	push	{r7}
 8017cba:	b083      	sub	sp, #12
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 8017cc2:	4b09      	ldr	r3, [pc, #36]	; (8017ce8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	461a      	mov	r2, r3
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	4293      	cmp	r3, r2
 8017ccc:	dd01      	ble.n	8017cd2 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	e004      	b.n	8017cdc <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 8017cd2:	4a06      	ldr	r2, [pc, #24]	; (8017cec <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 8017cd4:	683b      	ldr	r3, [r7, #0]
 8017cd6:	00db      	lsls	r3, r3, #3
 8017cd8:	4413      	add	r3, r2
 8017cda:	685b      	ldr	r3, [r3, #4]
}
 8017cdc:	4618      	mov	r0, r3
 8017cde:	370c      	adds	r7, #12
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce6:	4770      	bx	lr
 8017ce8:	20002f10 	.word	0x20002f10
 8017cec:	20002ef0 	.word	0x20002ef0

08017cf0 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 8017cf0:	b480      	push	{r7}
 8017cf2:	b083      	sub	sp, #12
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
 8017cf8:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	019b      	lsls	r3, r3, #6
 8017cfe:	4a04      	ldr	r2, [pc, #16]	; (8017d10 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 8017d00:	4413      	add	r3, r2
}
 8017d02:	4618      	mov	r0, r3
 8017d04:	370c      	adds	r7, #12
 8017d06:	46bd      	mov	sp, r7
 8017d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0c:	4770      	bx	lr
 8017d0e:	bf00      	nop
 8017d10:	20002ab0 	.word	0x20002ab0

08017d14 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8017d14:	b480      	push	{r7}
 8017d16:	b083      	sub	sp, #12
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
 8017d1c:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 8017d1e:	683a      	ldr	r2, [r7, #0]
 8017d20:	4613      	mov	r3, r2
 8017d22:	005b      	lsls	r3, r3, #1
 8017d24:	4413      	add	r3, r2
 8017d26:	009b      	lsls	r3, r3, #2
 8017d28:	4a03      	ldr	r2, [pc, #12]	; (8017d38 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 8017d2a:	4413      	add	r3, r2
}
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	370c      	adds	r7, #12
 8017d30:	46bd      	mov	sp, r7
 8017d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d36:	4770      	bx	lr
 8017d38:	20002d70 	.word	0x20002d70

08017d3c <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8017d3c:	b5b0      	push	{r4, r5, r7, lr}
 8017d3e:	b092      	sub	sp, #72	; 0x48
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8017d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017d4a:	2010      	movs	r0, #16
 8017d4c:	4798      	blx	r3
 8017d4e:	4603      	mov	r3, r0
 8017d50:	4aa3      	ldr	r2, [pc, #652]	; (8017fe0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d52:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8017d54:	4ba2      	ldr	r3, [pc, #648]	; (8017fe0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d104      	bne.n	8017d66 <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 8017d5c:	48a1      	ldr	r0, [pc, #644]	; (8017fe4 <_Z18trained_model_initPFPvjjE+0x2a8>)
 8017d5e:	f7ec f865 	bl	8003e2c <_Z9ei_printfPKcz>
    return kTfLiteError;
 8017d62:	2301      	movs	r3, #1
 8017d64:	e21d      	b.n	80181a2 <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 8017d66:	4b9e      	ldr	r3, [pc, #632]	; (8017fe0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	4a9f      	ldr	r2, [pc, #636]	; (8017fe8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017d6c:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8017d6e:	4b9c      	ldr	r3, [pc, #624]	; (8017fe0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017d76:	4a9d      	ldr	r2, [pc, #628]	; (8017fec <_Z18trained_model_initPFPvjjE+0x2b0>)
 8017d78:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 8017d7a:	4b9d      	ldr	r3, [pc, #628]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d7c:	4a9d      	ldr	r2, [pc, #628]	; (8017ff4 <_Z18trained_model_initPFPvjjE+0x2b8>)
 8017d7e:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 8017d80:	4b9b      	ldr	r3, [pc, #620]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d82:	4a9d      	ldr	r2, [pc, #628]	; (8017ff8 <_Z18trained_model_initPFPvjjE+0x2bc>)
 8017d84:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 8017d86:	4b9a      	ldr	r3, [pc, #616]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d88:	4a9c      	ldr	r2, [pc, #624]	; (8017ffc <_Z18trained_model_initPFPvjjE+0x2c0>)
 8017d8a:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 8017d8c:	4b98      	ldr	r3, [pc, #608]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d8e:	4a9c      	ldr	r2, [pc, #624]	; (8018000 <_Z18trained_model_initPFPvjjE+0x2c4>)
 8017d90:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 8017d92:	4b97      	ldr	r3, [pc, #604]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d94:	4a9b      	ldr	r2, [pc, #620]	; (8018004 <_Z18trained_model_initPFPvjjE+0x2c8>)
 8017d96:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 8017d98:	4b95      	ldr	r3, [pc, #596]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017d9a:	4a9b      	ldr	r2, [pc, #620]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017d9c:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 8017d9e:	4b94      	ldr	r3, [pc, #592]	; (8017ff0 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017da0:	220b      	movs	r2, #11
 8017da2:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 8017da4:	2300      	movs	r3, #0
 8017da6:	647b      	str	r3, [r7, #68]	; 0x44
 8017da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017daa:	2b0a      	cmp	r3, #10
 8017dac:	f200 810c 	bhi.w	8017fc8 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 8017db0:	4996      	ldr	r1, [pc, #600]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017db4:	4613      	mov	r3, r2
 8017db6:	005b      	lsls	r3, r3, #1
 8017db8:	4413      	add	r3, r2
 8017dba:	00db      	lsls	r3, r3, #3
 8017dbc:	440b      	add	r3, r1
 8017dbe:	3301      	adds	r3, #1
 8017dc0:	7819      	ldrb	r1, [r3, #0]
 8017dc2:	4a91      	ldr	r2, [pc, #580]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017dc6:	019b      	lsls	r3, r3, #6
 8017dc8:	4413      	add	r3, r2
 8017dca:	460a      	mov	r2, r1
 8017dcc:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 8017dce:	498f      	ldr	r1, [pc, #572]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017dd2:	4613      	mov	r3, r2
 8017dd4:	005b      	lsls	r3, r3, #1
 8017dd6:	4413      	add	r3, r2
 8017dd8:	00db      	lsls	r3, r3, #3
 8017dda:	440b      	add	r3, r1
 8017ddc:	3301      	adds	r3, #1
 8017dde:	7818      	ldrb	r0, [r3, #0]
 8017de0:	498b      	ldr	r1, [pc, #556]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017de4:	4613      	mov	r3, r2
 8017de6:	005b      	lsls	r3, r3, #1
 8017de8:	4413      	add	r3, r2
 8017dea:	009b      	lsls	r3, r3, #2
 8017dec:	440b      	add	r3, r1
 8017dee:	3308      	adds	r3, #8
 8017df0:	4602      	mov	r2, r0
 8017df2:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 8017df4:	4a84      	ldr	r2, [pc, #528]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017df8:	019b      	lsls	r3, r3, #6
 8017dfa:	4413      	add	r3, r2
 8017dfc:	332d      	adds	r3, #45	; 0x2d
 8017dfe:	2200      	movs	r2, #0
 8017e00:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 8017e02:	4982      	ldr	r1, [pc, #520]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e06:	4613      	mov	r3, r2
 8017e08:	005b      	lsls	r3, r3, #1
 8017e0a:	4413      	add	r3, r2
 8017e0c:	00db      	lsls	r3, r3, #3
 8017e0e:	440b      	add	r3, r1
 8017e10:	7819      	ldrb	r1, [r3, #0]
 8017e12:	4a7d      	ldr	r2, [pc, #500]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e16:	019b      	lsls	r3, r3, #6
 8017e18:	4413      	add	r3, r2
 8017e1a:	3314      	adds	r3, #20
 8017e1c:	460a      	mov	r2, r1
 8017e1e:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 8017e20:	497a      	ldr	r1, [pc, #488]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e24:	4613      	mov	r3, r2
 8017e26:	005b      	lsls	r3, r3, #1
 8017e28:	4413      	add	r3, r2
 8017e2a:	00db      	lsls	r3, r3, #3
 8017e2c:	440b      	add	r3, r1
 8017e2e:	330c      	adds	r3, #12
 8017e30:	681a      	ldr	r2, [r3, #0]
 8017e32:	4975      	ldr	r1, [pc, #468]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e36:	019b      	lsls	r3, r3, #6
 8017e38:	440b      	add	r3, r1
 8017e3a:	3318      	adds	r3, #24
 8017e3c:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8017e3e:	4973      	ldr	r1, [pc, #460]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e42:	4613      	mov	r3, r2
 8017e44:	005b      	lsls	r3, r3, #1
 8017e46:	4413      	add	r3, r2
 8017e48:	00db      	lsls	r3, r3, #3
 8017e4a:	440b      	add	r3, r1
 8017e4c:	3308      	adds	r3, #8
 8017e4e:	681a      	ldr	r2, [r3, #0]
 8017e50:	496d      	ldr	r1, [pc, #436]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e54:	019b      	lsls	r3, r3, #6
 8017e56:	440b      	add	r3, r1
 8017e58:	3308      	adds	r3, #8
 8017e5a:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 8017e5c:	496b      	ldr	r1, [pc, #428]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e60:	4613      	mov	r3, r2
 8017e62:	005b      	lsls	r3, r3, #1
 8017e64:	4413      	add	r3, r2
 8017e66:	00db      	lsls	r3, r3, #3
 8017e68:	440b      	add	r3, r1
 8017e6a:	3308      	adds	r3, #8
 8017e6c:	6819      	ldr	r1, [r3, #0]
 8017e6e:	4868      	ldr	r0, [pc, #416]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e72:	4613      	mov	r3, r2
 8017e74:	005b      	lsls	r3, r3, #1
 8017e76:	4413      	add	r3, r2
 8017e78:	009b      	lsls	r3, r3, #2
 8017e7a:	4403      	add	r3, r0
 8017e7c:	3304      	adds	r3, #4
 8017e7e:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8017e80:	4a61      	ldr	r2, [pc, #388]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e84:	019b      	lsls	r3, r3, #6
 8017e86:	4413      	add	r3, r2
 8017e88:	3314      	adds	r3, #20
 8017e8a:	781b      	ldrb	r3, [r3, #0]
 8017e8c:	2b02      	cmp	r3, #2
 8017e8e:	d11e      	bne.n	8017ece <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8017e90:	495e      	ldr	r1, [pc, #376]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017e92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e94:	4613      	mov	r3, r2
 8017e96:	005b      	lsls	r3, r3, #1
 8017e98:	4413      	add	r3, r2
 8017e9a:	00db      	lsls	r3, r3, #3
 8017e9c:	440b      	add	r3, r1
 8017e9e:	3304      	adds	r3, #4
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	461a      	mov	r2, r3
 8017ea4:	4b4e      	ldr	r3, [pc, #312]	; (8017fe0 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	4413      	add	r3, r2
 8017eaa:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 8017eac:	4a56      	ldr	r2, [pc, #344]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017eb0:	019b      	lsls	r3, r3, #6
 8017eb2:	4413      	add	r3, r2
 8017eb4:	3304      	adds	r3, #4
 8017eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017eb8:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 8017eba:	4955      	ldr	r1, [pc, #340]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017ebc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ebe:	4613      	mov	r3, r2
 8017ec0:	005b      	lsls	r3, r3, #1
 8017ec2:	4413      	add	r3, r2
 8017ec4:	009b      	lsls	r3, r3, #2
 8017ec6:	440b      	add	r3, r1
 8017ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017eca:	601a      	str	r2, [r3, #0]
 8017ecc:	e01f      	b.n	8017f0e <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 8017ece:	494f      	ldr	r1, [pc, #316]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ed2:	4613      	mov	r3, r2
 8017ed4:	005b      	lsls	r3, r3, #1
 8017ed6:	4413      	add	r3, r2
 8017ed8:	00db      	lsls	r3, r3, #3
 8017eda:	440b      	add	r3, r1
 8017edc:	3304      	adds	r3, #4
 8017ede:	681a      	ldr	r2, [r3, #0]
 8017ee0:	4949      	ldr	r1, [pc, #292]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ee4:	019b      	lsls	r3, r3, #6
 8017ee6:	440b      	add	r3, r1
 8017ee8:	3304      	adds	r3, #4
 8017eea:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 8017eec:	4947      	ldr	r1, [pc, #284]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ef0:	4613      	mov	r3, r2
 8017ef2:	005b      	lsls	r3, r3, #1
 8017ef4:	4413      	add	r3, r2
 8017ef6:	00db      	lsls	r3, r3, #3
 8017ef8:	440b      	add	r3, r1
 8017efa:	3304      	adds	r3, #4
 8017efc:	6819      	ldr	r1, [r3, #0]
 8017efe:	4844      	ldr	r0, [pc, #272]	; (8018010 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017f00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f02:	4613      	mov	r3, r2
 8017f04:	005b      	lsls	r3, r3, #1
 8017f06:	4413      	add	r3, r2
 8017f08:	009b      	lsls	r3, r3, #2
 8017f0a:	4403      	add	r3, r0
 8017f0c:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 8017f0e:	4a3e      	ldr	r2, [pc, #248]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f12:	019b      	lsls	r3, r3, #6
 8017f14:	4413      	add	r3, r2
 8017f16:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017f1a:	493c      	ldr	r1, [pc, #240]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f1e:	4613      	mov	r3, r2
 8017f20:	005b      	lsls	r3, r3, #1
 8017f22:	4413      	add	r3, r2
 8017f24:	00db      	lsls	r3, r3, #3
 8017f26:	440b      	add	r3, r1
 8017f28:	f103 0210 	add.w	r2, r3, #16
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f32:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 8017f36:	4a34      	ldr	r2, [pc, #208]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f3a:	019b      	lsls	r3, r3, #6
 8017f3c:	4413      	add	r3, r2
 8017f3e:	3330      	adds	r3, #48	; 0x30
 8017f40:	781b      	ldrb	r3, [r3, #0]
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d11b      	bne.n	8017f7e <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 8017f46:	4931      	ldr	r1, [pc, #196]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f4a:	4613      	mov	r3, r2
 8017f4c:	005b      	lsls	r3, r3, #1
 8017f4e:	4413      	add	r3, r2
 8017f50:	00db      	lsls	r3, r3, #3
 8017f52:	440b      	add	r3, r1
 8017f54:	3314      	adds	r3, #20
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 8017f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	685a      	ldr	r2, [r3, #4]
 8017f60:	4929      	ldr	r1, [pc, #164]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f64:	019b      	lsls	r3, r3, #6
 8017f66:	440b      	add	r3, r1
 8017f68:	330c      	adds	r3, #12
 8017f6a:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 8017f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	685a      	ldr	r2, [r3, #4]
 8017f72:	4925      	ldr	r1, [pc, #148]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f76:	019b      	lsls	r3, r3, #6
 8017f78:	440b      	add	r3, r1
 8017f7a:	3310      	adds	r3, #16
 8017f7c:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 8017f7e:	4a22      	ldr	r2, [pc, #136]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f82:	019b      	lsls	r3, r3, #6
 8017f84:	4413      	add	r3, r2
 8017f86:	3314      	adds	r3, #20
 8017f88:	781b      	ldrb	r3, [r3, #0]
 8017f8a:	2b02      	cmp	r3, #2
 8017f8c:	d118      	bne.n	8017fc0 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 8017f8e:	4a1e      	ldr	r2, [pc, #120]	; (8018008 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f92:	019b      	lsls	r3, r3, #6
 8017f94:	4413      	add	r3, r2
 8017f96:	3304      	adds	r3, #4
 8017f98:	6819      	ldr	r1, [r3, #0]
 8017f9a:	481c      	ldr	r0, [pc, #112]	; (801800c <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f9e:	4613      	mov	r3, r2
 8017fa0:	005b      	lsls	r3, r3, #1
 8017fa2:	4413      	add	r3, r2
 8017fa4:	00db      	lsls	r3, r3, #3
 8017fa6:	4403      	add	r3, r0
 8017fa8:	330c      	adds	r3, #12
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	440b      	add	r3, r1
 8017fae:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 8017fb0:	4b0d      	ldr	r3, [pc, #52]	; (8017fe8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	d902      	bls.n	8017fc0 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 8017fba:	4a0b      	ldr	r2, [pc, #44]	; (8017fe8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fbe:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 8017fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017fc2:	3301      	adds	r3, #1
 8017fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8017fc6:	e6ef      	b.n	8017da8 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 8017fc8:	4b07      	ldr	r3, [pc, #28]	; (8017fe8 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017fca:	681a      	ldr	r2, [r3, #0]
 8017fcc:	4b07      	ldr	r3, [pc, #28]	; (8017fec <_Z18trained_model_initPFPvjjE+0x2b0>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d921      	bls.n	8018018 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8017fd4:	480f      	ldr	r0, [pc, #60]	; (8018014 <_Z18trained_model_initPFPvjjE+0x2d8>)
 8017fd6:	f7eb ff29 	bl	8003e2c <_Z9ei_printfPKcz>
    return kTfLiteError;
 8017fda:	2301      	movs	r3, #1
 8017fdc:	e0e1      	b.n	80181a2 <_Z18trained_model_initPFPvjjE+0x466>
 8017fde:	bf00      	nop
 8017fe0:	20002a4c 	.word	0x20002a4c
 8017fe4:	0801d318 	.word	0x0801d318
 8017fe8:	20002a50 	.word	0x20002a50
 8017fec:	20002a54 	.word	0x20002a54
 8017ff0:	20002a58 	.word	0x20002a58
 8017ff4:	08017b85 	.word	0x08017b85
 8017ff8:	08017c2d 	.word	0x08017c2d
 8017ffc:	08017cb9 	.word	0x08017cb9
 8018000:	08017cf1 	.word	0x08017cf1
 8018004:	08017d15 	.word	0x08017d15
 8018008:	20002ab0 	.word	0x20002ab0
 801800c:	200000ec 	.word	0x200000ec
 8018010:	20002d70 	.word	0x20002d70
 8018014:	0801d340 	.word	0x0801d340
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 8018018:	4c64      	ldr	r4, [pc, #400]	; (80181ac <_Z18trained_model_initPFPvjjE+0x470>)
 801801a:	463b      	mov	r3, r7
 801801c:	4618      	mov	r0, r3
 801801e:	f7fd fe59 	bl	8015cd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8018022:	4625      	mov	r5, r4
 8018024:	463c      	mov	r4, r7
 8018026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801802a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801802e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 8018032:	4c5e      	ldr	r4, [pc, #376]	; (80181ac <_Z18trained_model_initPFPvjjE+0x470>)
 8018034:	463b      	mov	r3, r7
 8018036:	4618      	mov	r0, r3
 8018038:	f7fe fc7c 	bl	8016934 <_ZN6tflite16Register_SOFTMAXEv>
 801803c:	3420      	adds	r4, #32
 801803e:	463d      	mov	r5, r7
 8018040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018044:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 4; ++i) {
 801804c:	2300      	movs	r3, #0
 801804e:	643b      	str	r3, [r7, #64]	; 0x40
 8018050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018052:	2b03      	cmp	r3, #3
 8018054:	d86f      	bhi.n	8018136 <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 8018056:	4a56      	ldr	r2, [pc, #344]	; (80181b0 <_Z18trained_model_initPFPvjjE+0x474>)
 8018058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801805a:	011b      	lsls	r3, r3, #4
 801805c:	4413      	add	r3, r2
 801805e:	6819      	ldr	r1, [r3, #0]
 8018060:	4854      	ldr	r0, [pc, #336]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x478>)
 8018062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018064:	4613      	mov	r3, r2
 8018066:	00db      	lsls	r3, r3, #3
 8018068:	4413      	add	r3, r2
 801806a:	009b      	lsls	r3, r3, #2
 801806c:	4403      	add	r3, r0
 801806e:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8018070:	4a4f      	ldr	r2, [pc, #316]	; (80181b0 <_Z18trained_model_initPFPvjjE+0x474>)
 8018072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018074:	011b      	lsls	r3, r3, #4
 8018076:	4413      	add	r3, r2
 8018078:	3304      	adds	r3, #4
 801807a:	6819      	ldr	r1, [r3, #0]
 801807c:	484d      	ldr	r0, [pc, #308]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x478>)
 801807e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018080:	4613      	mov	r3, r2
 8018082:	00db      	lsls	r3, r3, #3
 8018084:	4413      	add	r3, r2
 8018086:	009b      	lsls	r3, r3, #2
 8018088:	4403      	add	r3, r0
 801808a:	3304      	adds	r3, #4
 801808c:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801808e:	4a48      	ldr	r2, [pc, #288]	; (80181b0 <_Z18trained_model_initPFPvjjE+0x474>)
 8018090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018092:	011b      	lsls	r3, r3, #4
 8018094:	4413      	add	r3, r2
 8018096:	3308      	adds	r3, #8
 8018098:	6819      	ldr	r1, [r3, #0]
 801809a:	4846      	ldr	r0, [pc, #280]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x478>)
 801809c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801809e:	4613      	mov	r3, r2
 80180a0:	00db      	lsls	r3, r3, #3
 80180a2:	4413      	add	r3, r2
 80180a4:	009b      	lsls	r3, r3, #2
 80180a6:	4403      	add	r3, r0
 80180a8:	3314      	adds	r3, #20
 80180aa:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 80180ac:	4941      	ldr	r1, [pc, #260]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x478>)
 80180ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80180b0:	4613      	mov	r3, r2
 80180b2:	00db      	lsls	r3, r3, #3
 80180b4:	4413      	add	r3, r2
 80180b6:	009b      	lsls	r3, r3, #2
 80180b8:	440b      	add	r3, r1
 80180ba:	3318      	adds	r3, #24
 80180bc:	2200      	movs	r2, #0
 80180be:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 80180c0:	493c      	ldr	r1, [pc, #240]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x478>)
 80180c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80180c4:	4613      	mov	r3, r2
 80180c6:	00db      	lsls	r3, r3, #3
 80180c8:	4413      	add	r3, r2
 80180ca:	009b      	lsls	r3, r3, #2
 80180cc:	440b      	add	r3, r1
 80180ce:	331c      	adds	r3, #28
 80180d0:	2200      	movs	r2, #0
 80180d2:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 80180d4:	4a36      	ldr	r2, [pc, #216]	; (80181b0 <_Z18trained_model_initPFPvjjE+0x474>)
 80180d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180d8:	011b      	lsls	r3, r3, #4
 80180da:	4413      	add	r3, r2
 80180dc:	330c      	adds	r3, #12
 80180de:	781b      	ldrb	r3, [r3, #0]
 80180e0:	4a32      	ldr	r2, [pc, #200]	; (80181ac <_Z18trained_model_initPFPvjjE+0x470>)
 80180e2:	015b      	lsls	r3, r3, #5
 80180e4:	4413      	add	r3, r2
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d020      	beq.n	801812e <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80180ec:	4a30      	ldr	r2, [pc, #192]	; (80181b0 <_Z18trained_model_initPFPvjjE+0x474>)
 80180ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80180f0:	011b      	lsls	r3, r3, #4
 80180f2:	4413      	add	r3, r2
 80180f4:	330c      	adds	r3, #12
 80180f6:	781b      	ldrb	r3, [r3, #0]
 80180f8:	4a2c      	ldr	r2, [pc, #176]	; (80181ac <_Z18trained_model_initPFPvjjE+0x470>)
 80180fa:	015b      	lsls	r3, r3, #5
 80180fc:	4413      	add	r3, r2
 80180fe:	681c      	ldr	r4, [r3, #0]
 8018100:	492c      	ldr	r1, [pc, #176]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x478>)
 8018102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018104:	4613      	mov	r3, r2
 8018106:	00db      	lsls	r3, r3, #3
 8018108:	4413      	add	r3, r2
 801810a:	009b      	lsls	r3, r3, #2
 801810c:	440b      	add	r3, r1
 801810e:	3314      	adds	r3, #20
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	2200      	movs	r2, #0
 8018114:	4619      	mov	r1, r3
 8018116:	4828      	ldr	r0, [pc, #160]	; (80181b8 <_Z18trained_model_initPFPvjjE+0x47c>)
 8018118:	47a0      	blx	r4
 801811a:	4601      	mov	r1, r0
 801811c:	4825      	ldr	r0, [pc, #148]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x478>)
 801811e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018120:	4613      	mov	r3, r2
 8018122:	00db      	lsls	r3, r3, #3
 8018124:	4413      	add	r3, r2
 8018126:	009b      	lsls	r3, r3, #2
 8018128:	4403      	add	r3, r0
 801812a:	3310      	adds	r3, #16
 801812c:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 4; ++i) {
 801812e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018130:	3301      	adds	r3, #1
 8018132:	643b      	str	r3, [r7, #64]	; 0x40
 8018134:	e78c      	b.n	8018050 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 4; ++i) {
 8018136:	2300      	movs	r3, #0
 8018138:	63fb      	str	r3, [r7, #60]	; 0x3c
 801813a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801813c:	2b03      	cmp	r3, #3
 801813e:	d82f      	bhi.n	80181a0 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8018140:	4a1b      	ldr	r2, [pc, #108]	; (80181b0 <_Z18trained_model_initPFPvjjE+0x474>)
 8018142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018144:	011b      	lsls	r3, r3, #4
 8018146:	4413      	add	r3, r2
 8018148:	330c      	adds	r3, #12
 801814a:	781b      	ldrb	r3, [r3, #0]
 801814c:	4a17      	ldr	r2, [pc, #92]	; (80181ac <_Z18trained_model_initPFPvjjE+0x470>)
 801814e:	015b      	lsls	r3, r3, #5
 8018150:	4413      	add	r3, r2
 8018152:	3308      	adds	r3, #8
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d01e      	beq.n	8018198 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801815a:	4a15      	ldr	r2, [pc, #84]	; (80181b0 <_Z18trained_model_initPFPvjjE+0x474>)
 801815c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801815e:	011b      	lsls	r3, r3, #4
 8018160:	4413      	add	r3, r2
 8018162:	330c      	adds	r3, #12
 8018164:	781b      	ldrb	r3, [r3, #0]
 8018166:	4a11      	ldr	r2, [pc, #68]	; (80181ac <_Z18trained_model_initPFPvjjE+0x470>)
 8018168:	015b      	lsls	r3, r3, #5
 801816a:	4413      	add	r3, r2
 801816c:	3308      	adds	r3, #8
 801816e:	681c      	ldr	r4, [r3, #0]
 8018170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018172:	4613      	mov	r3, r2
 8018174:	00db      	lsls	r3, r3, #3
 8018176:	4413      	add	r3, r2
 8018178:	009b      	lsls	r3, r3, #2
 801817a:	4a0e      	ldr	r2, [pc, #56]	; (80181b4 <_Z18trained_model_initPFPvjjE+0x478>)
 801817c:	4413      	add	r3, r2
 801817e:	4619      	mov	r1, r3
 8018180:	480d      	ldr	r0, [pc, #52]	; (80181b8 <_Z18trained_model_initPFPvjjE+0x47c>)
 8018182:	47a0      	blx	r4
 8018184:	4603      	mov	r3, r0
 8018186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 801818a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801818e:	2b00      	cmp	r3, #0
 8018190:	d002      	beq.n	8018198 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 8018192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018196:	e004      	b.n	80181a2 <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 4; ++i) {
 8018198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801819a:	3301      	adds	r3, #1
 801819c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801819e:	e7cc      	b.n	801813a <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 80181a0:	2300      	movs	r3, #0
}
 80181a2:	4618      	mov	r0, r3
 80181a4:	3748      	adds	r7, #72	; 0x48
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bdb0      	pop	{r4, r5, r7, pc}
 80181aa:	bf00      	nop
 80181ac:	20002df4 	.word	0x20002df4
 80181b0:	0801d934 	.word	0x0801d934
 80181b4:	20002e34 	.word	0x20002e34
 80181b8:	20002a58 	.word	0x20002a58

080181bc <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 80181bc:	b480      	push	{r7}
 80181be:	b083      	sub	sp, #12
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 80181c4:	4b05      	ldr	r3, [pc, #20]	; (80181dc <_Z19trained_model_inputi+0x20>)
 80181c6:	689a      	ldr	r2, [r3, #8]
 80181c8:	2300      	movs	r3, #0
 80181ca:	019b      	lsls	r3, r3, #6
 80181cc:	4413      	add	r3, r2
}
 80181ce:	4618      	mov	r0, r3
 80181d0:	370c      	adds	r7, #12
 80181d2:	46bd      	mov	sp, r7
 80181d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d8:	4770      	bx	lr
 80181da:	bf00      	nop
 80181dc:	20002a58 	.word	0x20002a58

080181e0 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 80181e0:	b480      	push	{r7}
 80181e2:	b083      	sub	sp, #12
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80181e8:	4b05      	ldr	r3, [pc, #20]	; (8018200 <_Z20trained_model_outputi+0x20>)
 80181ea:	689a      	ldr	r2, [r3, #8]
 80181ec:	230a      	movs	r3, #10
 80181ee:	019b      	lsls	r3, r3, #6
 80181f0:	4413      	add	r3, r2
}
 80181f2:	4618      	mov	r0, r3
 80181f4:	370c      	adds	r7, #12
 80181f6:	46bd      	mov	sp, r7
 80181f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fc:	4770      	bx	lr
 80181fe:	bf00      	nop
 8018200:	20002a58 	.word	0x20002a58

08018204 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 8018204:	b590      	push	{r4, r7, lr}
 8018206:	b083      	sub	sp, #12
 8018208:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 801820a:	2300      	movs	r3, #0
 801820c:	607b      	str	r3, [r7, #4]
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	2b03      	cmp	r3, #3
 8018212:	d81f      	bhi.n	8018254 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 8018214:	4a12      	ldr	r2, [pc, #72]	; (8018260 <_Z20trained_model_invokev+0x5c>)
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	011b      	lsls	r3, r3, #4
 801821a:	4413      	add	r3, r2
 801821c:	330c      	adds	r3, #12
 801821e:	781b      	ldrb	r3, [r3, #0]
 8018220:	4a10      	ldr	r2, [pc, #64]	; (8018264 <_Z20trained_model_invokev+0x60>)
 8018222:	015b      	lsls	r3, r3, #5
 8018224:	4413      	add	r3, r2
 8018226:	330c      	adds	r3, #12
 8018228:	681c      	ldr	r4, [r3, #0]
 801822a:	687a      	ldr	r2, [r7, #4]
 801822c:	4613      	mov	r3, r2
 801822e:	00db      	lsls	r3, r3, #3
 8018230:	4413      	add	r3, r2
 8018232:	009b      	lsls	r3, r3, #2
 8018234:	4a0c      	ldr	r2, [pc, #48]	; (8018268 <_Z20trained_model_invokev+0x64>)
 8018236:	4413      	add	r3, r2
 8018238:	4619      	mov	r1, r3
 801823a:	480c      	ldr	r0, [pc, #48]	; (801826c <_Z20trained_model_invokev+0x68>)
 801823c:	47a0      	blx	r4
 801823e:	4603      	mov	r3, r0
 8018240:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8018242:	78fb      	ldrb	r3, [r7, #3]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d001      	beq.n	801824c <_Z20trained_model_invokev+0x48>
      return status;
 8018248:	78fb      	ldrb	r3, [r7, #3]
 801824a:	e004      	b.n	8018256 <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 4; ++i) {
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	3301      	adds	r3, #1
 8018250:	607b      	str	r3, [r7, #4]
 8018252:	e7dc      	b.n	801820e <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8018254:	2300      	movs	r3, #0
}
 8018256:	4618      	mov	r0, r3
 8018258:	370c      	adds	r7, #12
 801825a:	46bd      	mov	sp, r7
 801825c:	bd90      	pop	{r4, r7, pc}
 801825e:	bf00      	nop
 8018260:	0801d934 	.word	0x0801d934
 8018264:	20002df4 	.word	0x20002df4
 8018268:	20002e34 	.word	0x20002e34
 801826c:	20002a58 	.word	0x20002a58

08018270 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8018270:	b580      	push	{r7, lr}
 8018272:	b084      	sub	sp, #16
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8018278:	4b10      	ldr	r3, [pc, #64]	; (80182bc <_Z19trained_model_resetPFvPvE+0x4c>)
 801827a:	681a      	ldr	r2, [r3, #0]
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	4610      	mov	r0, r2
 8018280:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 8018282:	4b0f      	ldr	r3, [pc, #60]	; (80182c0 <_Z19trained_model_resetPFvPvE+0x50>)
 8018284:	2200      	movs	r2, #0
 8018286:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8018288:	2300      	movs	r3, #0
 801828a:	60fb      	str	r3, [r7, #12]
 801828c:	4b0d      	ldr	r3, [pc, #52]	; (80182c4 <_Z19trained_model_resetPFvPvE+0x54>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	68fa      	ldr	r2, [r7, #12]
 8018292:	429a      	cmp	r2, r3
 8018294:	d20a      	bcs.n	80182ac <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 8018296:	4a0c      	ldr	r2, [pc, #48]	; (80182c8 <_Z19trained_model_resetPFvPvE+0x58>)
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801829e:	4618      	mov	r0, r3
 80182a0:	f7fa fec4 	bl	801302c <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	3301      	adds	r3, #1
 80182a8:	60fb      	str	r3, [r7, #12]
 80182aa:	e7ef      	b.n	801828c <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 80182ac:	4b05      	ldr	r3, [pc, #20]	; (80182c4 <_Z19trained_model_resetPFvPvE+0x54>)
 80182ae:	2200      	movs	r2, #0
 80182b0:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80182b2:	2300      	movs	r3, #0
}
 80182b4:	4618      	mov	r0, r3
 80182b6:	3710      	adds	r7, #16
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}
 80182bc:	20002a4c 	.word	0x20002a4c
 80182c0:	20002f10 	.word	0x20002f10
 80182c4:	20002eec 	.word	0x20002eec
 80182c8:	20002ec4 	.word	0x20002ec4

080182cc <_Z41__static_initialization_and_destruction_0ii>:
 80182cc:	b480      	push	{r7}
 80182ce:	b083      	sub	sp, #12
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
 80182d4:	6039      	str	r1, [r7, #0]
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	2b01      	cmp	r3, #1
 80182da:	d11f      	bne.n	801831c <_Z41__static_initialization_and_destruction_0ii+0x50>
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80182e2:	4293      	cmp	r3, r2
 80182e4:	d11a      	bne.n	801831c <_Z41__static_initialization_and_destruction_0ii+0x50>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension0, 21, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 80182e6:	4b10      	ldr	r3, [pc, #64]	; (8018328 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	3320      	adds	r3, #32
};const NodeInfo_t nodeData[] = {
 80182ec:	4a0f      	ldr	r2, [pc, #60]	; (801832c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80182ee:	6053      	str	r3, [r2, #4]
 80182f0:	4b0d      	ldr	r3, [pc, #52]	; (8018328 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	4a0d      	ldr	r2, [pc, #52]	; (801832c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80182f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
 80182fa:	4b0b      	ldr	r3, [pc, #44]	; (8018328 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	3320      	adds	r3, #32
};const NodeInfo_t nodeData[] = {
 8018300:	4a0a      	ldr	r2, [pc, #40]	; (801832c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8018302:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 8018306:	4b08      	ldr	r3, [pc, #32]	; (8018328 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 801830c:	4a07      	ldr	r2, [pc, #28]	; (801832c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801830e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8018312:	4b05      	ldr	r3, [pc, #20]	; (8018328 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	4a05      	ldr	r2, [pc, #20]	; (801832c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8018318:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 801831c:	bf00      	nop
 801831e:	370c      	adds	r7, #12
 8018320:	46bd      	mov	sp, r7
 8018322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018326:	4770      	bx	lr
 8018328:	20002a4c 	.word	0x20002a4c
 801832c:	200000ec 	.word	0x200000ec

08018330 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8018330:	b580      	push	{r7, lr}
 8018332:	af00      	add	r7, sp, #0
 8018334:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018338:	2001      	movs	r0, #1
 801833a:	f7ff ffc7 	bl	80182cc <_Z41__static_initialization_and_destruction_0ii>
 801833e:	bd80      	pop	{r7, pc}

08018340 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018344:	2200      	movs	r2, #0
 8018346:	4912      	ldr	r1, [pc, #72]	; (8018390 <MX_USB_DEVICE_Init+0x50>)
 8018348:	4812      	ldr	r0, [pc, #72]	; (8018394 <MX_USB_DEVICE_Init+0x54>)
 801834a:	f7f2 f9c9 	bl	800a6e0 <USBD_Init>
 801834e:	4603      	mov	r3, r0
 8018350:	2b00      	cmp	r3, #0
 8018352:	d001      	beq.n	8018358 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018354:	f7ec f834 	bl	80043c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018358:	490f      	ldr	r1, [pc, #60]	; (8018398 <MX_USB_DEVICE_Init+0x58>)
 801835a:	480e      	ldr	r0, [pc, #56]	; (8018394 <MX_USB_DEVICE_Init+0x54>)
 801835c:	f7f2 f9f0 	bl	800a740 <USBD_RegisterClass>
 8018360:	4603      	mov	r3, r0
 8018362:	2b00      	cmp	r3, #0
 8018364:	d001      	beq.n	801836a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018366:	f7ec f82b 	bl	80043c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801836a:	490c      	ldr	r1, [pc, #48]	; (801839c <MX_USB_DEVICE_Init+0x5c>)
 801836c:	4809      	ldr	r0, [pc, #36]	; (8018394 <MX_USB_DEVICE_Init+0x54>)
 801836e:	f7f2 f8e1 	bl	800a534 <USBD_CDC_RegisterInterface>
 8018372:	4603      	mov	r3, r0
 8018374:	2b00      	cmp	r3, #0
 8018376:	d001      	beq.n	801837c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018378:	f7ec f822 	bl	80043c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801837c:	4805      	ldr	r0, [pc, #20]	; (8018394 <MX_USB_DEVICE_Init+0x54>)
 801837e:	f7f2 fa15 	bl	800a7ac <USBD_Start>
 8018382:	4603      	mov	r3, r0
 8018384:	2b00      	cmp	r3, #0
 8018386:	d001      	beq.n	801838c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018388:	f7ec f81a 	bl	80043c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801838c:	bf00      	nop
 801838e:	bd80      	pop	{r7, pc}
 8018390:	20000208 	.word	0x20000208
 8018394:	20002f14 	.word	0x20002f14
 8018398:	20000060 	.word	0x20000060
 801839c:	200001f4 	.word	0x200001f4

080183a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80183a4:	2200      	movs	r2, #0
 80183a6:	4905      	ldr	r1, [pc, #20]	; (80183bc <CDC_Init_FS+0x1c>)
 80183a8:	4805      	ldr	r0, [pc, #20]	; (80183c0 <CDC_Init_FS+0x20>)
 80183aa:	f7f2 f8dd 	bl	800a568 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80183ae:	4905      	ldr	r1, [pc, #20]	; (80183c4 <CDC_Init_FS+0x24>)
 80183b0:	4803      	ldr	r0, [pc, #12]	; (80183c0 <CDC_Init_FS+0x20>)
 80183b2:	f7f2 f8fb 	bl	800a5ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80183b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80183b8:	4618      	mov	r0, r3
 80183ba:	bd80      	pop	{r7, pc}
 80183bc:	200039f0 	.word	0x200039f0
 80183c0:	20002f14 	.word	0x20002f14
 80183c4:	200031f0 	.word	0x200031f0

080183c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80183c8:	b480      	push	{r7}
 80183ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80183cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80183ce:	4618      	mov	r0, r3
 80183d0:	46bd      	mov	sp, r7
 80183d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d6:	4770      	bx	lr

080183d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80183d8:	b480      	push	{r7}
 80183da:	b083      	sub	sp, #12
 80183dc:	af00      	add	r7, sp, #0
 80183de:	4603      	mov	r3, r0
 80183e0:	6039      	str	r1, [r7, #0]
 80183e2:	71fb      	strb	r3, [r7, #7]
 80183e4:	4613      	mov	r3, r2
 80183e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80183e8:	79fb      	ldrb	r3, [r7, #7]
 80183ea:	2b23      	cmp	r3, #35	; 0x23
 80183ec:	d84a      	bhi.n	8018484 <CDC_Control_FS+0xac>
 80183ee:	a201      	add	r2, pc, #4	; (adr r2, 80183f4 <CDC_Control_FS+0x1c>)
 80183f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183f4:	08018485 	.word	0x08018485
 80183f8:	08018485 	.word	0x08018485
 80183fc:	08018485 	.word	0x08018485
 8018400:	08018485 	.word	0x08018485
 8018404:	08018485 	.word	0x08018485
 8018408:	08018485 	.word	0x08018485
 801840c:	08018485 	.word	0x08018485
 8018410:	08018485 	.word	0x08018485
 8018414:	08018485 	.word	0x08018485
 8018418:	08018485 	.word	0x08018485
 801841c:	08018485 	.word	0x08018485
 8018420:	08018485 	.word	0x08018485
 8018424:	08018485 	.word	0x08018485
 8018428:	08018485 	.word	0x08018485
 801842c:	08018485 	.word	0x08018485
 8018430:	08018485 	.word	0x08018485
 8018434:	08018485 	.word	0x08018485
 8018438:	08018485 	.word	0x08018485
 801843c:	08018485 	.word	0x08018485
 8018440:	08018485 	.word	0x08018485
 8018444:	08018485 	.word	0x08018485
 8018448:	08018485 	.word	0x08018485
 801844c:	08018485 	.word	0x08018485
 8018450:	08018485 	.word	0x08018485
 8018454:	08018485 	.word	0x08018485
 8018458:	08018485 	.word	0x08018485
 801845c:	08018485 	.word	0x08018485
 8018460:	08018485 	.word	0x08018485
 8018464:	08018485 	.word	0x08018485
 8018468:	08018485 	.word	0x08018485
 801846c:	08018485 	.word	0x08018485
 8018470:	08018485 	.word	0x08018485
 8018474:	08018485 	.word	0x08018485
 8018478:	08018485 	.word	0x08018485
 801847c:	08018485 	.word	0x08018485
 8018480:	08018485 	.word	0x08018485
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018484:	bf00      	nop
  }

  return (USBD_OK);
 8018486:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018488:	4618      	mov	r0, r3
 801848a:	370c      	adds	r7, #12
 801848c:	46bd      	mov	sp, r7
 801848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018492:	4770      	bx	lr

08018494 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b082      	sub	sp, #8
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
 801849c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801849e:	6879      	ldr	r1, [r7, #4]
 80184a0:	4805      	ldr	r0, [pc, #20]	; (80184b8 <CDC_Receive_FS+0x24>)
 80184a2:	f7f2 f883 	bl	800a5ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80184a6:	4804      	ldr	r0, [pc, #16]	; (80184b8 <CDC_Receive_FS+0x24>)
 80184a8:	f7f2 f8e4 	bl	800a674 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80184ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3708      	adds	r7, #8
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}
 80184b6:	bf00      	nop
 80184b8:	20002f14 	.word	0x20002f14

080184bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b084      	sub	sp, #16
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	6078      	str	r0, [r7, #4]
 80184c4:	460b      	mov	r3, r1
 80184c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80184c8:	2300      	movs	r3, #0
 80184ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80184cc:	4b0d      	ldr	r3, [pc, #52]	; (8018504 <CDC_Transmit_FS+0x48>)
 80184ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80184d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d001      	beq.n	80184e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80184de:	2301      	movs	r3, #1
 80184e0:	e00b      	b.n	80184fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80184e2:	887b      	ldrh	r3, [r7, #2]
 80184e4:	461a      	mov	r2, r3
 80184e6:	6879      	ldr	r1, [r7, #4]
 80184e8:	4806      	ldr	r0, [pc, #24]	; (8018504 <CDC_Transmit_FS+0x48>)
 80184ea:	f7f2 f83d 	bl	800a568 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80184ee:	4805      	ldr	r0, [pc, #20]	; (8018504 <CDC_Transmit_FS+0x48>)
 80184f0:	f7f2 f87a 	bl	800a5e8 <USBD_CDC_TransmitPacket>
 80184f4:	4603      	mov	r3, r0
 80184f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80184f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	3710      	adds	r7, #16
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}
 8018502:	bf00      	nop
 8018504:	20002f14 	.word	0x20002f14

08018508 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018508:	b480      	push	{r7}
 801850a:	b087      	sub	sp, #28
 801850c:	af00      	add	r7, sp, #0
 801850e:	60f8      	str	r0, [r7, #12]
 8018510:	60b9      	str	r1, [r7, #8]
 8018512:	4613      	mov	r3, r2
 8018514:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018516:	2300      	movs	r3, #0
 8018518:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801851a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801851e:	4618      	mov	r0, r3
 8018520:	371c      	adds	r7, #28
 8018522:	46bd      	mov	sp, r7
 8018524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018528:	4770      	bx	lr
	...

0801852c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801852c:	b480      	push	{r7}
 801852e:	b083      	sub	sp, #12
 8018530:	af00      	add	r7, sp, #0
 8018532:	4603      	mov	r3, r0
 8018534:	6039      	str	r1, [r7, #0]
 8018536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	2212      	movs	r2, #18
 801853c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801853e:	4b03      	ldr	r3, [pc, #12]	; (801854c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018540:	4618      	mov	r0, r3
 8018542:	370c      	adds	r7, #12
 8018544:	46bd      	mov	sp, r7
 8018546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801854a:	4770      	bx	lr
 801854c:	20000224 	.word	0x20000224

08018550 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018550:	b480      	push	{r7}
 8018552:	b083      	sub	sp, #12
 8018554:	af00      	add	r7, sp, #0
 8018556:	4603      	mov	r3, r0
 8018558:	6039      	str	r1, [r7, #0]
 801855a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801855c:	683b      	ldr	r3, [r7, #0]
 801855e:	2204      	movs	r2, #4
 8018560:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018562:	4b03      	ldr	r3, [pc, #12]	; (8018570 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018564:	4618      	mov	r0, r3
 8018566:	370c      	adds	r7, #12
 8018568:	46bd      	mov	sp, r7
 801856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856e:	4770      	bx	lr
 8018570:	20000238 	.word	0x20000238

08018574 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b082      	sub	sp, #8
 8018578:	af00      	add	r7, sp, #0
 801857a:	4603      	mov	r3, r0
 801857c:	6039      	str	r1, [r7, #0]
 801857e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018580:	79fb      	ldrb	r3, [r7, #7]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d105      	bne.n	8018592 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018586:	683a      	ldr	r2, [r7, #0]
 8018588:	4907      	ldr	r1, [pc, #28]	; (80185a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801858a:	4808      	ldr	r0, [pc, #32]	; (80185ac <USBD_FS_ProductStrDescriptor+0x38>)
 801858c:	f7f3 faba 	bl	800bb04 <USBD_GetString>
 8018590:	e004      	b.n	801859c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018592:	683a      	ldr	r2, [r7, #0]
 8018594:	4904      	ldr	r1, [pc, #16]	; (80185a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8018596:	4805      	ldr	r0, [pc, #20]	; (80185ac <USBD_FS_ProductStrDescriptor+0x38>)
 8018598:	f7f3 fab4 	bl	800bb04 <USBD_GetString>
  }
  return USBD_StrDesc;
 801859c:	4b02      	ldr	r3, [pc, #8]	; (80185a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3708      	adds	r7, #8
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}
 80185a6:	bf00      	nop
 80185a8:	200041f0 	.word	0x200041f0
 80185ac:	0801d394 	.word	0x0801d394

080185b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b082      	sub	sp, #8
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	4603      	mov	r3, r0
 80185b8:	6039      	str	r1, [r7, #0]
 80185ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80185bc:	683a      	ldr	r2, [r7, #0]
 80185be:	4904      	ldr	r1, [pc, #16]	; (80185d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80185c0:	4804      	ldr	r0, [pc, #16]	; (80185d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80185c2:	f7f3 fa9f 	bl	800bb04 <USBD_GetString>
  return USBD_StrDesc;
 80185c6:	4b02      	ldr	r3, [pc, #8]	; (80185d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80185c8:	4618      	mov	r0, r3
 80185ca:	3708      	adds	r7, #8
 80185cc:	46bd      	mov	sp, r7
 80185ce:	bd80      	pop	{r7, pc}
 80185d0:	200041f0 	.word	0x200041f0
 80185d4:	0801d3ac 	.word	0x0801d3ac

080185d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b082      	sub	sp, #8
 80185dc:	af00      	add	r7, sp, #0
 80185de:	4603      	mov	r3, r0
 80185e0:	6039      	str	r1, [r7, #0]
 80185e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	221a      	movs	r2, #26
 80185e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80185ea:	f000 f843 	bl	8018674 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80185ee:	4b02      	ldr	r3, [pc, #8]	; (80185f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80185f0:	4618      	mov	r0, r3
 80185f2:	3708      	adds	r7, #8
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}
 80185f8:	2000023c 	.word	0x2000023c

080185fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	4603      	mov	r3, r0
 8018604:	6039      	str	r1, [r7, #0]
 8018606:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018608:	79fb      	ldrb	r3, [r7, #7]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d105      	bne.n	801861a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801860e:	683a      	ldr	r2, [r7, #0]
 8018610:	4907      	ldr	r1, [pc, #28]	; (8018630 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018612:	4808      	ldr	r0, [pc, #32]	; (8018634 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018614:	f7f3 fa76 	bl	800bb04 <USBD_GetString>
 8018618:	e004      	b.n	8018624 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801861a:	683a      	ldr	r2, [r7, #0]
 801861c:	4904      	ldr	r1, [pc, #16]	; (8018630 <USBD_FS_ConfigStrDescriptor+0x34>)
 801861e:	4805      	ldr	r0, [pc, #20]	; (8018634 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018620:	f7f3 fa70 	bl	800bb04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018624:	4b02      	ldr	r3, [pc, #8]	; (8018630 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018626:	4618      	mov	r0, r3
 8018628:	3708      	adds	r7, #8
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}
 801862e:	bf00      	nop
 8018630:	200041f0 	.word	0x200041f0
 8018634:	0801d3c0 	.word	0x0801d3c0

08018638 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b082      	sub	sp, #8
 801863c:	af00      	add	r7, sp, #0
 801863e:	4603      	mov	r3, r0
 8018640:	6039      	str	r1, [r7, #0]
 8018642:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018644:	79fb      	ldrb	r3, [r7, #7]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d105      	bne.n	8018656 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801864a:	683a      	ldr	r2, [r7, #0]
 801864c:	4907      	ldr	r1, [pc, #28]	; (801866c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801864e:	4808      	ldr	r0, [pc, #32]	; (8018670 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018650:	f7f3 fa58 	bl	800bb04 <USBD_GetString>
 8018654:	e004      	b.n	8018660 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018656:	683a      	ldr	r2, [r7, #0]
 8018658:	4904      	ldr	r1, [pc, #16]	; (801866c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801865a:	4805      	ldr	r0, [pc, #20]	; (8018670 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801865c:	f7f3 fa52 	bl	800bb04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018660:	4b02      	ldr	r3, [pc, #8]	; (801866c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018662:	4618      	mov	r0, r3
 8018664:	3708      	adds	r7, #8
 8018666:	46bd      	mov	sp, r7
 8018668:	bd80      	pop	{r7, pc}
 801866a:	bf00      	nop
 801866c:	200041f0 	.word	0x200041f0
 8018670:	0801d3cc 	.word	0x0801d3cc

08018674 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b084      	sub	sp, #16
 8018678:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801867a:	4b0f      	ldr	r3, [pc, #60]	; (80186b8 <Get_SerialNum+0x44>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018680:	4b0e      	ldr	r3, [pc, #56]	; (80186bc <Get_SerialNum+0x48>)
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018686:	4b0e      	ldr	r3, [pc, #56]	; (80186c0 <Get_SerialNum+0x4c>)
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801868c:	68fa      	ldr	r2, [r7, #12]
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	4413      	add	r3, r2
 8018692:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d009      	beq.n	80186ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801869a:	2208      	movs	r2, #8
 801869c:	4909      	ldr	r1, [pc, #36]	; (80186c4 <Get_SerialNum+0x50>)
 801869e:	68f8      	ldr	r0, [r7, #12]
 80186a0:	f000 f814 	bl	80186cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80186a4:	2204      	movs	r2, #4
 80186a6:	4908      	ldr	r1, [pc, #32]	; (80186c8 <Get_SerialNum+0x54>)
 80186a8:	68b8      	ldr	r0, [r7, #8]
 80186aa:	f000 f80f 	bl	80186cc <IntToUnicode>
  }
}
 80186ae:	bf00      	nop
 80186b0:	3710      	adds	r7, #16
 80186b2:	46bd      	mov	sp, r7
 80186b4:	bd80      	pop	{r7, pc}
 80186b6:	bf00      	nop
 80186b8:	1fff7a10 	.word	0x1fff7a10
 80186bc:	1fff7a14 	.word	0x1fff7a14
 80186c0:	1fff7a18 	.word	0x1fff7a18
 80186c4:	2000023e 	.word	0x2000023e
 80186c8:	2000024e 	.word	0x2000024e

080186cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80186cc:	b480      	push	{r7}
 80186ce:	b087      	sub	sp, #28
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	60f8      	str	r0, [r7, #12]
 80186d4:	60b9      	str	r1, [r7, #8]
 80186d6:	4613      	mov	r3, r2
 80186d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80186da:	2300      	movs	r3, #0
 80186dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80186de:	2300      	movs	r3, #0
 80186e0:	75fb      	strb	r3, [r7, #23]
 80186e2:	e027      	b.n	8018734 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	0f1b      	lsrs	r3, r3, #28
 80186e8:	2b09      	cmp	r3, #9
 80186ea:	d80b      	bhi.n	8018704 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	0f1b      	lsrs	r3, r3, #28
 80186f0:	b2da      	uxtb	r2, r3
 80186f2:	7dfb      	ldrb	r3, [r7, #23]
 80186f4:	005b      	lsls	r3, r3, #1
 80186f6:	4619      	mov	r1, r3
 80186f8:	68bb      	ldr	r3, [r7, #8]
 80186fa:	440b      	add	r3, r1
 80186fc:	3230      	adds	r2, #48	; 0x30
 80186fe:	b2d2      	uxtb	r2, r2
 8018700:	701a      	strb	r2, [r3, #0]
 8018702:	e00a      	b.n	801871a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	0f1b      	lsrs	r3, r3, #28
 8018708:	b2da      	uxtb	r2, r3
 801870a:	7dfb      	ldrb	r3, [r7, #23]
 801870c:	005b      	lsls	r3, r3, #1
 801870e:	4619      	mov	r1, r3
 8018710:	68bb      	ldr	r3, [r7, #8]
 8018712:	440b      	add	r3, r1
 8018714:	3237      	adds	r2, #55	; 0x37
 8018716:	b2d2      	uxtb	r2, r2
 8018718:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	011b      	lsls	r3, r3, #4
 801871e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018720:	7dfb      	ldrb	r3, [r7, #23]
 8018722:	005b      	lsls	r3, r3, #1
 8018724:	3301      	adds	r3, #1
 8018726:	68ba      	ldr	r2, [r7, #8]
 8018728:	4413      	add	r3, r2
 801872a:	2200      	movs	r2, #0
 801872c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801872e:	7dfb      	ldrb	r3, [r7, #23]
 8018730:	3301      	adds	r3, #1
 8018732:	75fb      	strb	r3, [r7, #23]
 8018734:	7dfa      	ldrb	r2, [r7, #23]
 8018736:	79fb      	ldrb	r3, [r7, #7]
 8018738:	429a      	cmp	r2, r3
 801873a:	d3d3      	bcc.n	80186e4 <IntToUnicode+0x18>
  }
}
 801873c:	bf00      	nop
 801873e:	bf00      	nop
 8018740:	371c      	adds	r7, #28
 8018742:	46bd      	mov	sp, r7
 8018744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018748:	4770      	bx	lr
	...

0801874c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b08a      	sub	sp, #40	; 0x28
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018754:	f107 0314 	add.w	r3, r7, #20
 8018758:	2200      	movs	r2, #0
 801875a:	601a      	str	r2, [r3, #0]
 801875c:	605a      	str	r2, [r3, #4]
 801875e:	609a      	str	r2, [r3, #8]
 8018760:	60da      	str	r2, [r3, #12]
 8018762:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801876c:	d13a      	bne.n	80187e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801876e:	2300      	movs	r3, #0
 8018770:	613b      	str	r3, [r7, #16]
 8018772:	4b1e      	ldr	r3, [pc, #120]	; (80187ec <HAL_PCD_MspInit+0xa0>)
 8018774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018776:	4a1d      	ldr	r2, [pc, #116]	; (80187ec <HAL_PCD_MspInit+0xa0>)
 8018778:	f043 0301 	orr.w	r3, r3, #1
 801877c:	6313      	str	r3, [r2, #48]	; 0x30
 801877e:	4b1b      	ldr	r3, [pc, #108]	; (80187ec <HAL_PCD_MspInit+0xa0>)
 8018780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018782:	f003 0301 	and.w	r3, r3, #1
 8018786:	613b      	str	r3, [r7, #16]
 8018788:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801878a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801878e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018790:	2302      	movs	r3, #2
 8018792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018794:	2300      	movs	r3, #0
 8018796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018798:	2303      	movs	r3, #3
 801879a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801879c:	230a      	movs	r3, #10
 801879e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80187a0:	f107 0314 	add.w	r3, r7, #20
 80187a4:	4619      	mov	r1, r3
 80187a6:	4812      	ldr	r0, [pc, #72]	; (80187f0 <HAL_PCD_MspInit+0xa4>)
 80187a8:	f7ec fff8 	bl	800579c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80187ac:	4b0f      	ldr	r3, [pc, #60]	; (80187ec <HAL_PCD_MspInit+0xa0>)
 80187ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187b0:	4a0e      	ldr	r2, [pc, #56]	; (80187ec <HAL_PCD_MspInit+0xa0>)
 80187b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187b6:	6353      	str	r3, [r2, #52]	; 0x34
 80187b8:	2300      	movs	r3, #0
 80187ba:	60fb      	str	r3, [r7, #12]
 80187bc:	4b0b      	ldr	r3, [pc, #44]	; (80187ec <HAL_PCD_MspInit+0xa0>)
 80187be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187c0:	4a0a      	ldr	r2, [pc, #40]	; (80187ec <HAL_PCD_MspInit+0xa0>)
 80187c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80187c6:	6453      	str	r3, [r2, #68]	; 0x44
 80187c8:	4b08      	ldr	r3, [pc, #32]	; (80187ec <HAL_PCD_MspInit+0xa0>)
 80187ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80187d0:	60fb      	str	r3, [r7, #12]
 80187d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80187d4:	2200      	movs	r2, #0
 80187d6:	2100      	movs	r1, #0
 80187d8:	2043      	movs	r0, #67	; 0x43
 80187da:	f7ec ff8c 	bl	80056f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80187de:	2043      	movs	r0, #67	; 0x43
 80187e0:	f7ec ffa5 	bl	800572e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80187e4:	bf00      	nop
 80187e6:	3728      	adds	r7, #40	; 0x28
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}
 80187ec:	40023800 	.word	0x40023800
 80187f0:	40020000 	.word	0x40020000

080187f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018808:	4619      	mov	r1, r3
 801880a:	4610      	mov	r0, r2
 801880c:	f7f2 f81b 	bl	800a846 <USBD_LL_SetupStage>
}
 8018810:	bf00      	nop
 8018812:	3708      	adds	r7, #8
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}

08018818 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b082      	sub	sp, #8
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
 8018820:	460b      	mov	r3, r1
 8018822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801882a:	78fa      	ldrb	r2, [r7, #3]
 801882c:	6879      	ldr	r1, [r7, #4]
 801882e:	4613      	mov	r3, r2
 8018830:	00db      	lsls	r3, r3, #3
 8018832:	4413      	add	r3, r2
 8018834:	009b      	lsls	r3, r3, #2
 8018836:	440b      	add	r3, r1
 8018838:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801883c:	681a      	ldr	r2, [r3, #0]
 801883e:	78fb      	ldrb	r3, [r7, #3]
 8018840:	4619      	mov	r1, r3
 8018842:	f7f2 f855 	bl	800a8f0 <USBD_LL_DataOutStage>
}
 8018846:	bf00      	nop
 8018848:	3708      	adds	r7, #8
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}

0801884e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801884e:	b580      	push	{r7, lr}
 8018850:	b082      	sub	sp, #8
 8018852:	af00      	add	r7, sp, #0
 8018854:	6078      	str	r0, [r7, #4]
 8018856:	460b      	mov	r3, r1
 8018858:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018860:	78fa      	ldrb	r2, [r7, #3]
 8018862:	6879      	ldr	r1, [r7, #4]
 8018864:	4613      	mov	r3, r2
 8018866:	00db      	lsls	r3, r3, #3
 8018868:	4413      	add	r3, r2
 801886a:	009b      	lsls	r3, r3, #2
 801886c:	440b      	add	r3, r1
 801886e:	334c      	adds	r3, #76	; 0x4c
 8018870:	681a      	ldr	r2, [r3, #0]
 8018872:	78fb      	ldrb	r3, [r7, #3]
 8018874:	4619      	mov	r1, r3
 8018876:	f7f2 f8ee 	bl	800aa56 <USBD_LL_DataInStage>
}
 801887a:	bf00      	nop
 801887c:	3708      	adds	r7, #8
 801887e:	46bd      	mov	sp, r7
 8018880:	bd80      	pop	{r7, pc}

08018882 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018882:	b580      	push	{r7, lr}
 8018884:	b082      	sub	sp, #8
 8018886:	af00      	add	r7, sp, #0
 8018888:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018890:	4618      	mov	r0, r3
 8018892:	f7f2 fa22 	bl	800acda <USBD_LL_SOF>
}
 8018896:	bf00      	nop
 8018898:	3708      	adds	r7, #8
 801889a:	46bd      	mov	sp, r7
 801889c:	bd80      	pop	{r7, pc}

0801889e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801889e:	b580      	push	{r7, lr}
 80188a0:	b084      	sub	sp, #16
 80188a2:	af00      	add	r7, sp, #0
 80188a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80188a6:	2301      	movs	r3, #1
 80188a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	68db      	ldr	r3, [r3, #12]
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d102      	bne.n	80188b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80188b2:	2300      	movs	r3, #0
 80188b4:	73fb      	strb	r3, [r7, #15]
 80188b6:	e008      	b.n	80188ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	68db      	ldr	r3, [r3, #12]
 80188bc:	2b02      	cmp	r3, #2
 80188be:	d102      	bne.n	80188c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80188c0:	2301      	movs	r3, #1
 80188c2:	73fb      	strb	r3, [r7, #15]
 80188c4:	e001      	b.n	80188ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80188c6:	f7eb fd7b 	bl	80043c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188d0:	7bfa      	ldrb	r2, [r7, #15]
 80188d2:	4611      	mov	r1, r2
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7f2 f9c2 	bl	800ac5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7f2 f96a 	bl	800abba <USBD_LL_Reset>
}
 80188e6:	bf00      	nop
 80188e8:	3710      	adds	r7, #16
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}
	...

080188f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b082      	sub	sp, #8
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188fe:	4618      	mov	r0, r3
 8018900:	f7f2 f9bd 	bl	800ac7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	687a      	ldr	r2, [r7, #4]
 8018910:	6812      	ldr	r2, [r2, #0]
 8018912:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018916:	f043 0301 	orr.w	r3, r3, #1
 801891a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	6a1b      	ldr	r3, [r3, #32]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d005      	beq.n	8018930 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018924:	4b04      	ldr	r3, [pc, #16]	; (8018938 <HAL_PCD_SuspendCallback+0x48>)
 8018926:	691b      	ldr	r3, [r3, #16]
 8018928:	4a03      	ldr	r2, [pc, #12]	; (8018938 <HAL_PCD_SuspendCallback+0x48>)
 801892a:	f043 0306 	orr.w	r3, r3, #6
 801892e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018930:	bf00      	nop
 8018932:	3708      	adds	r7, #8
 8018934:	46bd      	mov	sp, r7
 8018936:	bd80      	pop	{r7, pc}
 8018938:	e000ed00 	.word	0xe000ed00

0801893c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801894a:	4618      	mov	r0, r3
 801894c:	f7f2 f9ad 	bl	800acaa <USBD_LL_Resume>
}
 8018950:	bf00      	nop
 8018952:	3708      	adds	r7, #8
 8018954:	46bd      	mov	sp, r7
 8018956:	bd80      	pop	{r7, pc}

08018958 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b082      	sub	sp, #8
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
 8018960:	460b      	mov	r3, r1
 8018962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801896a:	78fa      	ldrb	r2, [r7, #3]
 801896c:	4611      	mov	r1, r2
 801896e:	4618      	mov	r0, r3
 8018970:	f7f2 fa05 	bl	800ad7e <USBD_LL_IsoOUTIncomplete>
}
 8018974:	bf00      	nop
 8018976:	3708      	adds	r7, #8
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}

0801897c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b082      	sub	sp, #8
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
 8018984:	460b      	mov	r3, r1
 8018986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801898e:	78fa      	ldrb	r2, [r7, #3]
 8018990:	4611      	mov	r1, r2
 8018992:	4618      	mov	r0, r3
 8018994:	f7f2 f9c1 	bl	800ad1a <USBD_LL_IsoINIncomplete>
}
 8018998:	bf00      	nop
 801899a:	3708      	adds	r7, #8
 801899c:	46bd      	mov	sp, r7
 801899e:	bd80      	pop	{r7, pc}

080189a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b082      	sub	sp, #8
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7f2 fa17 	bl	800ade2 <USBD_LL_DevConnected>
}
 80189b4:	bf00      	nop
 80189b6:	3708      	adds	r7, #8
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}

080189bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b082      	sub	sp, #8
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7f2 fa14 	bl	800adf8 <USBD_LL_DevDisconnected>
}
 80189d0:	bf00      	nop
 80189d2:	3708      	adds	r7, #8
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd80      	pop	{r7, pc}

080189d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b082      	sub	sp, #8
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	781b      	ldrb	r3, [r3, #0]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d13c      	bne.n	8018a62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80189e8:	4a20      	ldr	r2, [pc, #128]	; (8018a6c <USBD_LL_Init+0x94>)
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	4a1e      	ldr	r2, [pc, #120]	; (8018a6c <USBD_LL_Init+0x94>)
 80189f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80189f8:	4b1c      	ldr	r3, [pc, #112]	; (8018a6c <USBD_LL_Init+0x94>)
 80189fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80189fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018a00:	4b1a      	ldr	r3, [pc, #104]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a02:	2204      	movs	r2, #4
 8018a04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018a06:	4b19      	ldr	r3, [pc, #100]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a08:	2202      	movs	r2, #2
 8018a0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018a0c:	4b17      	ldr	r3, [pc, #92]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a0e:	2200      	movs	r2, #0
 8018a10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018a12:	4b16      	ldr	r3, [pc, #88]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a14:	2202      	movs	r2, #2
 8018a16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018a18:	4b14      	ldr	r3, [pc, #80]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018a1e:	4b13      	ldr	r3, [pc, #76]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a20:	2200      	movs	r2, #0
 8018a22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018a24:	4b11      	ldr	r3, [pc, #68]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a26:	2200      	movs	r2, #0
 8018a28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018a2a:	4b10      	ldr	r3, [pc, #64]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018a30:	4b0e      	ldr	r3, [pc, #56]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a32:	2200      	movs	r2, #0
 8018a34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018a36:	480d      	ldr	r0, [pc, #52]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a38:	f7ed f898 	bl	8005b6c <HAL_PCD_Init>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d001      	beq.n	8018a46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018a42:	f7eb fcbd 	bl	80043c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018a46:	2180      	movs	r1, #128	; 0x80
 8018a48:	4808      	ldr	r0, [pc, #32]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a4a:	f7ee faf0 	bl	800702e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018a4e:	2240      	movs	r2, #64	; 0x40
 8018a50:	2100      	movs	r1, #0
 8018a52:	4806      	ldr	r0, [pc, #24]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a54:	f7ee faa4 	bl	8006fa0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018a58:	2280      	movs	r2, #128	; 0x80
 8018a5a:	2101      	movs	r1, #1
 8018a5c:	4803      	ldr	r0, [pc, #12]	; (8018a6c <USBD_LL_Init+0x94>)
 8018a5e:	f7ee fa9f 	bl	8006fa0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018a62:	2300      	movs	r3, #0
}
 8018a64:	4618      	mov	r0, r3
 8018a66:	3708      	adds	r7, #8
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	bd80      	pop	{r7, pc}
 8018a6c:	200043f0 	.word	0x200043f0

08018a70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b084      	sub	sp, #16
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a78:	2300      	movs	r3, #0
 8018a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018a86:	4618      	mov	r0, r3
 8018a88:	f7ed f98d 	bl	8005da6 <HAL_PCD_Start>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a90:	7bfb      	ldrb	r3, [r7, #15]
 8018a92:	4618      	mov	r0, r3
 8018a94:	f000 f942 	bl	8018d1c <USBD_Get_USB_Status>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	3710      	adds	r7, #16
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}

08018aa6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018aa6:	b580      	push	{r7, lr}
 8018aa8:	b084      	sub	sp, #16
 8018aaa:	af00      	add	r7, sp, #0
 8018aac:	6078      	str	r0, [r7, #4]
 8018aae:	4608      	mov	r0, r1
 8018ab0:	4611      	mov	r1, r2
 8018ab2:	461a      	mov	r2, r3
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	70fb      	strb	r3, [r7, #3]
 8018ab8:	460b      	mov	r3, r1
 8018aba:	70bb      	strb	r3, [r7, #2]
 8018abc:	4613      	mov	r3, r2
 8018abe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018ace:	78bb      	ldrb	r3, [r7, #2]
 8018ad0:	883a      	ldrh	r2, [r7, #0]
 8018ad2:	78f9      	ldrb	r1, [r7, #3]
 8018ad4:	f7ed fe5e 	bl	8006794 <HAL_PCD_EP_Open>
 8018ad8:	4603      	mov	r3, r0
 8018ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018adc:	7bfb      	ldrb	r3, [r7, #15]
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f000 f91c 	bl	8018d1c <USBD_Get_USB_Status>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8018aea:	4618      	mov	r0, r3
 8018aec:	3710      	adds	r7, #16
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd80      	pop	{r7, pc}

08018af2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018af2:	b580      	push	{r7, lr}
 8018af4:	b084      	sub	sp, #16
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	6078      	str	r0, [r7, #4]
 8018afa:	460b      	mov	r3, r1
 8018afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018afe:	2300      	movs	r3, #0
 8018b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b02:	2300      	movs	r3, #0
 8018b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b0c:	78fa      	ldrb	r2, [r7, #3]
 8018b0e:	4611      	mov	r1, r2
 8018b10:	4618      	mov	r0, r3
 8018b12:	f7ed fea7 	bl	8006864 <HAL_PCD_EP_Close>
 8018b16:	4603      	mov	r3, r0
 8018b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b1a:	7bfb      	ldrb	r3, [r7, #15]
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	f000 f8fd 	bl	8018d1c <USBD_Get_USB_Status>
 8018b22:	4603      	mov	r3, r0
 8018b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3710      	adds	r7, #16
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}

08018b30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b084      	sub	sp, #16
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	460b      	mov	r3, r1
 8018b3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b40:	2300      	movs	r3, #0
 8018b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b4a:	78fa      	ldrb	r2, [r7, #3]
 8018b4c:	4611      	mov	r1, r2
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7ed ff7f 	bl	8006a52 <HAL_PCD_EP_SetStall>
 8018b54:	4603      	mov	r3, r0
 8018b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b58:	7bfb      	ldrb	r3, [r7, #15]
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	f000 f8de 	bl	8018d1c <USBD_Get_USB_Status>
 8018b60:	4603      	mov	r3, r0
 8018b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b66:	4618      	mov	r0, r3
 8018b68:	3710      	adds	r7, #16
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	bd80      	pop	{r7, pc}

08018b6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b6e:	b580      	push	{r7, lr}
 8018b70:	b084      	sub	sp, #16
 8018b72:	af00      	add	r7, sp, #0
 8018b74:	6078      	str	r0, [r7, #4]
 8018b76:	460b      	mov	r3, r1
 8018b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b7e:	2300      	movs	r3, #0
 8018b80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018b88:	78fa      	ldrb	r2, [r7, #3]
 8018b8a:	4611      	mov	r1, r2
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	f7ed ffc4 	bl	8006b1a <HAL_PCD_EP_ClrStall>
 8018b92:	4603      	mov	r3, r0
 8018b94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b96:	7bfb      	ldrb	r3, [r7, #15]
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f000 f8bf 	bl	8018d1c <USBD_Get_USB_Status>
 8018b9e:	4603      	mov	r3, r0
 8018ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	3710      	adds	r7, #16
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	bd80      	pop	{r7, pc}

08018bac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018bac:	b480      	push	{r7}
 8018bae:	b085      	sub	sp, #20
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
 8018bb4:	460b      	mov	r3, r1
 8018bb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018bbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	da0b      	bge.n	8018be0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018bc8:	78fb      	ldrb	r3, [r7, #3]
 8018bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018bce:	68f9      	ldr	r1, [r7, #12]
 8018bd0:	4613      	mov	r3, r2
 8018bd2:	00db      	lsls	r3, r3, #3
 8018bd4:	4413      	add	r3, r2
 8018bd6:	009b      	lsls	r3, r3, #2
 8018bd8:	440b      	add	r3, r1
 8018bda:	333e      	adds	r3, #62	; 0x3e
 8018bdc:	781b      	ldrb	r3, [r3, #0]
 8018bde:	e00b      	b.n	8018bf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018be0:	78fb      	ldrb	r3, [r7, #3]
 8018be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018be6:	68f9      	ldr	r1, [r7, #12]
 8018be8:	4613      	mov	r3, r2
 8018bea:	00db      	lsls	r3, r3, #3
 8018bec:	4413      	add	r3, r2
 8018bee:	009b      	lsls	r3, r3, #2
 8018bf0:	440b      	add	r3, r1
 8018bf2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018bf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	3714      	adds	r7, #20
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c02:	4770      	bx	lr

08018c04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b084      	sub	sp, #16
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
 8018c0c:	460b      	mov	r3, r1
 8018c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c10:	2300      	movs	r3, #0
 8018c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c14:	2300      	movs	r3, #0
 8018c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018c1e:	78fa      	ldrb	r2, [r7, #3]
 8018c20:	4611      	mov	r1, r2
 8018c22:	4618      	mov	r0, r3
 8018c24:	f7ed fd91 	bl	800674a <HAL_PCD_SetAddress>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c2c:	7bfb      	ldrb	r3, [r7, #15]
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f000 f874 	bl	8018d1c <USBD_Get_USB_Status>
 8018c34:	4603      	mov	r3, r0
 8018c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	3710      	adds	r7, #16
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	bd80      	pop	{r7, pc}

08018c42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018c42:	b580      	push	{r7, lr}
 8018c44:	b086      	sub	sp, #24
 8018c46:	af00      	add	r7, sp, #0
 8018c48:	60f8      	str	r0, [r7, #12]
 8018c4a:	607a      	str	r2, [r7, #4]
 8018c4c:	603b      	str	r3, [r7, #0]
 8018c4e:	460b      	mov	r3, r1
 8018c50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c52:	2300      	movs	r3, #0
 8018c54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c56:	2300      	movs	r3, #0
 8018c58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018c60:	7af9      	ldrb	r1, [r7, #11]
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	687a      	ldr	r2, [r7, #4]
 8018c66:	f7ed feaa 	bl	80069be <HAL_PCD_EP_Transmit>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c6e:	7dfb      	ldrb	r3, [r7, #23]
 8018c70:	4618      	mov	r0, r3
 8018c72:	f000 f853 	bl	8018d1c <USBD_Get_USB_Status>
 8018c76:	4603      	mov	r3, r0
 8018c78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018c7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3718      	adds	r7, #24
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}

08018c84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b086      	sub	sp, #24
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	60f8      	str	r0, [r7, #12]
 8018c8c:	607a      	str	r2, [r7, #4]
 8018c8e:	603b      	str	r3, [r7, #0]
 8018c90:	460b      	mov	r3, r1
 8018c92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c94:	2300      	movs	r3, #0
 8018c96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c98:	2300      	movs	r3, #0
 8018c9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018ca2:	7af9      	ldrb	r1, [r7, #11]
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	687a      	ldr	r2, [r7, #4]
 8018ca8:	f7ed fe26 	bl	80068f8 <HAL_PCD_EP_Receive>
 8018cac:	4603      	mov	r3, r0
 8018cae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018cb0:	7dfb      	ldrb	r3, [r7, #23]
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	f000 f832 	bl	8018d1c <USBD_Get_USB_Status>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018cbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	3718      	adds	r7, #24
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	bd80      	pop	{r7, pc}

08018cc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018cc6:	b580      	push	{r7, lr}
 8018cc8:	b082      	sub	sp, #8
 8018cca:	af00      	add	r7, sp, #0
 8018ccc:	6078      	str	r0, [r7, #4]
 8018cce:	460b      	mov	r3, r1
 8018cd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018cd8:	78fa      	ldrb	r2, [r7, #3]
 8018cda:	4611      	mov	r1, r2
 8018cdc:	4618      	mov	r0, r3
 8018cde:	f7ed fe56 	bl	800698e <HAL_PCD_EP_GetRxCount>
 8018ce2:	4603      	mov	r3, r0
}
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	3708      	adds	r7, #8
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}

08018cec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018cec:	b480      	push	{r7}
 8018cee:	b083      	sub	sp, #12
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018cf4:	4b03      	ldr	r3, [pc, #12]	; (8018d04 <USBD_static_malloc+0x18>)
}
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	370c      	adds	r7, #12
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d00:	4770      	bx	lr
 8018d02:	bf00      	nop
 8018d04:	200048fc 	.word	0x200048fc

08018d08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018d08:	b480      	push	{r7}
 8018d0a:	b083      	sub	sp, #12
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]

}
 8018d10:	bf00      	nop
 8018d12:	370c      	adds	r7, #12
 8018d14:	46bd      	mov	sp, r7
 8018d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1a:	4770      	bx	lr

08018d1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	b085      	sub	sp, #20
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	4603      	mov	r3, r0
 8018d24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d26:	2300      	movs	r3, #0
 8018d28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018d2a:	79fb      	ldrb	r3, [r7, #7]
 8018d2c:	2b03      	cmp	r3, #3
 8018d2e:	d817      	bhi.n	8018d60 <USBD_Get_USB_Status+0x44>
 8018d30:	a201      	add	r2, pc, #4	; (adr r2, 8018d38 <USBD_Get_USB_Status+0x1c>)
 8018d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d36:	bf00      	nop
 8018d38:	08018d49 	.word	0x08018d49
 8018d3c:	08018d4f 	.word	0x08018d4f
 8018d40:	08018d55 	.word	0x08018d55
 8018d44:	08018d5b 	.word	0x08018d5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018d48:	2300      	movs	r3, #0
 8018d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8018d4c:	e00b      	b.n	8018d66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018d4e:	2303      	movs	r3, #3
 8018d50:	73fb      	strb	r3, [r7, #15]
    break;
 8018d52:	e008      	b.n	8018d66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018d54:	2301      	movs	r3, #1
 8018d56:	73fb      	strb	r3, [r7, #15]
    break;
 8018d58:	e005      	b.n	8018d66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018d5a:	2303      	movs	r3, #3
 8018d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8018d5e:	e002      	b.n	8018d66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018d60:	2303      	movs	r3, #3
 8018d62:	73fb      	strb	r3, [r7, #15]
    break;
 8018d64:	bf00      	nop
  }
  return usb_status;
 8018d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d68:	4618      	mov	r0, r3
 8018d6a:	3714      	adds	r7, #20
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d72:	4770      	bx	lr

08018d74 <_ZdaPv>:
 8018d74:	f000 b813 	b.w	8018d9e <_ZdlPv>

08018d78 <_Znwj>:
 8018d78:	2801      	cmp	r0, #1
 8018d7a:	bf38      	it	cc
 8018d7c:	2001      	movcc	r0, #1
 8018d7e:	b510      	push	{r4, lr}
 8018d80:	4604      	mov	r4, r0
 8018d82:	4620      	mov	r0, r4
 8018d84:	f001 fb94 	bl	801a4b0 <malloc>
 8018d88:	b930      	cbnz	r0, 8018d98 <_Znwj+0x20>
 8018d8a:	f000 f80b 	bl	8018da4 <_ZSt15get_new_handlerv>
 8018d8e:	b908      	cbnz	r0, 8018d94 <_Znwj+0x1c>
 8018d90:	f001 fb20 	bl	801a3d4 <abort>
 8018d94:	4780      	blx	r0
 8018d96:	e7f4      	b.n	8018d82 <_Znwj+0xa>
 8018d98:	bd10      	pop	{r4, pc}

08018d9a <_Znaj>:
 8018d9a:	f7ff bfed 	b.w	8018d78 <_Znwj>

08018d9e <_ZdlPv>:
 8018d9e:	f001 bb8f 	b.w	801a4c0 <free>
	...

08018da4 <_ZSt15get_new_handlerv>:
 8018da4:	4b02      	ldr	r3, [pc, #8]	; (8018db0 <_ZSt15get_new_handlerv+0xc>)
 8018da6:	6818      	ldr	r0, [r3, #0]
 8018da8:	f3bf 8f5b 	dmb	ish
 8018dac:	4770      	bx	lr
 8018dae:	bf00      	nop
 8018db0:	20004b1c 	.word	0x20004b1c
 8018db4:	00000000 	.word	0x00000000

08018db8 <floor>:
 8018db8:	ec51 0b10 	vmov	r0, r1, d0
 8018dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018dc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018dc8:	2e13      	cmp	r6, #19
 8018dca:	ee10 5a10 	vmov	r5, s0
 8018dce:	ee10 8a10 	vmov	r8, s0
 8018dd2:	460c      	mov	r4, r1
 8018dd4:	dc32      	bgt.n	8018e3c <floor+0x84>
 8018dd6:	2e00      	cmp	r6, #0
 8018dd8:	da14      	bge.n	8018e04 <floor+0x4c>
 8018dda:	a333      	add	r3, pc, #204	; (adr r3, 8018ea8 <floor+0xf0>)
 8018ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de0:	f7e7 fa5e 	bl	80002a0 <__adddf3>
 8018de4:	2200      	movs	r2, #0
 8018de6:	2300      	movs	r3, #0
 8018de8:	f7e7 fea0 	bl	8000b2c <__aeabi_dcmpgt>
 8018dec:	b138      	cbz	r0, 8018dfe <floor+0x46>
 8018dee:	2c00      	cmp	r4, #0
 8018df0:	da57      	bge.n	8018ea2 <floor+0xea>
 8018df2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018df6:	431d      	orrs	r5, r3
 8018df8:	d001      	beq.n	8018dfe <floor+0x46>
 8018dfa:	4c2d      	ldr	r4, [pc, #180]	; (8018eb0 <floor+0xf8>)
 8018dfc:	2500      	movs	r5, #0
 8018dfe:	4621      	mov	r1, r4
 8018e00:	4628      	mov	r0, r5
 8018e02:	e025      	b.n	8018e50 <floor+0x98>
 8018e04:	4f2b      	ldr	r7, [pc, #172]	; (8018eb4 <floor+0xfc>)
 8018e06:	4137      	asrs	r7, r6
 8018e08:	ea01 0307 	and.w	r3, r1, r7
 8018e0c:	4303      	orrs	r3, r0
 8018e0e:	d01f      	beq.n	8018e50 <floor+0x98>
 8018e10:	a325      	add	r3, pc, #148	; (adr r3, 8018ea8 <floor+0xf0>)
 8018e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e16:	f7e7 fa43 	bl	80002a0 <__adddf3>
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	f7e7 fe85 	bl	8000b2c <__aeabi_dcmpgt>
 8018e22:	2800      	cmp	r0, #0
 8018e24:	d0eb      	beq.n	8018dfe <floor+0x46>
 8018e26:	2c00      	cmp	r4, #0
 8018e28:	bfbe      	ittt	lt
 8018e2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018e2e:	fa43 f606 	asrlt.w	r6, r3, r6
 8018e32:	19a4      	addlt	r4, r4, r6
 8018e34:	ea24 0407 	bic.w	r4, r4, r7
 8018e38:	2500      	movs	r5, #0
 8018e3a:	e7e0      	b.n	8018dfe <floor+0x46>
 8018e3c:	2e33      	cmp	r6, #51	; 0x33
 8018e3e:	dd0b      	ble.n	8018e58 <floor+0xa0>
 8018e40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018e44:	d104      	bne.n	8018e50 <floor+0x98>
 8018e46:	ee10 2a10 	vmov	r2, s0
 8018e4a:	460b      	mov	r3, r1
 8018e4c:	f7e7 fa28 	bl	80002a0 <__adddf3>
 8018e50:	ec41 0b10 	vmov	d0, r0, r1
 8018e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e58:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e60:	fa23 f707 	lsr.w	r7, r3, r7
 8018e64:	4207      	tst	r7, r0
 8018e66:	d0f3      	beq.n	8018e50 <floor+0x98>
 8018e68:	a30f      	add	r3, pc, #60	; (adr r3, 8018ea8 <floor+0xf0>)
 8018e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e6e:	f7e7 fa17 	bl	80002a0 <__adddf3>
 8018e72:	2200      	movs	r2, #0
 8018e74:	2300      	movs	r3, #0
 8018e76:	f7e7 fe59 	bl	8000b2c <__aeabi_dcmpgt>
 8018e7a:	2800      	cmp	r0, #0
 8018e7c:	d0bf      	beq.n	8018dfe <floor+0x46>
 8018e7e:	2c00      	cmp	r4, #0
 8018e80:	da02      	bge.n	8018e88 <floor+0xd0>
 8018e82:	2e14      	cmp	r6, #20
 8018e84:	d103      	bne.n	8018e8e <floor+0xd6>
 8018e86:	3401      	adds	r4, #1
 8018e88:	ea25 0507 	bic.w	r5, r5, r7
 8018e8c:	e7b7      	b.n	8018dfe <floor+0x46>
 8018e8e:	2301      	movs	r3, #1
 8018e90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018e94:	fa03 f606 	lsl.w	r6, r3, r6
 8018e98:	4435      	add	r5, r6
 8018e9a:	4545      	cmp	r5, r8
 8018e9c:	bf38      	it	cc
 8018e9e:	18e4      	addcc	r4, r4, r3
 8018ea0:	e7f2      	b.n	8018e88 <floor+0xd0>
 8018ea2:	2500      	movs	r5, #0
 8018ea4:	462c      	mov	r4, r5
 8018ea6:	e7aa      	b.n	8018dfe <floor+0x46>
 8018ea8:	8800759c 	.word	0x8800759c
 8018eac:	7e37e43c 	.word	0x7e37e43c
 8018eb0:	bff00000 	.word	0xbff00000
 8018eb4:	000fffff 	.word	0x000fffff

08018eb8 <frexp>:
 8018eb8:	b570      	push	{r4, r5, r6, lr}
 8018eba:	2100      	movs	r1, #0
 8018ebc:	ec55 4b10 	vmov	r4, r5, d0
 8018ec0:	6001      	str	r1, [r0, #0]
 8018ec2:	4916      	ldr	r1, [pc, #88]	; (8018f1c <frexp+0x64>)
 8018ec4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8018ec8:	428a      	cmp	r2, r1
 8018eca:	4606      	mov	r6, r0
 8018ecc:	462b      	mov	r3, r5
 8018ece:	dc22      	bgt.n	8018f16 <frexp+0x5e>
 8018ed0:	ee10 1a10 	vmov	r1, s0
 8018ed4:	4311      	orrs	r1, r2
 8018ed6:	d01e      	beq.n	8018f16 <frexp+0x5e>
 8018ed8:	4911      	ldr	r1, [pc, #68]	; (8018f20 <frexp+0x68>)
 8018eda:	4029      	ands	r1, r5
 8018edc:	b969      	cbnz	r1, 8018efa <frexp+0x42>
 8018ede:	4b11      	ldr	r3, [pc, #68]	; (8018f24 <frexp+0x6c>)
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	ee10 0a10 	vmov	r0, s0
 8018ee6:	4629      	mov	r1, r5
 8018ee8:	f7e7 fb90 	bl	800060c <__aeabi_dmul>
 8018eec:	460b      	mov	r3, r1
 8018eee:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018ef2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8018ef6:	4604      	mov	r4, r0
 8018ef8:	6031      	str	r1, [r6, #0]
 8018efa:	6831      	ldr	r1, [r6, #0]
 8018efc:	1512      	asrs	r2, r2, #20
 8018efe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018f02:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8018f06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018f0a:	440a      	add	r2, r1
 8018f0c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018f10:	6032      	str	r2, [r6, #0]
 8018f12:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8018f16:	ec45 4b10 	vmov	d0, r4, r5
 8018f1a:	bd70      	pop	{r4, r5, r6, pc}
 8018f1c:	7fefffff 	.word	0x7fefffff
 8018f20:	7ff00000 	.word	0x7ff00000
 8018f24:	43500000 	.word	0x43500000

08018f28 <round>:
 8018f28:	ec51 0b10 	vmov	r0, r1, d0
 8018f2c:	b570      	push	{r4, r5, r6, lr}
 8018f2e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8018f32:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8018f36:	2c13      	cmp	r4, #19
 8018f38:	ee10 2a10 	vmov	r2, s0
 8018f3c:	460b      	mov	r3, r1
 8018f3e:	dc19      	bgt.n	8018f74 <round+0x4c>
 8018f40:	2c00      	cmp	r4, #0
 8018f42:	da09      	bge.n	8018f58 <round+0x30>
 8018f44:	3401      	adds	r4, #1
 8018f46:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8018f4a:	d103      	bne.n	8018f54 <round+0x2c>
 8018f4c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8018f50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018f54:	2200      	movs	r2, #0
 8018f56:	e028      	b.n	8018faa <round+0x82>
 8018f58:	4d15      	ldr	r5, [pc, #84]	; (8018fb0 <round+0x88>)
 8018f5a:	4125      	asrs	r5, r4
 8018f5c:	ea01 0605 	and.w	r6, r1, r5
 8018f60:	4332      	orrs	r2, r6
 8018f62:	d00e      	beq.n	8018f82 <round+0x5a>
 8018f64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018f68:	fa42 f404 	asr.w	r4, r2, r4
 8018f6c:	4423      	add	r3, r4
 8018f6e:	ea23 0305 	bic.w	r3, r3, r5
 8018f72:	e7ef      	b.n	8018f54 <round+0x2c>
 8018f74:	2c33      	cmp	r4, #51	; 0x33
 8018f76:	dd07      	ble.n	8018f88 <round+0x60>
 8018f78:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8018f7c:	d101      	bne.n	8018f82 <round+0x5a>
 8018f7e:	f7e7 f98f 	bl	80002a0 <__adddf3>
 8018f82:	ec41 0b10 	vmov	d0, r0, r1
 8018f86:	bd70      	pop	{r4, r5, r6, pc}
 8018f88:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8018f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8018f90:	40f5      	lsrs	r5, r6
 8018f92:	4228      	tst	r0, r5
 8018f94:	d0f5      	beq.n	8018f82 <round+0x5a>
 8018f96:	2101      	movs	r1, #1
 8018f98:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8018f9c:	fa01 f404 	lsl.w	r4, r1, r4
 8018fa0:	1912      	adds	r2, r2, r4
 8018fa2:	bf28      	it	cs
 8018fa4:	185b      	addcs	r3, r3, r1
 8018fa6:	ea22 0205 	bic.w	r2, r2, r5
 8018faa:	4619      	mov	r1, r3
 8018fac:	4610      	mov	r0, r2
 8018fae:	e7e8      	b.n	8018f82 <round+0x5a>
 8018fb0:	000fffff 	.word	0x000fffff

08018fb4 <roundf>:
 8018fb4:	ee10 0a10 	vmov	r0, s0
 8018fb8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8018fbc:	3a7f      	subs	r2, #127	; 0x7f
 8018fbe:	2a16      	cmp	r2, #22
 8018fc0:	dc15      	bgt.n	8018fee <roundf+0x3a>
 8018fc2:	2a00      	cmp	r2, #0
 8018fc4:	da08      	bge.n	8018fd8 <roundf+0x24>
 8018fc6:	3201      	adds	r2, #1
 8018fc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018fcc:	d101      	bne.n	8018fd2 <roundf+0x1e>
 8018fce:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018fd2:	ee00 3a10 	vmov	s0, r3
 8018fd6:	4770      	bx	lr
 8018fd8:	4907      	ldr	r1, [pc, #28]	; (8018ff8 <roundf+0x44>)
 8018fda:	4111      	asrs	r1, r2
 8018fdc:	4208      	tst	r0, r1
 8018fde:	d0fa      	beq.n	8018fd6 <roundf+0x22>
 8018fe0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8018fe4:	4113      	asrs	r3, r2
 8018fe6:	4403      	add	r3, r0
 8018fe8:	ea23 0301 	bic.w	r3, r3, r1
 8018fec:	e7f1      	b.n	8018fd2 <roundf+0x1e>
 8018fee:	2a80      	cmp	r2, #128	; 0x80
 8018ff0:	d1f1      	bne.n	8018fd6 <roundf+0x22>
 8018ff2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018ff6:	4770      	bx	lr
 8018ff8:	007fffff 	.word	0x007fffff

08018ffc <pow>:
 8018ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ffe:	ed2d 8b02 	vpush	{d8}
 8019002:	eeb0 8a40 	vmov.f32	s16, s0
 8019006:	eef0 8a60 	vmov.f32	s17, s1
 801900a:	ec55 4b11 	vmov	r4, r5, d1
 801900e:	f000 f8e7 	bl	80191e0 <__ieee754_pow>
 8019012:	4622      	mov	r2, r4
 8019014:	462b      	mov	r3, r5
 8019016:	4620      	mov	r0, r4
 8019018:	4629      	mov	r1, r5
 801901a:	ec57 6b10 	vmov	r6, r7, d0
 801901e:	f7e7 fd8f 	bl	8000b40 <__aeabi_dcmpun>
 8019022:	2800      	cmp	r0, #0
 8019024:	d13b      	bne.n	801909e <pow+0xa2>
 8019026:	ec51 0b18 	vmov	r0, r1, d8
 801902a:	2200      	movs	r2, #0
 801902c:	2300      	movs	r3, #0
 801902e:	f7e7 fd55 	bl	8000adc <__aeabi_dcmpeq>
 8019032:	b1b8      	cbz	r0, 8019064 <pow+0x68>
 8019034:	2200      	movs	r2, #0
 8019036:	2300      	movs	r3, #0
 8019038:	4620      	mov	r0, r4
 801903a:	4629      	mov	r1, r5
 801903c:	f7e7 fd4e 	bl	8000adc <__aeabi_dcmpeq>
 8019040:	2800      	cmp	r0, #0
 8019042:	d146      	bne.n	80190d2 <pow+0xd6>
 8019044:	ec45 4b10 	vmov	d0, r4, r5
 8019048:	f001 f91f 	bl	801a28a <finite>
 801904c:	b338      	cbz	r0, 801909e <pow+0xa2>
 801904e:	2200      	movs	r2, #0
 8019050:	2300      	movs	r3, #0
 8019052:	4620      	mov	r0, r4
 8019054:	4629      	mov	r1, r5
 8019056:	f7e7 fd4b 	bl	8000af0 <__aeabi_dcmplt>
 801905a:	b300      	cbz	r0, 801909e <pow+0xa2>
 801905c:	f001 f9e8 	bl	801a430 <__errno>
 8019060:	2322      	movs	r3, #34	; 0x22
 8019062:	e01b      	b.n	801909c <pow+0xa0>
 8019064:	ec47 6b10 	vmov	d0, r6, r7
 8019068:	f001 f90f 	bl	801a28a <finite>
 801906c:	b9e0      	cbnz	r0, 80190a8 <pow+0xac>
 801906e:	eeb0 0a48 	vmov.f32	s0, s16
 8019072:	eef0 0a68 	vmov.f32	s1, s17
 8019076:	f001 f908 	bl	801a28a <finite>
 801907a:	b1a8      	cbz	r0, 80190a8 <pow+0xac>
 801907c:	ec45 4b10 	vmov	d0, r4, r5
 8019080:	f001 f903 	bl	801a28a <finite>
 8019084:	b180      	cbz	r0, 80190a8 <pow+0xac>
 8019086:	4632      	mov	r2, r6
 8019088:	463b      	mov	r3, r7
 801908a:	4630      	mov	r0, r6
 801908c:	4639      	mov	r1, r7
 801908e:	f7e7 fd57 	bl	8000b40 <__aeabi_dcmpun>
 8019092:	2800      	cmp	r0, #0
 8019094:	d0e2      	beq.n	801905c <pow+0x60>
 8019096:	f001 f9cb 	bl	801a430 <__errno>
 801909a:	2321      	movs	r3, #33	; 0x21
 801909c:	6003      	str	r3, [r0, #0]
 801909e:	ecbd 8b02 	vpop	{d8}
 80190a2:	ec47 6b10 	vmov	d0, r6, r7
 80190a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190a8:	2200      	movs	r2, #0
 80190aa:	2300      	movs	r3, #0
 80190ac:	4630      	mov	r0, r6
 80190ae:	4639      	mov	r1, r7
 80190b0:	f7e7 fd14 	bl	8000adc <__aeabi_dcmpeq>
 80190b4:	2800      	cmp	r0, #0
 80190b6:	d0f2      	beq.n	801909e <pow+0xa2>
 80190b8:	eeb0 0a48 	vmov.f32	s0, s16
 80190bc:	eef0 0a68 	vmov.f32	s1, s17
 80190c0:	f001 f8e3 	bl	801a28a <finite>
 80190c4:	2800      	cmp	r0, #0
 80190c6:	d0ea      	beq.n	801909e <pow+0xa2>
 80190c8:	ec45 4b10 	vmov	d0, r4, r5
 80190cc:	f001 f8dd 	bl	801a28a <finite>
 80190d0:	e7c3      	b.n	801905a <pow+0x5e>
 80190d2:	4f01      	ldr	r7, [pc, #4]	; (80190d8 <pow+0xdc>)
 80190d4:	2600      	movs	r6, #0
 80190d6:	e7e2      	b.n	801909e <pow+0xa2>
 80190d8:	3ff00000 	.word	0x3ff00000

080190dc <expf>:
 80190dc:	b508      	push	{r3, lr}
 80190de:	ed2d 8b02 	vpush	{d8}
 80190e2:	eef0 8a40 	vmov.f32	s17, s0
 80190e6:	f000 fe5b 	bl	8019da0 <__ieee754_expf>
 80190ea:	eeb0 8a40 	vmov.f32	s16, s0
 80190ee:	eeb0 0a68 	vmov.f32	s0, s17
 80190f2:	f001 f95b 	bl	801a3ac <finitef>
 80190f6:	b160      	cbz	r0, 8019112 <expf+0x36>
 80190f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019138 <expf+0x5c>
 80190fc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019104:	dd0a      	ble.n	801911c <expf+0x40>
 8019106:	f001 f993 	bl	801a430 <__errno>
 801910a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801913c <expf+0x60>
 801910e:	2322      	movs	r3, #34	; 0x22
 8019110:	6003      	str	r3, [r0, #0]
 8019112:	eeb0 0a48 	vmov.f32	s0, s16
 8019116:	ecbd 8b02 	vpop	{d8}
 801911a:	bd08      	pop	{r3, pc}
 801911c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019140 <expf+0x64>
 8019120:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019128:	d5f3      	bpl.n	8019112 <expf+0x36>
 801912a:	f001 f981 	bl	801a430 <__errno>
 801912e:	2322      	movs	r3, #34	; 0x22
 8019130:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019144 <expf+0x68>
 8019134:	6003      	str	r3, [r0, #0]
 8019136:	e7ec      	b.n	8019112 <expf+0x36>
 8019138:	42b17180 	.word	0x42b17180
 801913c:	7f800000 	.word	0x7f800000
 8019140:	c2cff1b5 	.word	0xc2cff1b5
 8019144:	00000000 	.word	0x00000000

08019148 <log10f>:
 8019148:	b508      	push	{r3, lr}
 801914a:	ed2d 8b02 	vpush	{d8}
 801914e:	eeb0 8a40 	vmov.f32	s16, s0
 8019152:	f000 ffe3 	bl	801a11c <__ieee754_log10f>
 8019156:	eeb4 8a48 	vcmp.f32	s16, s16
 801915a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801915e:	d60f      	bvs.n	8019180 <log10f+0x38>
 8019160:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019168:	d80a      	bhi.n	8019180 <log10f+0x38>
 801916a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801916e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019172:	d108      	bne.n	8019186 <log10f+0x3e>
 8019174:	f001 f95c 	bl	801a430 <__errno>
 8019178:	2322      	movs	r3, #34	; 0x22
 801917a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801919c <log10f+0x54>
 801917e:	6003      	str	r3, [r0, #0]
 8019180:	ecbd 8b02 	vpop	{d8}
 8019184:	bd08      	pop	{r3, pc}
 8019186:	f001 f953 	bl	801a430 <__errno>
 801918a:	ecbd 8b02 	vpop	{d8}
 801918e:	2321      	movs	r3, #33	; 0x21
 8019190:	6003      	str	r3, [r0, #0]
 8019192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019196:	4802      	ldr	r0, [pc, #8]	; (80191a0 <log10f+0x58>)
 8019198:	f001 b916 	b.w	801a3c8 <nanf>
 801919c:	ff800000 	.word	0xff800000
 80191a0:	0801d9fb 	.word	0x0801d9fb

080191a4 <sqrtf>:
 80191a4:	b508      	push	{r3, lr}
 80191a6:	ed2d 8b02 	vpush	{d8}
 80191aa:	eeb0 8a40 	vmov.f32	s16, s0
 80191ae:	f001 f80d 	bl	801a1cc <__ieee754_sqrtf>
 80191b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80191b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ba:	d60c      	bvs.n	80191d6 <sqrtf+0x32>
 80191bc:	eddf 8a07 	vldr	s17, [pc, #28]	; 80191dc <sqrtf+0x38>
 80191c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80191c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191c8:	d505      	bpl.n	80191d6 <sqrtf+0x32>
 80191ca:	f001 f931 	bl	801a430 <__errno>
 80191ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80191d2:	2321      	movs	r3, #33	; 0x21
 80191d4:	6003      	str	r3, [r0, #0]
 80191d6:	ecbd 8b02 	vpop	{d8}
 80191da:	bd08      	pop	{r3, pc}
 80191dc:	00000000 	.word	0x00000000

080191e0 <__ieee754_pow>:
 80191e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e4:	ed2d 8b06 	vpush	{d8-d10}
 80191e8:	b089      	sub	sp, #36	; 0x24
 80191ea:	ed8d 1b00 	vstr	d1, [sp]
 80191ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 80191f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80191f6:	ea58 0102 	orrs.w	r1, r8, r2
 80191fa:	ec57 6b10 	vmov	r6, r7, d0
 80191fe:	d115      	bne.n	801922c <__ieee754_pow+0x4c>
 8019200:	19b3      	adds	r3, r6, r6
 8019202:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8019206:	4152      	adcs	r2, r2
 8019208:	4299      	cmp	r1, r3
 801920a:	4b89      	ldr	r3, [pc, #548]	; (8019430 <__ieee754_pow+0x250>)
 801920c:	4193      	sbcs	r3, r2
 801920e:	f080 84d2 	bcs.w	8019bb6 <__ieee754_pow+0x9d6>
 8019212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019216:	4630      	mov	r0, r6
 8019218:	4639      	mov	r1, r7
 801921a:	f7e7 f841 	bl	80002a0 <__adddf3>
 801921e:	ec41 0b10 	vmov	d0, r0, r1
 8019222:	b009      	add	sp, #36	; 0x24
 8019224:	ecbd 8b06 	vpop	{d8-d10}
 8019228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801922c:	4b81      	ldr	r3, [pc, #516]	; (8019434 <__ieee754_pow+0x254>)
 801922e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019232:	429c      	cmp	r4, r3
 8019234:	ee10 aa10 	vmov	sl, s0
 8019238:	463d      	mov	r5, r7
 801923a:	dc06      	bgt.n	801924a <__ieee754_pow+0x6a>
 801923c:	d101      	bne.n	8019242 <__ieee754_pow+0x62>
 801923e:	2e00      	cmp	r6, #0
 8019240:	d1e7      	bne.n	8019212 <__ieee754_pow+0x32>
 8019242:	4598      	cmp	r8, r3
 8019244:	dc01      	bgt.n	801924a <__ieee754_pow+0x6a>
 8019246:	d10f      	bne.n	8019268 <__ieee754_pow+0x88>
 8019248:	b172      	cbz	r2, 8019268 <__ieee754_pow+0x88>
 801924a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801924e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8019252:	ea55 050a 	orrs.w	r5, r5, sl
 8019256:	d1dc      	bne.n	8019212 <__ieee754_pow+0x32>
 8019258:	e9dd 3200 	ldrd	r3, r2, [sp]
 801925c:	18db      	adds	r3, r3, r3
 801925e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8019262:	4152      	adcs	r2, r2
 8019264:	429d      	cmp	r5, r3
 8019266:	e7d0      	b.n	801920a <__ieee754_pow+0x2a>
 8019268:	2d00      	cmp	r5, #0
 801926a:	da3b      	bge.n	80192e4 <__ieee754_pow+0x104>
 801926c:	4b72      	ldr	r3, [pc, #456]	; (8019438 <__ieee754_pow+0x258>)
 801926e:	4598      	cmp	r8, r3
 8019270:	dc51      	bgt.n	8019316 <__ieee754_pow+0x136>
 8019272:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019276:	4598      	cmp	r8, r3
 8019278:	f340 84ac 	ble.w	8019bd4 <__ieee754_pow+0x9f4>
 801927c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019280:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019284:	2b14      	cmp	r3, #20
 8019286:	dd0f      	ble.n	80192a8 <__ieee754_pow+0xc8>
 8019288:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801928c:	fa22 f103 	lsr.w	r1, r2, r3
 8019290:	fa01 f303 	lsl.w	r3, r1, r3
 8019294:	4293      	cmp	r3, r2
 8019296:	f040 849d 	bne.w	8019bd4 <__ieee754_pow+0x9f4>
 801929a:	f001 0101 	and.w	r1, r1, #1
 801929e:	f1c1 0302 	rsb	r3, r1, #2
 80192a2:	9304      	str	r3, [sp, #16]
 80192a4:	b182      	cbz	r2, 80192c8 <__ieee754_pow+0xe8>
 80192a6:	e05f      	b.n	8019368 <__ieee754_pow+0x188>
 80192a8:	2a00      	cmp	r2, #0
 80192aa:	d15b      	bne.n	8019364 <__ieee754_pow+0x184>
 80192ac:	f1c3 0314 	rsb	r3, r3, #20
 80192b0:	fa48 f103 	asr.w	r1, r8, r3
 80192b4:	fa01 f303 	lsl.w	r3, r1, r3
 80192b8:	4543      	cmp	r3, r8
 80192ba:	f040 8488 	bne.w	8019bce <__ieee754_pow+0x9ee>
 80192be:	f001 0101 	and.w	r1, r1, #1
 80192c2:	f1c1 0302 	rsb	r3, r1, #2
 80192c6:	9304      	str	r3, [sp, #16]
 80192c8:	4b5c      	ldr	r3, [pc, #368]	; (801943c <__ieee754_pow+0x25c>)
 80192ca:	4598      	cmp	r8, r3
 80192cc:	d132      	bne.n	8019334 <__ieee754_pow+0x154>
 80192ce:	f1b9 0f00 	cmp.w	r9, #0
 80192d2:	f280 8478 	bge.w	8019bc6 <__ieee754_pow+0x9e6>
 80192d6:	4959      	ldr	r1, [pc, #356]	; (801943c <__ieee754_pow+0x25c>)
 80192d8:	4632      	mov	r2, r6
 80192da:	463b      	mov	r3, r7
 80192dc:	2000      	movs	r0, #0
 80192de:	f7e7 fabf 	bl	8000860 <__aeabi_ddiv>
 80192e2:	e79c      	b.n	801921e <__ieee754_pow+0x3e>
 80192e4:	2300      	movs	r3, #0
 80192e6:	9304      	str	r3, [sp, #16]
 80192e8:	2a00      	cmp	r2, #0
 80192ea:	d13d      	bne.n	8019368 <__ieee754_pow+0x188>
 80192ec:	4b51      	ldr	r3, [pc, #324]	; (8019434 <__ieee754_pow+0x254>)
 80192ee:	4598      	cmp	r8, r3
 80192f0:	d1ea      	bne.n	80192c8 <__ieee754_pow+0xe8>
 80192f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80192f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80192fa:	ea53 030a 	orrs.w	r3, r3, sl
 80192fe:	f000 845a 	beq.w	8019bb6 <__ieee754_pow+0x9d6>
 8019302:	4b4f      	ldr	r3, [pc, #316]	; (8019440 <__ieee754_pow+0x260>)
 8019304:	429c      	cmp	r4, r3
 8019306:	dd08      	ble.n	801931a <__ieee754_pow+0x13a>
 8019308:	f1b9 0f00 	cmp.w	r9, #0
 801930c:	f2c0 8457 	blt.w	8019bbe <__ieee754_pow+0x9de>
 8019310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019314:	e783      	b.n	801921e <__ieee754_pow+0x3e>
 8019316:	2302      	movs	r3, #2
 8019318:	e7e5      	b.n	80192e6 <__ieee754_pow+0x106>
 801931a:	f1b9 0f00 	cmp.w	r9, #0
 801931e:	f04f 0000 	mov.w	r0, #0
 8019322:	f04f 0100 	mov.w	r1, #0
 8019326:	f6bf af7a 	bge.w	801921e <__ieee754_pow+0x3e>
 801932a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801932e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019332:	e774      	b.n	801921e <__ieee754_pow+0x3e>
 8019334:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019338:	d106      	bne.n	8019348 <__ieee754_pow+0x168>
 801933a:	4632      	mov	r2, r6
 801933c:	463b      	mov	r3, r7
 801933e:	4630      	mov	r0, r6
 8019340:	4639      	mov	r1, r7
 8019342:	f7e7 f963 	bl	800060c <__aeabi_dmul>
 8019346:	e76a      	b.n	801921e <__ieee754_pow+0x3e>
 8019348:	4b3e      	ldr	r3, [pc, #248]	; (8019444 <__ieee754_pow+0x264>)
 801934a:	4599      	cmp	r9, r3
 801934c:	d10c      	bne.n	8019368 <__ieee754_pow+0x188>
 801934e:	2d00      	cmp	r5, #0
 8019350:	db0a      	blt.n	8019368 <__ieee754_pow+0x188>
 8019352:	ec47 6b10 	vmov	d0, r6, r7
 8019356:	b009      	add	sp, #36	; 0x24
 8019358:	ecbd 8b06 	vpop	{d8-d10}
 801935c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019360:	f000 bc6c 	b.w	8019c3c <__ieee754_sqrt>
 8019364:	2300      	movs	r3, #0
 8019366:	9304      	str	r3, [sp, #16]
 8019368:	ec47 6b10 	vmov	d0, r6, r7
 801936c:	f000 ff84 	bl	801a278 <fabs>
 8019370:	ec51 0b10 	vmov	r0, r1, d0
 8019374:	f1ba 0f00 	cmp.w	sl, #0
 8019378:	d129      	bne.n	80193ce <__ieee754_pow+0x1ee>
 801937a:	b124      	cbz	r4, 8019386 <__ieee754_pow+0x1a6>
 801937c:	4b2f      	ldr	r3, [pc, #188]	; (801943c <__ieee754_pow+0x25c>)
 801937e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019382:	429a      	cmp	r2, r3
 8019384:	d123      	bne.n	80193ce <__ieee754_pow+0x1ee>
 8019386:	f1b9 0f00 	cmp.w	r9, #0
 801938a:	da05      	bge.n	8019398 <__ieee754_pow+0x1b8>
 801938c:	4602      	mov	r2, r0
 801938e:	460b      	mov	r3, r1
 8019390:	2000      	movs	r0, #0
 8019392:	492a      	ldr	r1, [pc, #168]	; (801943c <__ieee754_pow+0x25c>)
 8019394:	f7e7 fa64 	bl	8000860 <__aeabi_ddiv>
 8019398:	2d00      	cmp	r5, #0
 801939a:	f6bf af40 	bge.w	801921e <__ieee754_pow+0x3e>
 801939e:	9b04      	ldr	r3, [sp, #16]
 80193a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80193a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80193a8:	4323      	orrs	r3, r4
 80193aa:	d108      	bne.n	80193be <__ieee754_pow+0x1de>
 80193ac:	4602      	mov	r2, r0
 80193ae:	460b      	mov	r3, r1
 80193b0:	4610      	mov	r0, r2
 80193b2:	4619      	mov	r1, r3
 80193b4:	f7e6 ff72 	bl	800029c <__aeabi_dsub>
 80193b8:	4602      	mov	r2, r0
 80193ba:	460b      	mov	r3, r1
 80193bc:	e78f      	b.n	80192de <__ieee754_pow+0xfe>
 80193be:	9b04      	ldr	r3, [sp, #16]
 80193c0:	2b01      	cmp	r3, #1
 80193c2:	f47f af2c 	bne.w	801921e <__ieee754_pow+0x3e>
 80193c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80193ca:	4619      	mov	r1, r3
 80193cc:	e727      	b.n	801921e <__ieee754_pow+0x3e>
 80193ce:	0feb      	lsrs	r3, r5, #31
 80193d0:	3b01      	subs	r3, #1
 80193d2:	9306      	str	r3, [sp, #24]
 80193d4:	9a06      	ldr	r2, [sp, #24]
 80193d6:	9b04      	ldr	r3, [sp, #16]
 80193d8:	4313      	orrs	r3, r2
 80193da:	d102      	bne.n	80193e2 <__ieee754_pow+0x202>
 80193dc:	4632      	mov	r2, r6
 80193de:	463b      	mov	r3, r7
 80193e0:	e7e6      	b.n	80193b0 <__ieee754_pow+0x1d0>
 80193e2:	4b19      	ldr	r3, [pc, #100]	; (8019448 <__ieee754_pow+0x268>)
 80193e4:	4598      	cmp	r8, r3
 80193e6:	f340 80fb 	ble.w	80195e0 <__ieee754_pow+0x400>
 80193ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80193ee:	4598      	cmp	r8, r3
 80193f0:	4b13      	ldr	r3, [pc, #76]	; (8019440 <__ieee754_pow+0x260>)
 80193f2:	dd0c      	ble.n	801940e <__ieee754_pow+0x22e>
 80193f4:	429c      	cmp	r4, r3
 80193f6:	dc0f      	bgt.n	8019418 <__ieee754_pow+0x238>
 80193f8:	f1b9 0f00 	cmp.w	r9, #0
 80193fc:	da0f      	bge.n	801941e <__ieee754_pow+0x23e>
 80193fe:	2000      	movs	r0, #0
 8019400:	b009      	add	sp, #36	; 0x24
 8019402:	ecbd 8b06 	vpop	{d8-d10}
 8019406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801940a:	f000 bf09 	b.w	801a220 <__math_oflow>
 801940e:	429c      	cmp	r4, r3
 8019410:	dbf2      	blt.n	80193f8 <__ieee754_pow+0x218>
 8019412:	4b0a      	ldr	r3, [pc, #40]	; (801943c <__ieee754_pow+0x25c>)
 8019414:	429c      	cmp	r4, r3
 8019416:	dd19      	ble.n	801944c <__ieee754_pow+0x26c>
 8019418:	f1b9 0f00 	cmp.w	r9, #0
 801941c:	dcef      	bgt.n	80193fe <__ieee754_pow+0x21e>
 801941e:	2000      	movs	r0, #0
 8019420:	b009      	add	sp, #36	; 0x24
 8019422:	ecbd 8b06 	vpop	{d8-d10}
 8019426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801942a:	f000 bef0 	b.w	801a20e <__math_uflow>
 801942e:	bf00      	nop
 8019430:	fff00000 	.word	0xfff00000
 8019434:	7ff00000 	.word	0x7ff00000
 8019438:	433fffff 	.word	0x433fffff
 801943c:	3ff00000 	.word	0x3ff00000
 8019440:	3fefffff 	.word	0x3fefffff
 8019444:	3fe00000 	.word	0x3fe00000
 8019448:	41e00000 	.word	0x41e00000
 801944c:	4b60      	ldr	r3, [pc, #384]	; (80195d0 <__ieee754_pow+0x3f0>)
 801944e:	2200      	movs	r2, #0
 8019450:	f7e6 ff24 	bl	800029c <__aeabi_dsub>
 8019454:	a354      	add	r3, pc, #336	; (adr r3, 80195a8 <__ieee754_pow+0x3c8>)
 8019456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801945a:	4604      	mov	r4, r0
 801945c:	460d      	mov	r5, r1
 801945e:	f7e7 f8d5 	bl	800060c <__aeabi_dmul>
 8019462:	a353      	add	r3, pc, #332	; (adr r3, 80195b0 <__ieee754_pow+0x3d0>)
 8019464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019468:	4606      	mov	r6, r0
 801946a:	460f      	mov	r7, r1
 801946c:	4620      	mov	r0, r4
 801946e:	4629      	mov	r1, r5
 8019470:	f7e7 f8cc 	bl	800060c <__aeabi_dmul>
 8019474:	4b57      	ldr	r3, [pc, #348]	; (80195d4 <__ieee754_pow+0x3f4>)
 8019476:	4682      	mov	sl, r0
 8019478:	468b      	mov	fp, r1
 801947a:	2200      	movs	r2, #0
 801947c:	4620      	mov	r0, r4
 801947e:	4629      	mov	r1, r5
 8019480:	f7e7 f8c4 	bl	800060c <__aeabi_dmul>
 8019484:	4602      	mov	r2, r0
 8019486:	460b      	mov	r3, r1
 8019488:	a14b      	add	r1, pc, #300	; (adr r1, 80195b8 <__ieee754_pow+0x3d8>)
 801948a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801948e:	f7e6 ff05 	bl	800029c <__aeabi_dsub>
 8019492:	4622      	mov	r2, r4
 8019494:	462b      	mov	r3, r5
 8019496:	f7e7 f8b9 	bl	800060c <__aeabi_dmul>
 801949a:	4602      	mov	r2, r0
 801949c:	460b      	mov	r3, r1
 801949e:	2000      	movs	r0, #0
 80194a0:	494d      	ldr	r1, [pc, #308]	; (80195d8 <__ieee754_pow+0x3f8>)
 80194a2:	f7e6 fefb 	bl	800029c <__aeabi_dsub>
 80194a6:	4622      	mov	r2, r4
 80194a8:	4680      	mov	r8, r0
 80194aa:	4689      	mov	r9, r1
 80194ac:	462b      	mov	r3, r5
 80194ae:	4620      	mov	r0, r4
 80194b0:	4629      	mov	r1, r5
 80194b2:	f7e7 f8ab 	bl	800060c <__aeabi_dmul>
 80194b6:	4602      	mov	r2, r0
 80194b8:	460b      	mov	r3, r1
 80194ba:	4640      	mov	r0, r8
 80194bc:	4649      	mov	r1, r9
 80194be:	f7e7 f8a5 	bl	800060c <__aeabi_dmul>
 80194c2:	a33f      	add	r3, pc, #252	; (adr r3, 80195c0 <__ieee754_pow+0x3e0>)
 80194c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c8:	f7e7 f8a0 	bl	800060c <__aeabi_dmul>
 80194cc:	4602      	mov	r2, r0
 80194ce:	460b      	mov	r3, r1
 80194d0:	4650      	mov	r0, sl
 80194d2:	4659      	mov	r1, fp
 80194d4:	f7e6 fee2 	bl	800029c <__aeabi_dsub>
 80194d8:	4602      	mov	r2, r0
 80194da:	460b      	mov	r3, r1
 80194dc:	4680      	mov	r8, r0
 80194de:	4689      	mov	r9, r1
 80194e0:	4630      	mov	r0, r6
 80194e2:	4639      	mov	r1, r7
 80194e4:	f7e6 fedc 	bl	80002a0 <__adddf3>
 80194e8:	2000      	movs	r0, #0
 80194ea:	4632      	mov	r2, r6
 80194ec:	463b      	mov	r3, r7
 80194ee:	4604      	mov	r4, r0
 80194f0:	460d      	mov	r5, r1
 80194f2:	f7e6 fed3 	bl	800029c <__aeabi_dsub>
 80194f6:	4602      	mov	r2, r0
 80194f8:	460b      	mov	r3, r1
 80194fa:	4640      	mov	r0, r8
 80194fc:	4649      	mov	r1, r9
 80194fe:	f7e6 fecd 	bl	800029c <__aeabi_dsub>
 8019502:	9b04      	ldr	r3, [sp, #16]
 8019504:	9a06      	ldr	r2, [sp, #24]
 8019506:	3b01      	subs	r3, #1
 8019508:	4313      	orrs	r3, r2
 801950a:	4682      	mov	sl, r0
 801950c:	468b      	mov	fp, r1
 801950e:	f040 81e7 	bne.w	80198e0 <__ieee754_pow+0x700>
 8019512:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80195c8 <__ieee754_pow+0x3e8>
 8019516:	eeb0 8a47 	vmov.f32	s16, s14
 801951a:	eef0 8a67 	vmov.f32	s17, s15
 801951e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019522:	2600      	movs	r6, #0
 8019524:	4632      	mov	r2, r6
 8019526:	463b      	mov	r3, r7
 8019528:	e9dd 0100 	ldrd	r0, r1, [sp]
 801952c:	f7e6 feb6 	bl	800029c <__aeabi_dsub>
 8019530:	4622      	mov	r2, r4
 8019532:	462b      	mov	r3, r5
 8019534:	f7e7 f86a 	bl	800060c <__aeabi_dmul>
 8019538:	e9dd 2300 	ldrd	r2, r3, [sp]
 801953c:	4680      	mov	r8, r0
 801953e:	4689      	mov	r9, r1
 8019540:	4650      	mov	r0, sl
 8019542:	4659      	mov	r1, fp
 8019544:	f7e7 f862 	bl	800060c <__aeabi_dmul>
 8019548:	4602      	mov	r2, r0
 801954a:	460b      	mov	r3, r1
 801954c:	4640      	mov	r0, r8
 801954e:	4649      	mov	r1, r9
 8019550:	f7e6 fea6 	bl	80002a0 <__adddf3>
 8019554:	4632      	mov	r2, r6
 8019556:	463b      	mov	r3, r7
 8019558:	4680      	mov	r8, r0
 801955a:	4689      	mov	r9, r1
 801955c:	4620      	mov	r0, r4
 801955e:	4629      	mov	r1, r5
 8019560:	f7e7 f854 	bl	800060c <__aeabi_dmul>
 8019564:	460b      	mov	r3, r1
 8019566:	4604      	mov	r4, r0
 8019568:	460d      	mov	r5, r1
 801956a:	4602      	mov	r2, r0
 801956c:	4649      	mov	r1, r9
 801956e:	4640      	mov	r0, r8
 8019570:	f7e6 fe96 	bl	80002a0 <__adddf3>
 8019574:	4b19      	ldr	r3, [pc, #100]	; (80195dc <__ieee754_pow+0x3fc>)
 8019576:	4299      	cmp	r1, r3
 8019578:	ec45 4b19 	vmov	d9, r4, r5
 801957c:	4606      	mov	r6, r0
 801957e:	460f      	mov	r7, r1
 8019580:	468b      	mov	fp, r1
 8019582:	f340 82f1 	ble.w	8019b68 <__ieee754_pow+0x988>
 8019586:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801958a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801958e:	4303      	orrs	r3, r0
 8019590:	f000 81e4 	beq.w	801995c <__ieee754_pow+0x77c>
 8019594:	ec51 0b18 	vmov	r0, r1, d8
 8019598:	2200      	movs	r2, #0
 801959a:	2300      	movs	r3, #0
 801959c:	f7e7 faa8 	bl	8000af0 <__aeabi_dcmplt>
 80195a0:	3800      	subs	r0, #0
 80195a2:	bf18      	it	ne
 80195a4:	2001      	movne	r0, #1
 80195a6:	e72b      	b.n	8019400 <__ieee754_pow+0x220>
 80195a8:	60000000 	.word	0x60000000
 80195ac:	3ff71547 	.word	0x3ff71547
 80195b0:	f85ddf44 	.word	0xf85ddf44
 80195b4:	3e54ae0b 	.word	0x3e54ae0b
 80195b8:	55555555 	.word	0x55555555
 80195bc:	3fd55555 	.word	0x3fd55555
 80195c0:	652b82fe 	.word	0x652b82fe
 80195c4:	3ff71547 	.word	0x3ff71547
 80195c8:	00000000 	.word	0x00000000
 80195cc:	bff00000 	.word	0xbff00000
 80195d0:	3ff00000 	.word	0x3ff00000
 80195d4:	3fd00000 	.word	0x3fd00000
 80195d8:	3fe00000 	.word	0x3fe00000
 80195dc:	408fffff 	.word	0x408fffff
 80195e0:	4bd5      	ldr	r3, [pc, #852]	; (8019938 <__ieee754_pow+0x758>)
 80195e2:	402b      	ands	r3, r5
 80195e4:	2200      	movs	r2, #0
 80195e6:	b92b      	cbnz	r3, 80195f4 <__ieee754_pow+0x414>
 80195e8:	4bd4      	ldr	r3, [pc, #848]	; (801993c <__ieee754_pow+0x75c>)
 80195ea:	f7e7 f80f 	bl	800060c <__aeabi_dmul>
 80195ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80195f2:	460c      	mov	r4, r1
 80195f4:	1523      	asrs	r3, r4, #20
 80195f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80195fa:	4413      	add	r3, r2
 80195fc:	9305      	str	r3, [sp, #20]
 80195fe:	4bd0      	ldr	r3, [pc, #832]	; (8019940 <__ieee754_pow+0x760>)
 8019600:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019604:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019608:	429c      	cmp	r4, r3
 801960a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801960e:	dd08      	ble.n	8019622 <__ieee754_pow+0x442>
 8019610:	4bcc      	ldr	r3, [pc, #816]	; (8019944 <__ieee754_pow+0x764>)
 8019612:	429c      	cmp	r4, r3
 8019614:	f340 8162 	ble.w	80198dc <__ieee754_pow+0x6fc>
 8019618:	9b05      	ldr	r3, [sp, #20]
 801961a:	3301      	adds	r3, #1
 801961c:	9305      	str	r3, [sp, #20]
 801961e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019622:	2400      	movs	r4, #0
 8019624:	00e3      	lsls	r3, r4, #3
 8019626:	9307      	str	r3, [sp, #28]
 8019628:	4bc7      	ldr	r3, [pc, #796]	; (8019948 <__ieee754_pow+0x768>)
 801962a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801962e:	ed93 7b00 	vldr	d7, [r3]
 8019632:	4629      	mov	r1, r5
 8019634:	ec53 2b17 	vmov	r2, r3, d7
 8019638:	eeb0 9a47 	vmov.f32	s18, s14
 801963c:	eef0 9a67 	vmov.f32	s19, s15
 8019640:	4682      	mov	sl, r0
 8019642:	f7e6 fe2b 	bl	800029c <__aeabi_dsub>
 8019646:	4652      	mov	r2, sl
 8019648:	4606      	mov	r6, r0
 801964a:	460f      	mov	r7, r1
 801964c:	462b      	mov	r3, r5
 801964e:	ec51 0b19 	vmov	r0, r1, d9
 8019652:	f7e6 fe25 	bl	80002a0 <__adddf3>
 8019656:	4602      	mov	r2, r0
 8019658:	460b      	mov	r3, r1
 801965a:	2000      	movs	r0, #0
 801965c:	49bb      	ldr	r1, [pc, #748]	; (801994c <__ieee754_pow+0x76c>)
 801965e:	f7e7 f8ff 	bl	8000860 <__aeabi_ddiv>
 8019662:	ec41 0b1a 	vmov	d10, r0, r1
 8019666:	4602      	mov	r2, r0
 8019668:	460b      	mov	r3, r1
 801966a:	4630      	mov	r0, r6
 801966c:	4639      	mov	r1, r7
 801966e:	f7e6 ffcd 	bl	800060c <__aeabi_dmul>
 8019672:	2300      	movs	r3, #0
 8019674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019678:	9302      	str	r3, [sp, #8]
 801967a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801967e:	46ab      	mov	fp, r5
 8019680:	106d      	asrs	r5, r5, #1
 8019682:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019686:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801968a:	ec41 0b18 	vmov	d8, r0, r1
 801968e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019692:	2200      	movs	r2, #0
 8019694:	4640      	mov	r0, r8
 8019696:	4649      	mov	r1, r9
 8019698:	4614      	mov	r4, r2
 801969a:	461d      	mov	r5, r3
 801969c:	f7e6 ffb6 	bl	800060c <__aeabi_dmul>
 80196a0:	4602      	mov	r2, r0
 80196a2:	460b      	mov	r3, r1
 80196a4:	4630      	mov	r0, r6
 80196a6:	4639      	mov	r1, r7
 80196a8:	f7e6 fdf8 	bl	800029c <__aeabi_dsub>
 80196ac:	ec53 2b19 	vmov	r2, r3, d9
 80196b0:	4606      	mov	r6, r0
 80196b2:	460f      	mov	r7, r1
 80196b4:	4620      	mov	r0, r4
 80196b6:	4629      	mov	r1, r5
 80196b8:	f7e6 fdf0 	bl	800029c <__aeabi_dsub>
 80196bc:	4602      	mov	r2, r0
 80196be:	460b      	mov	r3, r1
 80196c0:	4650      	mov	r0, sl
 80196c2:	4659      	mov	r1, fp
 80196c4:	f7e6 fdea 	bl	800029c <__aeabi_dsub>
 80196c8:	4642      	mov	r2, r8
 80196ca:	464b      	mov	r3, r9
 80196cc:	f7e6 ff9e 	bl	800060c <__aeabi_dmul>
 80196d0:	4602      	mov	r2, r0
 80196d2:	460b      	mov	r3, r1
 80196d4:	4630      	mov	r0, r6
 80196d6:	4639      	mov	r1, r7
 80196d8:	f7e6 fde0 	bl	800029c <__aeabi_dsub>
 80196dc:	ec53 2b1a 	vmov	r2, r3, d10
 80196e0:	f7e6 ff94 	bl	800060c <__aeabi_dmul>
 80196e4:	ec53 2b18 	vmov	r2, r3, d8
 80196e8:	ec41 0b19 	vmov	d9, r0, r1
 80196ec:	ec51 0b18 	vmov	r0, r1, d8
 80196f0:	f7e6 ff8c 	bl	800060c <__aeabi_dmul>
 80196f4:	a37c      	add	r3, pc, #496	; (adr r3, 80198e8 <__ieee754_pow+0x708>)
 80196f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196fa:	4604      	mov	r4, r0
 80196fc:	460d      	mov	r5, r1
 80196fe:	f7e6 ff85 	bl	800060c <__aeabi_dmul>
 8019702:	a37b      	add	r3, pc, #492	; (adr r3, 80198f0 <__ieee754_pow+0x710>)
 8019704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019708:	f7e6 fdca 	bl	80002a0 <__adddf3>
 801970c:	4622      	mov	r2, r4
 801970e:	462b      	mov	r3, r5
 8019710:	f7e6 ff7c 	bl	800060c <__aeabi_dmul>
 8019714:	a378      	add	r3, pc, #480	; (adr r3, 80198f8 <__ieee754_pow+0x718>)
 8019716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801971a:	f7e6 fdc1 	bl	80002a0 <__adddf3>
 801971e:	4622      	mov	r2, r4
 8019720:	462b      	mov	r3, r5
 8019722:	f7e6 ff73 	bl	800060c <__aeabi_dmul>
 8019726:	a376      	add	r3, pc, #472	; (adr r3, 8019900 <__ieee754_pow+0x720>)
 8019728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801972c:	f7e6 fdb8 	bl	80002a0 <__adddf3>
 8019730:	4622      	mov	r2, r4
 8019732:	462b      	mov	r3, r5
 8019734:	f7e6 ff6a 	bl	800060c <__aeabi_dmul>
 8019738:	a373      	add	r3, pc, #460	; (adr r3, 8019908 <__ieee754_pow+0x728>)
 801973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801973e:	f7e6 fdaf 	bl	80002a0 <__adddf3>
 8019742:	4622      	mov	r2, r4
 8019744:	462b      	mov	r3, r5
 8019746:	f7e6 ff61 	bl	800060c <__aeabi_dmul>
 801974a:	a371      	add	r3, pc, #452	; (adr r3, 8019910 <__ieee754_pow+0x730>)
 801974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019750:	f7e6 fda6 	bl	80002a0 <__adddf3>
 8019754:	4622      	mov	r2, r4
 8019756:	4606      	mov	r6, r0
 8019758:	460f      	mov	r7, r1
 801975a:	462b      	mov	r3, r5
 801975c:	4620      	mov	r0, r4
 801975e:	4629      	mov	r1, r5
 8019760:	f7e6 ff54 	bl	800060c <__aeabi_dmul>
 8019764:	4602      	mov	r2, r0
 8019766:	460b      	mov	r3, r1
 8019768:	4630      	mov	r0, r6
 801976a:	4639      	mov	r1, r7
 801976c:	f7e6 ff4e 	bl	800060c <__aeabi_dmul>
 8019770:	4642      	mov	r2, r8
 8019772:	4604      	mov	r4, r0
 8019774:	460d      	mov	r5, r1
 8019776:	464b      	mov	r3, r9
 8019778:	ec51 0b18 	vmov	r0, r1, d8
 801977c:	f7e6 fd90 	bl	80002a0 <__adddf3>
 8019780:	ec53 2b19 	vmov	r2, r3, d9
 8019784:	f7e6 ff42 	bl	800060c <__aeabi_dmul>
 8019788:	4622      	mov	r2, r4
 801978a:	462b      	mov	r3, r5
 801978c:	f7e6 fd88 	bl	80002a0 <__adddf3>
 8019790:	4642      	mov	r2, r8
 8019792:	4682      	mov	sl, r0
 8019794:	468b      	mov	fp, r1
 8019796:	464b      	mov	r3, r9
 8019798:	4640      	mov	r0, r8
 801979a:	4649      	mov	r1, r9
 801979c:	f7e6 ff36 	bl	800060c <__aeabi_dmul>
 80197a0:	4b6b      	ldr	r3, [pc, #428]	; (8019950 <__ieee754_pow+0x770>)
 80197a2:	2200      	movs	r2, #0
 80197a4:	4606      	mov	r6, r0
 80197a6:	460f      	mov	r7, r1
 80197a8:	f7e6 fd7a 	bl	80002a0 <__adddf3>
 80197ac:	4652      	mov	r2, sl
 80197ae:	465b      	mov	r3, fp
 80197b0:	f7e6 fd76 	bl	80002a0 <__adddf3>
 80197b4:	2000      	movs	r0, #0
 80197b6:	4604      	mov	r4, r0
 80197b8:	460d      	mov	r5, r1
 80197ba:	4602      	mov	r2, r0
 80197bc:	460b      	mov	r3, r1
 80197be:	4640      	mov	r0, r8
 80197c0:	4649      	mov	r1, r9
 80197c2:	f7e6 ff23 	bl	800060c <__aeabi_dmul>
 80197c6:	4b62      	ldr	r3, [pc, #392]	; (8019950 <__ieee754_pow+0x770>)
 80197c8:	4680      	mov	r8, r0
 80197ca:	4689      	mov	r9, r1
 80197cc:	2200      	movs	r2, #0
 80197ce:	4620      	mov	r0, r4
 80197d0:	4629      	mov	r1, r5
 80197d2:	f7e6 fd63 	bl	800029c <__aeabi_dsub>
 80197d6:	4632      	mov	r2, r6
 80197d8:	463b      	mov	r3, r7
 80197da:	f7e6 fd5f 	bl	800029c <__aeabi_dsub>
 80197de:	4602      	mov	r2, r0
 80197e0:	460b      	mov	r3, r1
 80197e2:	4650      	mov	r0, sl
 80197e4:	4659      	mov	r1, fp
 80197e6:	f7e6 fd59 	bl	800029c <__aeabi_dsub>
 80197ea:	ec53 2b18 	vmov	r2, r3, d8
 80197ee:	f7e6 ff0d 	bl	800060c <__aeabi_dmul>
 80197f2:	4622      	mov	r2, r4
 80197f4:	4606      	mov	r6, r0
 80197f6:	460f      	mov	r7, r1
 80197f8:	462b      	mov	r3, r5
 80197fa:	ec51 0b19 	vmov	r0, r1, d9
 80197fe:	f7e6 ff05 	bl	800060c <__aeabi_dmul>
 8019802:	4602      	mov	r2, r0
 8019804:	460b      	mov	r3, r1
 8019806:	4630      	mov	r0, r6
 8019808:	4639      	mov	r1, r7
 801980a:	f7e6 fd49 	bl	80002a0 <__adddf3>
 801980e:	4606      	mov	r6, r0
 8019810:	460f      	mov	r7, r1
 8019812:	4602      	mov	r2, r0
 8019814:	460b      	mov	r3, r1
 8019816:	4640      	mov	r0, r8
 8019818:	4649      	mov	r1, r9
 801981a:	f7e6 fd41 	bl	80002a0 <__adddf3>
 801981e:	a33e      	add	r3, pc, #248	; (adr r3, 8019918 <__ieee754_pow+0x738>)
 8019820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019824:	2000      	movs	r0, #0
 8019826:	4604      	mov	r4, r0
 8019828:	460d      	mov	r5, r1
 801982a:	f7e6 feef 	bl	800060c <__aeabi_dmul>
 801982e:	4642      	mov	r2, r8
 8019830:	ec41 0b18 	vmov	d8, r0, r1
 8019834:	464b      	mov	r3, r9
 8019836:	4620      	mov	r0, r4
 8019838:	4629      	mov	r1, r5
 801983a:	f7e6 fd2f 	bl	800029c <__aeabi_dsub>
 801983e:	4602      	mov	r2, r0
 8019840:	460b      	mov	r3, r1
 8019842:	4630      	mov	r0, r6
 8019844:	4639      	mov	r1, r7
 8019846:	f7e6 fd29 	bl	800029c <__aeabi_dsub>
 801984a:	a335      	add	r3, pc, #212	; (adr r3, 8019920 <__ieee754_pow+0x740>)
 801984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019850:	f7e6 fedc 	bl	800060c <__aeabi_dmul>
 8019854:	a334      	add	r3, pc, #208	; (adr r3, 8019928 <__ieee754_pow+0x748>)
 8019856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801985a:	4606      	mov	r6, r0
 801985c:	460f      	mov	r7, r1
 801985e:	4620      	mov	r0, r4
 8019860:	4629      	mov	r1, r5
 8019862:	f7e6 fed3 	bl	800060c <__aeabi_dmul>
 8019866:	4602      	mov	r2, r0
 8019868:	460b      	mov	r3, r1
 801986a:	4630      	mov	r0, r6
 801986c:	4639      	mov	r1, r7
 801986e:	f7e6 fd17 	bl	80002a0 <__adddf3>
 8019872:	9a07      	ldr	r2, [sp, #28]
 8019874:	4b37      	ldr	r3, [pc, #220]	; (8019954 <__ieee754_pow+0x774>)
 8019876:	4413      	add	r3, r2
 8019878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801987c:	f7e6 fd10 	bl	80002a0 <__adddf3>
 8019880:	4682      	mov	sl, r0
 8019882:	9805      	ldr	r0, [sp, #20]
 8019884:	468b      	mov	fp, r1
 8019886:	f7e6 fe57 	bl	8000538 <__aeabi_i2d>
 801988a:	9a07      	ldr	r2, [sp, #28]
 801988c:	4b32      	ldr	r3, [pc, #200]	; (8019958 <__ieee754_pow+0x778>)
 801988e:	4413      	add	r3, r2
 8019890:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019894:	4606      	mov	r6, r0
 8019896:	460f      	mov	r7, r1
 8019898:	4652      	mov	r2, sl
 801989a:	465b      	mov	r3, fp
 801989c:	ec51 0b18 	vmov	r0, r1, d8
 80198a0:	f7e6 fcfe 	bl	80002a0 <__adddf3>
 80198a4:	4642      	mov	r2, r8
 80198a6:	464b      	mov	r3, r9
 80198a8:	f7e6 fcfa 	bl	80002a0 <__adddf3>
 80198ac:	4632      	mov	r2, r6
 80198ae:	463b      	mov	r3, r7
 80198b0:	f7e6 fcf6 	bl	80002a0 <__adddf3>
 80198b4:	2000      	movs	r0, #0
 80198b6:	4632      	mov	r2, r6
 80198b8:	463b      	mov	r3, r7
 80198ba:	4604      	mov	r4, r0
 80198bc:	460d      	mov	r5, r1
 80198be:	f7e6 fced 	bl	800029c <__aeabi_dsub>
 80198c2:	4642      	mov	r2, r8
 80198c4:	464b      	mov	r3, r9
 80198c6:	f7e6 fce9 	bl	800029c <__aeabi_dsub>
 80198ca:	ec53 2b18 	vmov	r2, r3, d8
 80198ce:	f7e6 fce5 	bl	800029c <__aeabi_dsub>
 80198d2:	4602      	mov	r2, r0
 80198d4:	460b      	mov	r3, r1
 80198d6:	4650      	mov	r0, sl
 80198d8:	4659      	mov	r1, fp
 80198da:	e610      	b.n	80194fe <__ieee754_pow+0x31e>
 80198dc:	2401      	movs	r4, #1
 80198de:	e6a1      	b.n	8019624 <__ieee754_pow+0x444>
 80198e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8019930 <__ieee754_pow+0x750>
 80198e4:	e617      	b.n	8019516 <__ieee754_pow+0x336>
 80198e6:	bf00      	nop
 80198e8:	4a454eef 	.word	0x4a454eef
 80198ec:	3fca7e28 	.word	0x3fca7e28
 80198f0:	93c9db65 	.word	0x93c9db65
 80198f4:	3fcd864a 	.word	0x3fcd864a
 80198f8:	a91d4101 	.word	0xa91d4101
 80198fc:	3fd17460 	.word	0x3fd17460
 8019900:	518f264d 	.word	0x518f264d
 8019904:	3fd55555 	.word	0x3fd55555
 8019908:	db6fabff 	.word	0xdb6fabff
 801990c:	3fdb6db6 	.word	0x3fdb6db6
 8019910:	33333303 	.word	0x33333303
 8019914:	3fe33333 	.word	0x3fe33333
 8019918:	e0000000 	.word	0xe0000000
 801991c:	3feec709 	.word	0x3feec709
 8019920:	dc3a03fd 	.word	0xdc3a03fd
 8019924:	3feec709 	.word	0x3feec709
 8019928:	145b01f5 	.word	0x145b01f5
 801992c:	be3e2fe0 	.word	0xbe3e2fe0
 8019930:	00000000 	.word	0x00000000
 8019934:	3ff00000 	.word	0x3ff00000
 8019938:	7ff00000 	.word	0x7ff00000
 801993c:	43400000 	.word	0x43400000
 8019940:	0003988e 	.word	0x0003988e
 8019944:	000bb679 	.word	0x000bb679
 8019948:	0801d978 	.word	0x0801d978
 801994c:	3ff00000 	.word	0x3ff00000
 8019950:	40080000 	.word	0x40080000
 8019954:	0801d998 	.word	0x0801d998
 8019958:	0801d988 	.word	0x0801d988
 801995c:	a3b5      	add	r3, pc, #724	; (adr r3, 8019c34 <__ieee754_pow+0xa54>)
 801995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019962:	4640      	mov	r0, r8
 8019964:	4649      	mov	r1, r9
 8019966:	f7e6 fc9b 	bl	80002a0 <__adddf3>
 801996a:	4622      	mov	r2, r4
 801996c:	ec41 0b1a 	vmov	d10, r0, r1
 8019970:	462b      	mov	r3, r5
 8019972:	4630      	mov	r0, r6
 8019974:	4639      	mov	r1, r7
 8019976:	f7e6 fc91 	bl	800029c <__aeabi_dsub>
 801997a:	4602      	mov	r2, r0
 801997c:	460b      	mov	r3, r1
 801997e:	ec51 0b1a 	vmov	r0, r1, d10
 8019982:	f7e7 f8d3 	bl	8000b2c <__aeabi_dcmpgt>
 8019986:	2800      	cmp	r0, #0
 8019988:	f47f ae04 	bne.w	8019594 <__ieee754_pow+0x3b4>
 801998c:	4aa4      	ldr	r2, [pc, #656]	; (8019c20 <__ieee754_pow+0xa40>)
 801998e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019992:	4293      	cmp	r3, r2
 8019994:	f340 8108 	ble.w	8019ba8 <__ieee754_pow+0x9c8>
 8019998:	151b      	asrs	r3, r3, #20
 801999a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801999e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80199a2:	fa4a f303 	asr.w	r3, sl, r3
 80199a6:	445b      	add	r3, fp
 80199a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80199ac:	4e9d      	ldr	r6, [pc, #628]	; (8019c24 <__ieee754_pow+0xa44>)
 80199ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80199b2:	4116      	asrs	r6, r2
 80199b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80199b8:	2000      	movs	r0, #0
 80199ba:	ea23 0106 	bic.w	r1, r3, r6
 80199be:	f1c2 0214 	rsb	r2, r2, #20
 80199c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80199c6:	fa4a fa02 	asr.w	sl, sl, r2
 80199ca:	f1bb 0f00 	cmp.w	fp, #0
 80199ce:	4602      	mov	r2, r0
 80199d0:	460b      	mov	r3, r1
 80199d2:	4620      	mov	r0, r4
 80199d4:	4629      	mov	r1, r5
 80199d6:	bfb8      	it	lt
 80199d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80199dc:	f7e6 fc5e 	bl	800029c <__aeabi_dsub>
 80199e0:	ec41 0b19 	vmov	d9, r0, r1
 80199e4:	4642      	mov	r2, r8
 80199e6:	464b      	mov	r3, r9
 80199e8:	ec51 0b19 	vmov	r0, r1, d9
 80199ec:	f7e6 fc58 	bl	80002a0 <__adddf3>
 80199f0:	a37b      	add	r3, pc, #492	; (adr r3, 8019be0 <__ieee754_pow+0xa00>)
 80199f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f6:	2000      	movs	r0, #0
 80199f8:	4604      	mov	r4, r0
 80199fa:	460d      	mov	r5, r1
 80199fc:	f7e6 fe06 	bl	800060c <__aeabi_dmul>
 8019a00:	ec53 2b19 	vmov	r2, r3, d9
 8019a04:	4606      	mov	r6, r0
 8019a06:	460f      	mov	r7, r1
 8019a08:	4620      	mov	r0, r4
 8019a0a:	4629      	mov	r1, r5
 8019a0c:	f7e6 fc46 	bl	800029c <__aeabi_dsub>
 8019a10:	4602      	mov	r2, r0
 8019a12:	460b      	mov	r3, r1
 8019a14:	4640      	mov	r0, r8
 8019a16:	4649      	mov	r1, r9
 8019a18:	f7e6 fc40 	bl	800029c <__aeabi_dsub>
 8019a1c:	a372      	add	r3, pc, #456	; (adr r3, 8019be8 <__ieee754_pow+0xa08>)
 8019a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a22:	f7e6 fdf3 	bl	800060c <__aeabi_dmul>
 8019a26:	a372      	add	r3, pc, #456	; (adr r3, 8019bf0 <__ieee754_pow+0xa10>)
 8019a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a2c:	4680      	mov	r8, r0
 8019a2e:	4689      	mov	r9, r1
 8019a30:	4620      	mov	r0, r4
 8019a32:	4629      	mov	r1, r5
 8019a34:	f7e6 fdea 	bl	800060c <__aeabi_dmul>
 8019a38:	4602      	mov	r2, r0
 8019a3a:	460b      	mov	r3, r1
 8019a3c:	4640      	mov	r0, r8
 8019a3e:	4649      	mov	r1, r9
 8019a40:	f7e6 fc2e 	bl	80002a0 <__adddf3>
 8019a44:	4604      	mov	r4, r0
 8019a46:	460d      	mov	r5, r1
 8019a48:	4602      	mov	r2, r0
 8019a4a:	460b      	mov	r3, r1
 8019a4c:	4630      	mov	r0, r6
 8019a4e:	4639      	mov	r1, r7
 8019a50:	f7e6 fc26 	bl	80002a0 <__adddf3>
 8019a54:	4632      	mov	r2, r6
 8019a56:	463b      	mov	r3, r7
 8019a58:	4680      	mov	r8, r0
 8019a5a:	4689      	mov	r9, r1
 8019a5c:	f7e6 fc1e 	bl	800029c <__aeabi_dsub>
 8019a60:	4602      	mov	r2, r0
 8019a62:	460b      	mov	r3, r1
 8019a64:	4620      	mov	r0, r4
 8019a66:	4629      	mov	r1, r5
 8019a68:	f7e6 fc18 	bl	800029c <__aeabi_dsub>
 8019a6c:	4642      	mov	r2, r8
 8019a6e:	4606      	mov	r6, r0
 8019a70:	460f      	mov	r7, r1
 8019a72:	464b      	mov	r3, r9
 8019a74:	4640      	mov	r0, r8
 8019a76:	4649      	mov	r1, r9
 8019a78:	f7e6 fdc8 	bl	800060c <__aeabi_dmul>
 8019a7c:	a35e      	add	r3, pc, #376	; (adr r3, 8019bf8 <__ieee754_pow+0xa18>)
 8019a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a82:	4604      	mov	r4, r0
 8019a84:	460d      	mov	r5, r1
 8019a86:	f7e6 fdc1 	bl	800060c <__aeabi_dmul>
 8019a8a:	a35d      	add	r3, pc, #372	; (adr r3, 8019c00 <__ieee754_pow+0xa20>)
 8019a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a90:	f7e6 fc04 	bl	800029c <__aeabi_dsub>
 8019a94:	4622      	mov	r2, r4
 8019a96:	462b      	mov	r3, r5
 8019a98:	f7e6 fdb8 	bl	800060c <__aeabi_dmul>
 8019a9c:	a35a      	add	r3, pc, #360	; (adr r3, 8019c08 <__ieee754_pow+0xa28>)
 8019a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aa2:	f7e6 fbfd 	bl	80002a0 <__adddf3>
 8019aa6:	4622      	mov	r2, r4
 8019aa8:	462b      	mov	r3, r5
 8019aaa:	f7e6 fdaf 	bl	800060c <__aeabi_dmul>
 8019aae:	a358      	add	r3, pc, #352	; (adr r3, 8019c10 <__ieee754_pow+0xa30>)
 8019ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ab4:	f7e6 fbf2 	bl	800029c <__aeabi_dsub>
 8019ab8:	4622      	mov	r2, r4
 8019aba:	462b      	mov	r3, r5
 8019abc:	f7e6 fda6 	bl	800060c <__aeabi_dmul>
 8019ac0:	a355      	add	r3, pc, #340	; (adr r3, 8019c18 <__ieee754_pow+0xa38>)
 8019ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ac6:	f7e6 fbeb 	bl	80002a0 <__adddf3>
 8019aca:	4622      	mov	r2, r4
 8019acc:	462b      	mov	r3, r5
 8019ace:	f7e6 fd9d 	bl	800060c <__aeabi_dmul>
 8019ad2:	4602      	mov	r2, r0
 8019ad4:	460b      	mov	r3, r1
 8019ad6:	4640      	mov	r0, r8
 8019ad8:	4649      	mov	r1, r9
 8019ada:	f7e6 fbdf 	bl	800029c <__aeabi_dsub>
 8019ade:	4604      	mov	r4, r0
 8019ae0:	460d      	mov	r5, r1
 8019ae2:	4602      	mov	r2, r0
 8019ae4:	460b      	mov	r3, r1
 8019ae6:	4640      	mov	r0, r8
 8019ae8:	4649      	mov	r1, r9
 8019aea:	f7e6 fd8f 	bl	800060c <__aeabi_dmul>
 8019aee:	2200      	movs	r2, #0
 8019af0:	ec41 0b19 	vmov	d9, r0, r1
 8019af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019af8:	4620      	mov	r0, r4
 8019afa:	4629      	mov	r1, r5
 8019afc:	f7e6 fbce 	bl	800029c <__aeabi_dsub>
 8019b00:	4602      	mov	r2, r0
 8019b02:	460b      	mov	r3, r1
 8019b04:	ec51 0b19 	vmov	r0, r1, d9
 8019b08:	f7e6 feaa 	bl	8000860 <__aeabi_ddiv>
 8019b0c:	4632      	mov	r2, r6
 8019b0e:	4604      	mov	r4, r0
 8019b10:	460d      	mov	r5, r1
 8019b12:	463b      	mov	r3, r7
 8019b14:	4640      	mov	r0, r8
 8019b16:	4649      	mov	r1, r9
 8019b18:	f7e6 fd78 	bl	800060c <__aeabi_dmul>
 8019b1c:	4632      	mov	r2, r6
 8019b1e:	463b      	mov	r3, r7
 8019b20:	f7e6 fbbe 	bl	80002a0 <__adddf3>
 8019b24:	4602      	mov	r2, r0
 8019b26:	460b      	mov	r3, r1
 8019b28:	4620      	mov	r0, r4
 8019b2a:	4629      	mov	r1, r5
 8019b2c:	f7e6 fbb6 	bl	800029c <__aeabi_dsub>
 8019b30:	4642      	mov	r2, r8
 8019b32:	464b      	mov	r3, r9
 8019b34:	f7e6 fbb2 	bl	800029c <__aeabi_dsub>
 8019b38:	460b      	mov	r3, r1
 8019b3a:	4602      	mov	r2, r0
 8019b3c:	493a      	ldr	r1, [pc, #232]	; (8019c28 <__ieee754_pow+0xa48>)
 8019b3e:	2000      	movs	r0, #0
 8019b40:	f7e6 fbac 	bl	800029c <__aeabi_dsub>
 8019b44:	ec41 0b10 	vmov	d0, r0, r1
 8019b48:	ee10 3a90 	vmov	r3, s1
 8019b4c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019b54:	da2b      	bge.n	8019bae <__ieee754_pow+0x9ce>
 8019b56:	4650      	mov	r0, sl
 8019b58:	f000 fba2 	bl	801a2a0 <scalbn>
 8019b5c:	ec51 0b10 	vmov	r0, r1, d0
 8019b60:	ec53 2b18 	vmov	r2, r3, d8
 8019b64:	f7ff bbed 	b.w	8019342 <__ieee754_pow+0x162>
 8019b68:	4b30      	ldr	r3, [pc, #192]	; (8019c2c <__ieee754_pow+0xa4c>)
 8019b6a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019b6e:	429e      	cmp	r6, r3
 8019b70:	f77f af0c 	ble.w	801998c <__ieee754_pow+0x7ac>
 8019b74:	4b2e      	ldr	r3, [pc, #184]	; (8019c30 <__ieee754_pow+0xa50>)
 8019b76:	440b      	add	r3, r1
 8019b78:	4303      	orrs	r3, r0
 8019b7a:	d009      	beq.n	8019b90 <__ieee754_pow+0x9b0>
 8019b7c:	ec51 0b18 	vmov	r0, r1, d8
 8019b80:	2200      	movs	r2, #0
 8019b82:	2300      	movs	r3, #0
 8019b84:	f7e6 ffb4 	bl	8000af0 <__aeabi_dcmplt>
 8019b88:	3800      	subs	r0, #0
 8019b8a:	bf18      	it	ne
 8019b8c:	2001      	movne	r0, #1
 8019b8e:	e447      	b.n	8019420 <__ieee754_pow+0x240>
 8019b90:	4622      	mov	r2, r4
 8019b92:	462b      	mov	r3, r5
 8019b94:	f7e6 fb82 	bl	800029c <__aeabi_dsub>
 8019b98:	4642      	mov	r2, r8
 8019b9a:	464b      	mov	r3, r9
 8019b9c:	f7e6 ffbc 	bl	8000b18 <__aeabi_dcmpge>
 8019ba0:	2800      	cmp	r0, #0
 8019ba2:	f43f aef3 	beq.w	801998c <__ieee754_pow+0x7ac>
 8019ba6:	e7e9      	b.n	8019b7c <__ieee754_pow+0x99c>
 8019ba8:	f04f 0a00 	mov.w	sl, #0
 8019bac:	e71a      	b.n	80199e4 <__ieee754_pow+0x804>
 8019bae:	ec51 0b10 	vmov	r0, r1, d0
 8019bb2:	4619      	mov	r1, r3
 8019bb4:	e7d4      	b.n	8019b60 <__ieee754_pow+0x980>
 8019bb6:	491c      	ldr	r1, [pc, #112]	; (8019c28 <__ieee754_pow+0xa48>)
 8019bb8:	2000      	movs	r0, #0
 8019bba:	f7ff bb30 	b.w	801921e <__ieee754_pow+0x3e>
 8019bbe:	2000      	movs	r0, #0
 8019bc0:	2100      	movs	r1, #0
 8019bc2:	f7ff bb2c 	b.w	801921e <__ieee754_pow+0x3e>
 8019bc6:	4630      	mov	r0, r6
 8019bc8:	4639      	mov	r1, r7
 8019bca:	f7ff bb28 	b.w	801921e <__ieee754_pow+0x3e>
 8019bce:	9204      	str	r2, [sp, #16]
 8019bd0:	f7ff bb7a 	b.w	80192c8 <__ieee754_pow+0xe8>
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	f7ff bb64 	b.w	80192a2 <__ieee754_pow+0xc2>
 8019bda:	bf00      	nop
 8019bdc:	f3af 8000 	nop.w
 8019be0:	00000000 	.word	0x00000000
 8019be4:	3fe62e43 	.word	0x3fe62e43
 8019be8:	fefa39ef 	.word	0xfefa39ef
 8019bec:	3fe62e42 	.word	0x3fe62e42
 8019bf0:	0ca86c39 	.word	0x0ca86c39
 8019bf4:	be205c61 	.word	0xbe205c61
 8019bf8:	72bea4d0 	.word	0x72bea4d0
 8019bfc:	3e663769 	.word	0x3e663769
 8019c00:	c5d26bf1 	.word	0xc5d26bf1
 8019c04:	3ebbbd41 	.word	0x3ebbbd41
 8019c08:	af25de2c 	.word	0xaf25de2c
 8019c0c:	3f11566a 	.word	0x3f11566a
 8019c10:	16bebd93 	.word	0x16bebd93
 8019c14:	3f66c16c 	.word	0x3f66c16c
 8019c18:	5555553e 	.word	0x5555553e
 8019c1c:	3fc55555 	.word	0x3fc55555
 8019c20:	3fe00000 	.word	0x3fe00000
 8019c24:	000fffff 	.word	0x000fffff
 8019c28:	3ff00000 	.word	0x3ff00000
 8019c2c:	4090cbff 	.word	0x4090cbff
 8019c30:	3f6f3400 	.word	0x3f6f3400
 8019c34:	652b82fe 	.word	0x652b82fe
 8019c38:	3c971547 	.word	0x3c971547

08019c3c <__ieee754_sqrt>:
 8019c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c40:	ec55 4b10 	vmov	r4, r5, d0
 8019c44:	4e55      	ldr	r6, [pc, #340]	; (8019d9c <__ieee754_sqrt+0x160>)
 8019c46:	43ae      	bics	r6, r5
 8019c48:	ee10 0a10 	vmov	r0, s0
 8019c4c:	ee10 3a10 	vmov	r3, s0
 8019c50:	462a      	mov	r2, r5
 8019c52:	4629      	mov	r1, r5
 8019c54:	d110      	bne.n	8019c78 <__ieee754_sqrt+0x3c>
 8019c56:	ee10 2a10 	vmov	r2, s0
 8019c5a:	462b      	mov	r3, r5
 8019c5c:	f7e6 fcd6 	bl	800060c <__aeabi_dmul>
 8019c60:	4602      	mov	r2, r0
 8019c62:	460b      	mov	r3, r1
 8019c64:	4620      	mov	r0, r4
 8019c66:	4629      	mov	r1, r5
 8019c68:	f7e6 fb1a 	bl	80002a0 <__adddf3>
 8019c6c:	4604      	mov	r4, r0
 8019c6e:	460d      	mov	r5, r1
 8019c70:	ec45 4b10 	vmov	d0, r4, r5
 8019c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c78:	2d00      	cmp	r5, #0
 8019c7a:	dc10      	bgt.n	8019c9e <__ieee754_sqrt+0x62>
 8019c7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019c80:	4330      	orrs	r0, r6
 8019c82:	d0f5      	beq.n	8019c70 <__ieee754_sqrt+0x34>
 8019c84:	b15d      	cbz	r5, 8019c9e <__ieee754_sqrt+0x62>
 8019c86:	ee10 2a10 	vmov	r2, s0
 8019c8a:	462b      	mov	r3, r5
 8019c8c:	ee10 0a10 	vmov	r0, s0
 8019c90:	f7e6 fb04 	bl	800029c <__aeabi_dsub>
 8019c94:	4602      	mov	r2, r0
 8019c96:	460b      	mov	r3, r1
 8019c98:	f7e6 fde2 	bl	8000860 <__aeabi_ddiv>
 8019c9c:	e7e6      	b.n	8019c6c <__ieee754_sqrt+0x30>
 8019c9e:	1512      	asrs	r2, r2, #20
 8019ca0:	d074      	beq.n	8019d8c <__ieee754_sqrt+0x150>
 8019ca2:	07d4      	lsls	r4, r2, #31
 8019ca4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019ca8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8019cac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019cb0:	bf5e      	ittt	pl
 8019cb2:	0fda      	lsrpl	r2, r3, #31
 8019cb4:	005b      	lslpl	r3, r3, #1
 8019cb6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8019cba:	2400      	movs	r4, #0
 8019cbc:	0fda      	lsrs	r2, r3, #31
 8019cbe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8019cc2:	107f      	asrs	r7, r7, #1
 8019cc4:	005b      	lsls	r3, r3, #1
 8019cc6:	2516      	movs	r5, #22
 8019cc8:	4620      	mov	r0, r4
 8019cca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8019cce:	1886      	adds	r6, r0, r2
 8019cd0:	428e      	cmp	r6, r1
 8019cd2:	bfde      	ittt	le
 8019cd4:	1b89      	suble	r1, r1, r6
 8019cd6:	18b0      	addle	r0, r6, r2
 8019cd8:	18a4      	addle	r4, r4, r2
 8019cda:	0049      	lsls	r1, r1, #1
 8019cdc:	3d01      	subs	r5, #1
 8019cde:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8019ce2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8019ce6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019cea:	d1f0      	bne.n	8019cce <__ieee754_sqrt+0x92>
 8019cec:	462a      	mov	r2, r5
 8019cee:	f04f 0e20 	mov.w	lr, #32
 8019cf2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019cf6:	4281      	cmp	r1, r0
 8019cf8:	eb06 0c05 	add.w	ip, r6, r5
 8019cfc:	dc02      	bgt.n	8019d04 <__ieee754_sqrt+0xc8>
 8019cfe:	d113      	bne.n	8019d28 <__ieee754_sqrt+0xec>
 8019d00:	459c      	cmp	ip, r3
 8019d02:	d811      	bhi.n	8019d28 <__ieee754_sqrt+0xec>
 8019d04:	f1bc 0f00 	cmp.w	ip, #0
 8019d08:	eb0c 0506 	add.w	r5, ip, r6
 8019d0c:	da43      	bge.n	8019d96 <__ieee754_sqrt+0x15a>
 8019d0e:	2d00      	cmp	r5, #0
 8019d10:	db41      	blt.n	8019d96 <__ieee754_sqrt+0x15a>
 8019d12:	f100 0801 	add.w	r8, r0, #1
 8019d16:	1a09      	subs	r1, r1, r0
 8019d18:	459c      	cmp	ip, r3
 8019d1a:	bf88      	it	hi
 8019d1c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8019d20:	eba3 030c 	sub.w	r3, r3, ip
 8019d24:	4432      	add	r2, r6
 8019d26:	4640      	mov	r0, r8
 8019d28:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8019d2c:	f1be 0e01 	subs.w	lr, lr, #1
 8019d30:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8019d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019d38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019d3c:	d1db      	bne.n	8019cf6 <__ieee754_sqrt+0xba>
 8019d3e:	430b      	orrs	r3, r1
 8019d40:	d006      	beq.n	8019d50 <__ieee754_sqrt+0x114>
 8019d42:	1c50      	adds	r0, r2, #1
 8019d44:	bf13      	iteet	ne
 8019d46:	3201      	addne	r2, #1
 8019d48:	3401      	addeq	r4, #1
 8019d4a:	4672      	moveq	r2, lr
 8019d4c:	f022 0201 	bicne.w	r2, r2, #1
 8019d50:	1063      	asrs	r3, r4, #1
 8019d52:	0852      	lsrs	r2, r2, #1
 8019d54:	07e1      	lsls	r1, r4, #31
 8019d56:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019d5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019d5e:	bf48      	it	mi
 8019d60:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8019d64:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8019d68:	4614      	mov	r4, r2
 8019d6a:	e781      	b.n	8019c70 <__ieee754_sqrt+0x34>
 8019d6c:	0ad9      	lsrs	r1, r3, #11
 8019d6e:	3815      	subs	r0, #21
 8019d70:	055b      	lsls	r3, r3, #21
 8019d72:	2900      	cmp	r1, #0
 8019d74:	d0fa      	beq.n	8019d6c <__ieee754_sqrt+0x130>
 8019d76:	02cd      	lsls	r5, r1, #11
 8019d78:	d50a      	bpl.n	8019d90 <__ieee754_sqrt+0x154>
 8019d7a:	f1c2 0420 	rsb	r4, r2, #32
 8019d7e:	fa23 f404 	lsr.w	r4, r3, r4
 8019d82:	1e55      	subs	r5, r2, #1
 8019d84:	4093      	lsls	r3, r2
 8019d86:	4321      	orrs	r1, r4
 8019d88:	1b42      	subs	r2, r0, r5
 8019d8a:	e78a      	b.n	8019ca2 <__ieee754_sqrt+0x66>
 8019d8c:	4610      	mov	r0, r2
 8019d8e:	e7f0      	b.n	8019d72 <__ieee754_sqrt+0x136>
 8019d90:	0049      	lsls	r1, r1, #1
 8019d92:	3201      	adds	r2, #1
 8019d94:	e7ef      	b.n	8019d76 <__ieee754_sqrt+0x13a>
 8019d96:	4680      	mov	r8, r0
 8019d98:	e7bd      	b.n	8019d16 <__ieee754_sqrt+0xda>
 8019d9a:	bf00      	nop
 8019d9c:	7ff00000 	.word	0x7ff00000

08019da0 <__ieee754_expf>:
 8019da0:	ee10 2a10 	vmov	r2, s0
 8019da4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019da8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019dac:	d902      	bls.n	8019db4 <__ieee754_expf+0x14>
 8019dae:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019db2:	4770      	bx	lr
 8019db4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8019db8:	d106      	bne.n	8019dc8 <__ieee754_expf+0x28>
 8019dba:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8019ef4 <__ieee754_expf+0x154>
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	bf18      	it	ne
 8019dc2:	eeb0 0a67 	vmovne.f32	s0, s15
 8019dc6:	4770      	bx	lr
 8019dc8:	484b      	ldr	r0, [pc, #300]	; (8019ef8 <__ieee754_expf+0x158>)
 8019dca:	4282      	cmp	r2, r0
 8019dcc:	dd02      	ble.n	8019dd4 <__ieee754_expf+0x34>
 8019dce:	2000      	movs	r0, #0
 8019dd0:	f000 ba4c 	b.w	801a26c <__math_oflowf>
 8019dd4:	2a00      	cmp	r2, #0
 8019dd6:	da05      	bge.n	8019de4 <__ieee754_expf+0x44>
 8019dd8:	4a48      	ldr	r2, [pc, #288]	; (8019efc <__ieee754_expf+0x15c>)
 8019dda:	4291      	cmp	r1, r2
 8019ddc:	d902      	bls.n	8019de4 <__ieee754_expf+0x44>
 8019dde:	2000      	movs	r0, #0
 8019de0:	f000 ba3e 	b.w	801a260 <__math_uflowf>
 8019de4:	4a46      	ldr	r2, [pc, #280]	; (8019f00 <__ieee754_expf+0x160>)
 8019de6:	4291      	cmp	r1, r2
 8019de8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019dec:	d952      	bls.n	8019e94 <__ieee754_expf+0xf4>
 8019dee:	4a45      	ldr	r2, [pc, #276]	; (8019f04 <__ieee754_expf+0x164>)
 8019df0:	4291      	cmp	r1, r2
 8019df2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8019df6:	d834      	bhi.n	8019e62 <__ieee754_expf+0xc2>
 8019df8:	4943      	ldr	r1, [pc, #268]	; (8019f08 <__ieee754_expf+0x168>)
 8019dfa:	4411      	add	r1, r2
 8019dfc:	ed91 7a00 	vldr	s14, [r1]
 8019e00:	4942      	ldr	r1, [pc, #264]	; (8019f0c <__ieee754_expf+0x16c>)
 8019e02:	440a      	add	r2, r1
 8019e04:	edd2 7a00 	vldr	s15, [r2]
 8019e08:	ee30 7a47 	vsub.f32	s14, s0, s14
 8019e0c:	f1c3 0201 	rsb	r2, r3, #1
 8019e10:	1ad2      	subs	r2, r2, r3
 8019e12:	ee37 0a67 	vsub.f32	s0, s14, s15
 8019e16:	ee20 6a00 	vmul.f32	s12, s0, s0
 8019e1a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019f10 <__ieee754_expf+0x170>
 8019e1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019f14 <__ieee754_expf+0x174>
 8019e22:	eee6 6a05 	vfma.f32	s13, s12, s10
 8019e26:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019f18 <__ieee754_expf+0x178>
 8019e2a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019e2e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8019f1c <__ieee754_expf+0x17c>
 8019e32:	eee5 6a06 	vfma.f32	s13, s10, s12
 8019e36:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019f20 <__ieee754_expf+0x180>
 8019e3a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019e3e:	eef0 6a40 	vmov.f32	s13, s0
 8019e42:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019e46:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019e4a:	ee20 5a26 	vmul.f32	s10, s0, s13
 8019e4e:	bb92      	cbnz	r2, 8019eb6 <__ieee754_expf+0x116>
 8019e50:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019e54:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019e58:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019e5c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019e60:	4770      	bx	lr
 8019e62:	4b30      	ldr	r3, [pc, #192]	; (8019f24 <__ieee754_expf+0x184>)
 8019e64:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019f28 <__ieee754_expf+0x188>
 8019e68:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019f2c <__ieee754_expf+0x18c>
 8019e6c:	4413      	add	r3, r2
 8019e6e:	edd3 7a00 	vldr	s15, [r3]
 8019e72:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019e76:	eeb0 7a40 	vmov.f32	s14, s0
 8019e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e7e:	ee17 2a90 	vmov	r2, s15
 8019e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e86:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019e8a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019f30 <__ieee754_expf+0x190>
 8019e8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e92:	e7be      	b.n	8019e12 <__ieee754_expf+0x72>
 8019e94:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8019e98:	d20b      	bcs.n	8019eb2 <__ieee754_expf+0x112>
 8019e9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8019f34 <__ieee754_expf+0x194>
 8019e9e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8019ea2:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eaa:	dd02      	ble.n	8019eb2 <__ieee754_expf+0x112>
 8019eac:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019eb0:	4770      	bx	lr
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	e7af      	b.n	8019e16 <__ieee754_expf+0x76>
 8019eb6:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019eba:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019ebe:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8019ec2:	bfb8      	it	lt
 8019ec4:	3264      	addlt	r2, #100	; 0x64
 8019ec6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019eca:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019ece:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8019ed2:	ee17 3a90 	vmov	r3, s15
 8019ed6:	bfab      	itete	ge
 8019ed8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019edc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019ee0:	ee00 3a10 	vmovge	s0, r3
 8019ee4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8019f38 <__ieee754_expf+0x198>
 8019ee8:	bfbc      	itt	lt
 8019eea:	ee00 3a10 	vmovlt	s0, r3
 8019eee:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8019ef2:	4770      	bx	lr
 8019ef4:	00000000 	.word	0x00000000
 8019ef8:	42b17217 	.word	0x42b17217
 8019efc:	42cff1b5 	.word	0x42cff1b5
 8019f00:	3eb17218 	.word	0x3eb17218
 8019f04:	3f851591 	.word	0x3f851591
 8019f08:	0801d9b0 	.word	0x0801d9b0
 8019f0c:	0801d9b8 	.word	0x0801d9b8
 8019f10:	3331bb4c 	.word	0x3331bb4c
 8019f14:	b5ddea0e 	.word	0xb5ddea0e
 8019f18:	388ab355 	.word	0x388ab355
 8019f1c:	bb360b61 	.word	0xbb360b61
 8019f20:	3e2aaaab 	.word	0x3e2aaaab
 8019f24:	0801d9a8 	.word	0x0801d9a8
 8019f28:	3fb8aa3b 	.word	0x3fb8aa3b
 8019f2c:	3f317180 	.word	0x3f317180
 8019f30:	3717f7d1 	.word	0x3717f7d1
 8019f34:	7149f2ca 	.word	0x7149f2ca
 8019f38:	0d800000 	.word	0x0d800000

08019f3c <__ieee754_logf>:
 8019f3c:	ee10 3a10 	vmov	r3, s0
 8019f40:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019f44:	d106      	bne.n	8019f54 <__ieee754_logf+0x18>
 8019f46:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801a0dc <__ieee754_logf+0x1a0>
 8019f4a:	eddf 7a65 	vldr	s15, [pc, #404]	; 801a0e0 <__ieee754_logf+0x1a4>
 8019f4e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019f52:	4770      	bx	lr
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	da02      	bge.n	8019f5e <__ieee754_logf+0x22>
 8019f58:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019f5c:	e7f5      	b.n	8019f4a <__ieee754_logf+0xe>
 8019f5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019f62:	db02      	blt.n	8019f6a <__ieee754_logf+0x2e>
 8019f64:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019f68:	4770      	bx	lr
 8019f6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019f6e:	bfb8      	it	lt
 8019f70:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801a0e4 <__ieee754_logf+0x1a8>
 8019f74:	485c      	ldr	r0, [pc, #368]	; (801a0e8 <__ieee754_logf+0x1ac>)
 8019f76:	bfbe      	ittt	lt
 8019f78:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019f7c:	f06f 0118 	mvnlt.w	r1, #24
 8019f80:	ee17 3a90 	vmovlt	r3, s15
 8019f84:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8019f88:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019f8c:	4418      	add	r0, r3
 8019f8e:	bfa8      	it	ge
 8019f90:	2100      	movge	r1, #0
 8019f92:	3a7f      	subs	r2, #127	; 0x7f
 8019f94:	440a      	add	r2, r1
 8019f96:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8019f9a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8019f9e:	4319      	orrs	r1, r3
 8019fa0:	ee00 1a10 	vmov	s0, r1
 8019fa4:	4951      	ldr	r1, [pc, #324]	; (801a0ec <__ieee754_logf+0x1b0>)
 8019fa6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8019faa:	f103 000f 	add.w	r0, r3, #15
 8019fae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019fb2:	4001      	ands	r1, r0
 8019fb4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019fb8:	bb89      	cbnz	r1, 801a01e <__ieee754_logf+0xe2>
 8019fba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fc2:	d10f      	bne.n	8019fe4 <__ieee754_logf+0xa8>
 8019fc4:	2a00      	cmp	r2, #0
 8019fc6:	f000 8085 	beq.w	801a0d4 <__ieee754_logf+0x198>
 8019fca:	ee07 2a90 	vmov	s15, r2
 8019fce:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801a0f0 <__ieee754_logf+0x1b4>
 8019fd2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801a0f4 <__ieee754_logf+0x1b8>
 8019fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019fda:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019fde:	eea7 0a87 	vfma.f32	s0, s15, s14
 8019fe2:	4770      	bx	lr
 8019fe4:	eddf 6a44 	vldr	s13, [pc, #272]	; 801a0f8 <__ieee754_logf+0x1bc>
 8019fe8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019fec:	eee0 7a66 	vfms.f32	s15, s0, s13
 8019ff0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019ff8:	b912      	cbnz	r2, 801a000 <__ieee754_logf+0xc4>
 8019ffa:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019ffe:	4770      	bx	lr
 801a000:	ee07 2a90 	vmov	s15, r2
 801a004:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801a0f0 <__ieee754_logf+0x1b4>
 801a008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a00c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801a010:	ee37 0a40 	vsub.f32	s0, s14, s0
 801a014:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801a0f4 <__ieee754_logf+0x1b8>
 801a018:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801a01c:	4770      	bx	lr
 801a01e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801a022:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a026:	eddf 5a35 	vldr	s11, [pc, #212]	; 801a0fc <__ieee754_logf+0x1c0>
 801a02a:	eddf 4a35 	vldr	s9, [pc, #212]	; 801a100 <__ieee754_logf+0x1c4>
 801a02e:	4935      	ldr	r1, [pc, #212]	; (801a104 <__ieee754_logf+0x1c8>)
 801a030:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801a034:	4419      	add	r1, r3
 801a036:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801a03a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a03e:	430b      	orrs	r3, r1
 801a040:	2b00      	cmp	r3, #0
 801a042:	ee07 2a90 	vmov	s15, r2
 801a046:	ee26 5a06 	vmul.f32	s10, s12, s12
 801a04a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a04e:	ee25 7a05 	vmul.f32	s14, s10, s10
 801a052:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801a108 <__ieee754_logf+0x1cc>
 801a056:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a05a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801a10c <__ieee754_logf+0x1d0>
 801a05e:	eee7 5a87 	vfma.f32	s11, s15, s14
 801a062:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a110 <__ieee754_logf+0x1d4>
 801a066:	eee7 7a24 	vfma.f32	s15, s14, s9
 801a06a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801a114 <__ieee754_logf+0x1d8>
 801a06e:	eee7 4a87 	vfma.f32	s9, s15, s14
 801a072:	eddf 7a29 	vldr	s15, [pc, #164]	; 801a118 <__ieee754_logf+0x1dc>
 801a076:	eee4 7a87 	vfma.f32	s15, s9, s14
 801a07a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a07e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801a082:	dd1c      	ble.n	801a0be <__ieee754_logf+0x182>
 801a084:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a088:	ee20 7a07 	vmul.f32	s14, s0, s14
 801a08c:	ee27 7a00 	vmul.f32	s14, s14, s0
 801a090:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a094:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a098:	b922      	cbnz	r2, 801a0a4 <__ieee754_logf+0x168>
 801a09a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a09e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a0a2:	4770      	bx	lr
 801a0a4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801a0f0 <__ieee754_logf+0x1b4>
 801a0a8:	eee6 7a86 	vfma.f32	s15, s13, s12
 801a0ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a0b0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a0b4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801a0f4 <__ieee754_logf+0x1b8>
 801a0b8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801a0bc:	4770      	bx	lr
 801a0be:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a0c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a0c6:	2a00      	cmp	r2, #0
 801a0c8:	d0e9      	beq.n	801a09e <__ieee754_logf+0x162>
 801a0ca:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801a0f0 <__ieee754_logf+0x1b4>
 801a0ce:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801a0d2:	e7ed      	b.n	801a0b0 <__ieee754_logf+0x174>
 801a0d4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801a0e0 <__ieee754_logf+0x1a4>
 801a0d8:	4770      	bx	lr
 801a0da:	bf00      	nop
 801a0dc:	cc000000 	.word	0xcc000000
 801a0e0:	00000000 	.word	0x00000000
 801a0e4:	4c000000 	.word	0x4c000000
 801a0e8:	004afb20 	.word	0x004afb20
 801a0ec:	007ffff0 	.word	0x007ffff0
 801a0f0:	3717f7d1 	.word	0x3717f7d1
 801a0f4:	3f317180 	.word	0x3f317180
 801a0f8:	3eaaaaab 	.word	0x3eaaaaab
 801a0fc:	3e1cd04f 	.word	0x3e1cd04f
 801a100:	3e178897 	.word	0x3e178897
 801a104:	ffcf5c30 	.word	0xffcf5c30
 801a108:	3e638e29 	.word	0x3e638e29
 801a10c:	3ecccccd 	.word	0x3ecccccd
 801a110:	3e3a3325 	.word	0x3e3a3325
 801a114:	3e924925 	.word	0x3e924925
 801a118:	3f2aaaab 	.word	0x3f2aaaab

0801a11c <__ieee754_log10f>:
 801a11c:	b508      	push	{r3, lr}
 801a11e:	ee10 2a10 	vmov	r2, s0
 801a122:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801a126:	ed2d 8b02 	vpush	{d8}
 801a12a:	d108      	bne.n	801a13e <__ieee754_log10f+0x22>
 801a12c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801a1b4 <__ieee754_log10f+0x98>
 801a130:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a1b8 <__ieee754_log10f+0x9c>
 801a134:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801a138:	ecbd 8b02 	vpop	{d8}
 801a13c:	bd08      	pop	{r3, pc}
 801a13e:	2a00      	cmp	r2, #0
 801a140:	da02      	bge.n	801a148 <__ieee754_log10f+0x2c>
 801a142:	ee30 7a40 	vsub.f32	s14, s0, s0
 801a146:	e7f3      	b.n	801a130 <__ieee754_log10f+0x14>
 801a148:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a14c:	db02      	blt.n	801a154 <__ieee754_log10f+0x38>
 801a14e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a152:	e7f1      	b.n	801a138 <__ieee754_log10f+0x1c>
 801a154:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801a158:	bfbf      	itttt	lt
 801a15a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801a1bc <__ieee754_log10f+0xa0>
 801a15e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801a162:	f06f 0118 	mvnlt.w	r1, #24
 801a166:	ee17 2a90 	vmovlt	r2, s15
 801a16a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801a16e:	bfa8      	it	ge
 801a170:	2100      	movge	r1, #0
 801a172:	3b7f      	subs	r3, #127	; 0x7f
 801a174:	440b      	add	r3, r1
 801a176:	0fd9      	lsrs	r1, r3, #31
 801a178:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a17c:	ee07 3a90 	vmov	s15, r3
 801a180:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a184:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801a188:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a18c:	ee00 3a10 	vmov	s0, r3
 801a190:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801a194:	f7ff fed2 	bl	8019f3c <__ieee754_logf>
 801a198:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a1c0 <__ieee754_log10f+0xa4>
 801a19c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a1a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a1c4 <__ieee754_log10f+0xa8>
 801a1a4:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a1a8:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a1c8 <__ieee754_log10f+0xac>
 801a1ac:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a1b0:	e7c2      	b.n	801a138 <__ieee754_log10f+0x1c>
 801a1b2:	bf00      	nop
 801a1b4:	cc000000 	.word	0xcc000000
 801a1b8:	00000000 	.word	0x00000000
 801a1bc:	4c000000 	.word	0x4c000000
 801a1c0:	3ede5bd9 	.word	0x3ede5bd9
 801a1c4:	355427db 	.word	0x355427db
 801a1c8:	3e9a2080 	.word	0x3e9a2080

0801a1cc <__ieee754_sqrtf>:
 801a1cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a1d0:	4770      	bx	lr

0801a1d2 <with_errno>:
 801a1d2:	b570      	push	{r4, r5, r6, lr}
 801a1d4:	4604      	mov	r4, r0
 801a1d6:	460d      	mov	r5, r1
 801a1d8:	4616      	mov	r6, r2
 801a1da:	f000 f929 	bl	801a430 <__errno>
 801a1de:	4629      	mov	r1, r5
 801a1e0:	6006      	str	r6, [r0, #0]
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	bd70      	pop	{r4, r5, r6, pc}

0801a1e6 <xflow>:
 801a1e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1e8:	4614      	mov	r4, r2
 801a1ea:	461d      	mov	r5, r3
 801a1ec:	b108      	cbz	r0, 801a1f2 <xflow+0xc>
 801a1ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a1f2:	e9cd 2300 	strd	r2, r3, [sp]
 801a1f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a1fa:	4620      	mov	r0, r4
 801a1fc:	4629      	mov	r1, r5
 801a1fe:	f7e6 fa05 	bl	800060c <__aeabi_dmul>
 801a202:	2222      	movs	r2, #34	; 0x22
 801a204:	b003      	add	sp, #12
 801a206:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a20a:	f7ff bfe2 	b.w	801a1d2 <with_errno>

0801a20e <__math_uflow>:
 801a20e:	b508      	push	{r3, lr}
 801a210:	2200      	movs	r2, #0
 801a212:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a216:	f7ff ffe6 	bl	801a1e6 <xflow>
 801a21a:	ec41 0b10 	vmov	d0, r0, r1
 801a21e:	bd08      	pop	{r3, pc}

0801a220 <__math_oflow>:
 801a220:	b508      	push	{r3, lr}
 801a222:	2200      	movs	r2, #0
 801a224:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801a228:	f7ff ffdd 	bl	801a1e6 <xflow>
 801a22c:	ec41 0b10 	vmov	d0, r0, r1
 801a230:	bd08      	pop	{r3, pc}

0801a232 <with_errnof>:
 801a232:	b513      	push	{r0, r1, r4, lr}
 801a234:	4604      	mov	r4, r0
 801a236:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a23a:	f000 f8f9 	bl	801a430 <__errno>
 801a23e:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a242:	6004      	str	r4, [r0, #0]
 801a244:	b002      	add	sp, #8
 801a246:	bd10      	pop	{r4, pc}

0801a248 <xflowf>:
 801a248:	b130      	cbz	r0, 801a258 <xflowf+0x10>
 801a24a:	eef1 7a40 	vneg.f32	s15, s0
 801a24e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a252:	2022      	movs	r0, #34	; 0x22
 801a254:	f7ff bfed 	b.w	801a232 <with_errnof>
 801a258:	eef0 7a40 	vmov.f32	s15, s0
 801a25c:	e7f7      	b.n	801a24e <xflowf+0x6>
	...

0801a260 <__math_uflowf>:
 801a260:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a268 <__math_uflowf+0x8>
 801a264:	f7ff bff0 	b.w	801a248 <xflowf>
 801a268:	10000000 	.word	0x10000000

0801a26c <__math_oflowf>:
 801a26c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a274 <__math_oflowf+0x8>
 801a270:	f7ff bfea 	b.w	801a248 <xflowf>
 801a274:	70000000 	.word	0x70000000

0801a278 <fabs>:
 801a278:	ec51 0b10 	vmov	r0, r1, d0
 801a27c:	ee10 2a10 	vmov	r2, s0
 801a280:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a284:	ec43 2b10 	vmov	d0, r2, r3
 801a288:	4770      	bx	lr

0801a28a <finite>:
 801a28a:	b082      	sub	sp, #8
 801a28c:	ed8d 0b00 	vstr	d0, [sp]
 801a290:	9801      	ldr	r0, [sp, #4]
 801a292:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a296:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a29a:	0fc0      	lsrs	r0, r0, #31
 801a29c:	b002      	add	sp, #8
 801a29e:	4770      	bx	lr

0801a2a0 <scalbn>:
 801a2a0:	b570      	push	{r4, r5, r6, lr}
 801a2a2:	ec55 4b10 	vmov	r4, r5, d0
 801a2a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a2aa:	4606      	mov	r6, r0
 801a2ac:	462b      	mov	r3, r5
 801a2ae:	b99a      	cbnz	r2, 801a2d8 <scalbn+0x38>
 801a2b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a2b4:	4323      	orrs	r3, r4
 801a2b6:	d036      	beq.n	801a326 <scalbn+0x86>
 801a2b8:	4b39      	ldr	r3, [pc, #228]	; (801a3a0 <scalbn+0x100>)
 801a2ba:	4629      	mov	r1, r5
 801a2bc:	ee10 0a10 	vmov	r0, s0
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	f7e6 f9a3 	bl	800060c <__aeabi_dmul>
 801a2c6:	4b37      	ldr	r3, [pc, #220]	; (801a3a4 <scalbn+0x104>)
 801a2c8:	429e      	cmp	r6, r3
 801a2ca:	4604      	mov	r4, r0
 801a2cc:	460d      	mov	r5, r1
 801a2ce:	da10      	bge.n	801a2f2 <scalbn+0x52>
 801a2d0:	a32b      	add	r3, pc, #172	; (adr r3, 801a380 <scalbn+0xe0>)
 801a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d6:	e03a      	b.n	801a34e <scalbn+0xae>
 801a2d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a2dc:	428a      	cmp	r2, r1
 801a2de:	d10c      	bne.n	801a2fa <scalbn+0x5a>
 801a2e0:	ee10 2a10 	vmov	r2, s0
 801a2e4:	4620      	mov	r0, r4
 801a2e6:	4629      	mov	r1, r5
 801a2e8:	f7e5 ffda 	bl	80002a0 <__adddf3>
 801a2ec:	4604      	mov	r4, r0
 801a2ee:	460d      	mov	r5, r1
 801a2f0:	e019      	b.n	801a326 <scalbn+0x86>
 801a2f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a2f6:	460b      	mov	r3, r1
 801a2f8:	3a36      	subs	r2, #54	; 0x36
 801a2fa:	4432      	add	r2, r6
 801a2fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a300:	428a      	cmp	r2, r1
 801a302:	dd08      	ble.n	801a316 <scalbn+0x76>
 801a304:	2d00      	cmp	r5, #0
 801a306:	a120      	add	r1, pc, #128	; (adr r1, 801a388 <scalbn+0xe8>)
 801a308:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a30c:	da1c      	bge.n	801a348 <scalbn+0xa8>
 801a30e:	a120      	add	r1, pc, #128	; (adr r1, 801a390 <scalbn+0xf0>)
 801a310:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a314:	e018      	b.n	801a348 <scalbn+0xa8>
 801a316:	2a00      	cmp	r2, #0
 801a318:	dd08      	ble.n	801a32c <scalbn+0x8c>
 801a31a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a31e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a322:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a326:	ec45 4b10 	vmov	d0, r4, r5
 801a32a:	bd70      	pop	{r4, r5, r6, pc}
 801a32c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a330:	da19      	bge.n	801a366 <scalbn+0xc6>
 801a332:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a336:	429e      	cmp	r6, r3
 801a338:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a33c:	dd0a      	ble.n	801a354 <scalbn+0xb4>
 801a33e:	a112      	add	r1, pc, #72	; (adr r1, 801a388 <scalbn+0xe8>)
 801a340:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d1e2      	bne.n	801a30e <scalbn+0x6e>
 801a348:	a30f      	add	r3, pc, #60	; (adr r3, 801a388 <scalbn+0xe8>)
 801a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a34e:	f7e6 f95d 	bl	800060c <__aeabi_dmul>
 801a352:	e7cb      	b.n	801a2ec <scalbn+0x4c>
 801a354:	a10a      	add	r1, pc, #40	; (adr r1, 801a380 <scalbn+0xe0>)
 801a356:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d0b8      	beq.n	801a2d0 <scalbn+0x30>
 801a35e:	a10e      	add	r1, pc, #56	; (adr r1, 801a398 <scalbn+0xf8>)
 801a360:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a364:	e7b4      	b.n	801a2d0 <scalbn+0x30>
 801a366:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a36a:	3236      	adds	r2, #54	; 0x36
 801a36c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a370:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a374:	4620      	mov	r0, r4
 801a376:	4b0c      	ldr	r3, [pc, #48]	; (801a3a8 <scalbn+0x108>)
 801a378:	2200      	movs	r2, #0
 801a37a:	e7e8      	b.n	801a34e <scalbn+0xae>
 801a37c:	f3af 8000 	nop.w
 801a380:	c2f8f359 	.word	0xc2f8f359
 801a384:	01a56e1f 	.word	0x01a56e1f
 801a388:	8800759c 	.word	0x8800759c
 801a38c:	7e37e43c 	.word	0x7e37e43c
 801a390:	8800759c 	.word	0x8800759c
 801a394:	fe37e43c 	.word	0xfe37e43c
 801a398:	c2f8f359 	.word	0xc2f8f359
 801a39c:	81a56e1f 	.word	0x81a56e1f
 801a3a0:	43500000 	.word	0x43500000
 801a3a4:	ffff3cb0 	.word	0xffff3cb0
 801a3a8:	3c900000 	.word	0x3c900000

0801a3ac <finitef>:
 801a3ac:	b082      	sub	sp, #8
 801a3ae:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a3b2:	9801      	ldr	r0, [sp, #4]
 801a3b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a3b8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a3bc:	bfac      	ite	ge
 801a3be:	2000      	movge	r0, #0
 801a3c0:	2001      	movlt	r0, #1
 801a3c2:	b002      	add	sp, #8
 801a3c4:	4770      	bx	lr
	...

0801a3c8 <nanf>:
 801a3c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a3d0 <nanf+0x8>
 801a3cc:	4770      	bx	lr
 801a3ce:	bf00      	nop
 801a3d0:	7fc00000 	.word	0x7fc00000

0801a3d4 <abort>:
 801a3d4:	b508      	push	{r3, lr}
 801a3d6:	2006      	movs	r0, #6
 801a3d8:	f000 fcc6 	bl	801ad68 <raise>
 801a3dc:	2001      	movs	r0, #1
 801a3de:	f7ea ff2f 	bl	8005240 <_exit>
	...

0801a3e4 <__assert_func>:
 801a3e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a3e6:	4614      	mov	r4, r2
 801a3e8:	461a      	mov	r2, r3
 801a3ea:	4b09      	ldr	r3, [pc, #36]	; (801a410 <__assert_func+0x2c>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	4605      	mov	r5, r0
 801a3f0:	68d8      	ldr	r0, [r3, #12]
 801a3f2:	b14c      	cbz	r4, 801a408 <__assert_func+0x24>
 801a3f4:	4b07      	ldr	r3, [pc, #28]	; (801a414 <__assert_func+0x30>)
 801a3f6:	9100      	str	r1, [sp, #0]
 801a3f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a3fc:	4906      	ldr	r1, [pc, #24]	; (801a418 <__assert_func+0x34>)
 801a3fe:	462b      	mov	r3, r5
 801a400:	f000 f81c 	bl	801a43c <fiprintf>
 801a404:	f7ff ffe6 	bl	801a3d4 <abort>
 801a408:	4b04      	ldr	r3, [pc, #16]	; (801a41c <__assert_func+0x38>)
 801a40a:	461c      	mov	r4, r3
 801a40c:	e7f3      	b.n	801a3f6 <__assert_func+0x12>
 801a40e:	bf00      	nop
 801a410:	20000258 	.word	0x20000258
 801a414:	0801d9c0 	.word	0x0801d9c0
 801a418:	0801d9cd 	.word	0x0801d9cd
 801a41c:	0801d9fb 	.word	0x0801d9fb

0801a420 <calloc>:
 801a420:	4b02      	ldr	r3, [pc, #8]	; (801a42c <calloc+0xc>)
 801a422:	460a      	mov	r2, r1
 801a424:	4601      	mov	r1, r0
 801a426:	6818      	ldr	r0, [r3, #0]
 801a428:	f000 b882 	b.w	801a530 <_calloc_r>
 801a42c:	20000258 	.word	0x20000258

0801a430 <__errno>:
 801a430:	4b01      	ldr	r3, [pc, #4]	; (801a438 <__errno+0x8>)
 801a432:	6818      	ldr	r0, [r3, #0]
 801a434:	4770      	bx	lr
 801a436:	bf00      	nop
 801a438:	20000258 	.word	0x20000258

0801a43c <fiprintf>:
 801a43c:	b40e      	push	{r1, r2, r3}
 801a43e:	b503      	push	{r0, r1, lr}
 801a440:	4601      	mov	r1, r0
 801a442:	ab03      	add	r3, sp, #12
 801a444:	4805      	ldr	r0, [pc, #20]	; (801a45c <fiprintf+0x20>)
 801a446:	f853 2b04 	ldr.w	r2, [r3], #4
 801a44a:	6800      	ldr	r0, [r0, #0]
 801a44c:	9301      	str	r3, [sp, #4]
 801a44e:	f000 f98f 	bl	801a770 <_vfiprintf_r>
 801a452:	b002      	add	sp, #8
 801a454:	f85d eb04 	ldr.w	lr, [sp], #4
 801a458:	b003      	add	sp, #12
 801a45a:	4770      	bx	lr
 801a45c:	20000258 	.word	0x20000258

0801a460 <__libc_init_array>:
 801a460:	b570      	push	{r4, r5, r6, lr}
 801a462:	4d0d      	ldr	r5, [pc, #52]	; (801a498 <__libc_init_array+0x38>)
 801a464:	4c0d      	ldr	r4, [pc, #52]	; (801a49c <__libc_init_array+0x3c>)
 801a466:	1b64      	subs	r4, r4, r5
 801a468:	10a4      	asrs	r4, r4, #2
 801a46a:	2600      	movs	r6, #0
 801a46c:	42a6      	cmp	r6, r4
 801a46e:	d109      	bne.n	801a484 <__libc_init_array+0x24>
 801a470:	4d0b      	ldr	r5, [pc, #44]	; (801a4a0 <__libc_init_array+0x40>)
 801a472:	4c0c      	ldr	r4, [pc, #48]	; (801a4a4 <__libc_init_array+0x44>)
 801a474:	f001 f9da 	bl	801b82c <_init>
 801a478:	1b64      	subs	r4, r4, r5
 801a47a:	10a4      	asrs	r4, r4, #2
 801a47c:	2600      	movs	r6, #0
 801a47e:	42a6      	cmp	r6, r4
 801a480:	d105      	bne.n	801a48e <__libc_init_array+0x2e>
 801a482:	bd70      	pop	{r4, r5, r6, pc}
 801a484:	f855 3b04 	ldr.w	r3, [r5], #4
 801a488:	4798      	blx	r3
 801a48a:	3601      	adds	r6, #1
 801a48c:	e7ee      	b.n	801a46c <__libc_init_array+0xc>
 801a48e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a492:	4798      	blx	r3
 801a494:	3601      	adds	r6, #1
 801a496:	e7f2      	b.n	801a47e <__libc_init_array+0x1e>
 801a498:	0801da9c 	.word	0x0801da9c
 801a49c:	0801da9c 	.word	0x0801da9c
 801a4a0:	0801da9c 	.word	0x0801da9c
 801a4a4:	0801daa4 	.word	0x0801daa4

0801a4a8 <__retarget_lock_init_recursive>:
 801a4a8:	4770      	bx	lr

0801a4aa <__retarget_lock_acquire_recursive>:
 801a4aa:	4770      	bx	lr

0801a4ac <__retarget_lock_release_recursive>:
 801a4ac:	4770      	bx	lr
	...

0801a4b0 <malloc>:
 801a4b0:	4b02      	ldr	r3, [pc, #8]	; (801a4bc <malloc+0xc>)
 801a4b2:	4601      	mov	r1, r0
 801a4b4:	6818      	ldr	r0, [r3, #0]
 801a4b6:	f000 b8bd 	b.w	801a634 <_malloc_r>
 801a4ba:	bf00      	nop
 801a4bc:	20000258 	.word	0x20000258

0801a4c0 <free>:
 801a4c0:	4b02      	ldr	r3, [pc, #8]	; (801a4cc <free+0xc>)
 801a4c2:	4601      	mov	r1, r0
 801a4c4:	6818      	ldr	r0, [r3, #0]
 801a4c6:	f000 b849 	b.w	801a55c <_free_r>
 801a4ca:	bf00      	nop
 801a4cc:	20000258 	.word	0x20000258

0801a4d0 <memcpy>:
 801a4d0:	440a      	add	r2, r1
 801a4d2:	4291      	cmp	r1, r2
 801a4d4:	f100 33ff 	add.w	r3, r0, #4294967295
 801a4d8:	d100      	bne.n	801a4dc <memcpy+0xc>
 801a4da:	4770      	bx	lr
 801a4dc:	b510      	push	{r4, lr}
 801a4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a4e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a4e6:	4291      	cmp	r1, r2
 801a4e8:	d1f9      	bne.n	801a4de <memcpy+0xe>
 801a4ea:	bd10      	pop	{r4, pc}

0801a4ec <memmove>:
 801a4ec:	4288      	cmp	r0, r1
 801a4ee:	b510      	push	{r4, lr}
 801a4f0:	eb01 0402 	add.w	r4, r1, r2
 801a4f4:	d902      	bls.n	801a4fc <memmove+0x10>
 801a4f6:	4284      	cmp	r4, r0
 801a4f8:	4623      	mov	r3, r4
 801a4fa:	d807      	bhi.n	801a50c <memmove+0x20>
 801a4fc:	1e43      	subs	r3, r0, #1
 801a4fe:	42a1      	cmp	r1, r4
 801a500:	d008      	beq.n	801a514 <memmove+0x28>
 801a502:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a506:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a50a:	e7f8      	b.n	801a4fe <memmove+0x12>
 801a50c:	4402      	add	r2, r0
 801a50e:	4601      	mov	r1, r0
 801a510:	428a      	cmp	r2, r1
 801a512:	d100      	bne.n	801a516 <memmove+0x2a>
 801a514:	bd10      	pop	{r4, pc}
 801a516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a51e:	e7f7      	b.n	801a510 <memmove+0x24>

0801a520 <memset>:
 801a520:	4402      	add	r2, r0
 801a522:	4603      	mov	r3, r0
 801a524:	4293      	cmp	r3, r2
 801a526:	d100      	bne.n	801a52a <memset+0xa>
 801a528:	4770      	bx	lr
 801a52a:	f803 1b01 	strb.w	r1, [r3], #1
 801a52e:	e7f9      	b.n	801a524 <memset+0x4>

0801a530 <_calloc_r>:
 801a530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a532:	fba1 2402 	umull	r2, r4, r1, r2
 801a536:	b94c      	cbnz	r4, 801a54c <_calloc_r+0x1c>
 801a538:	4611      	mov	r1, r2
 801a53a:	9201      	str	r2, [sp, #4]
 801a53c:	f000 f87a 	bl	801a634 <_malloc_r>
 801a540:	9a01      	ldr	r2, [sp, #4]
 801a542:	4605      	mov	r5, r0
 801a544:	b930      	cbnz	r0, 801a554 <_calloc_r+0x24>
 801a546:	4628      	mov	r0, r5
 801a548:	b003      	add	sp, #12
 801a54a:	bd30      	pop	{r4, r5, pc}
 801a54c:	220c      	movs	r2, #12
 801a54e:	6002      	str	r2, [r0, #0]
 801a550:	2500      	movs	r5, #0
 801a552:	e7f8      	b.n	801a546 <_calloc_r+0x16>
 801a554:	4621      	mov	r1, r4
 801a556:	f7ff ffe3 	bl	801a520 <memset>
 801a55a:	e7f4      	b.n	801a546 <_calloc_r+0x16>

0801a55c <_free_r>:
 801a55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a55e:	2900      	cmp	r1, #0
 801a560:	d044      	beq.n	801a5ec <_free_r+0x90>
 801a562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a566:	9001      	str	r0, [sp, #4]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	f1a1 0404 	sub.w	r4, r1, #4
 801a56e:	bfb8      	it	lt
 801a570:	18e4      	addlt	r4, r4, r3
 801a572:	f000 ff11 	bl	801b398 <__malloc_lock>
 801a576:	4a1e      	ldr	r2, [pc, #120]	; (801a5f0 <_free_r+0x94>)
 801a578:	9801      	ldr	r0, [sp, #4]
 801a57a:	6813      	ldr	r3, [r2, #0]
 801a57c:	b933      	cbnz	r3, 801a58c <_free_r+0x30>
 801a57e:	6063      	str	r3, [r4, #4]
 801a580:	6014      	str	r4, [r2, #0]
 801a582:	b003      	add	sp, #12
 801a584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a588:	f000 bf0c 	b.w	801b3a4 <__malloc_unlock>
 801a58c:	42a3      	cmp	r3, r4
 801a58e:	d908      	bls.n	801a5a2 <_free_r+0x46>
 801a590:	6825      	ldr	r5, [r4, #0]
 801a592:	1961      	adds	r1, r4, r5
 801a594:	428b      	cmp	r3, r1
 801a596:	bf01      	itttt	eq
 801a598:	6819      	ldreq	r1, [r3, #0]
 801a59a:	685b      	ldreq	r3, [r3, #4]
 801a59c:	1949      	addeq	r1, r1, r5
 801a59e:	6021      	streq	r1, [r4, #0]
 801a5a0:	e7ed      	b.n	801a57e <_free_r+0x22>
 801a5a2:	461a      	mov	r2, r3
 801a5a4:	685b      	ldr	r3, [r3, #4]
 801a5a6:	b10b      	cbz	r3, 801a5ac <_free_r+0x50>
 801a5a8:	42a3      	cmp	r3, r4
 801a5aa:	d9fa      	bls.n	801a5a2 <_free_r+0x46>
 801a5ac:	6811      	ldr	r1, [r2, #0]
 801a5ae:	1855      	adds	r5, r2, r1
 801a5b0:	42a5      	cmp	r5, r4
 801a5b2:	d10b      	bne.n	801a5cc <_free_r+0x70>
 801a5b4:	6824      	ldr	r4, [r4, #0]
 801a5b6:	4421      	add	r1, r4
 801a5b8:	1854      	adds	r4, r2, r1
 801a5ba:	42a3      	cmp	r3, r4
 801a5bc:	6011      	str	r1, [r2, #0]
 801a5be:	d1e0      	bne.n	801a582 <_free_r+0x26>
 801a5c0:	681c      	ldr	r4, [r3, #0]
 801a5c2:	685b      	ldr	r3, [r3, #4]
 801a5c4:	6053      	str	r3, [r2, #4]
 801a5c6:	4421      	add	r1, r4
 801a5c8:	6011      	str	r1, [r2, #0]
 801a5ca:	e7da      	b.n	801a582 <_free_r+0x26>
 801a5cc:	d902      	bls.n	801a5d4 <_free_r+0x78>
 801a5ce:	230c      	movs	r3, #12
 801a5d0:	6003      	str	r3, [r0, #0]
 801a5d2:	e7d6      	b.n	801a582 <_free_r+0x26>
 801a5d4:	6825      	ldr	r5, [r4, #0]
 801a5d6:	1961      	adds	r1, r4, r5
 801a5d8:	428b      	cmp	r3, r1
 801a5da:	bf04      	itt	eq
 801a5dc:	6819      	ldreq	r1, [r3, #0]
 801a5de:	685b      	ldreq	r3, [r3, #4]
 801a5e0:	6063      	str	r3, [r4, #4]
 801a5e2:	bf04      	itt	eq
 801a5e4:	1949      	addeq	r1, r1, r5
 801a5e6:	6021      	streq	r1, [r4, #0]
 801a5e8:	6054      	str	r4, [r2, #4]
 801a5ea:	e7ca      	b.n	801a582 <_free_r+0x26>
 801a5ec:	b003      	add	sp, #12
 801a5ee:	bd30      	pop	{r4, r5, pc}
 801a5f0:	20004b24 	.word	0x20004b24

0801a5f4 <sbrk_aligned>:
 801a5f4:	b570      	push	{r4, r5, r6, lr}
 801a5f6:	4e0e      	ldr	r6, [pc, #56]	; (801a630 <sbrk_aligned+0x3c>)
 801a5f8:	460c      	mov	r4, r1
 801a5fa:	6831      	ldr	r1, [r6, #0]
 801a5fc:	4605      	mov	r5, r0
 801a5fe:	b911      	cbnz	r1, 801a606 <sbrk_aligned+0x12>
 801a600:	f000 fb7a 	bl	801acf8 <_sbrk_r>
 801a604:	6030      	str	r0, [r6, #0]
 801a606:	4621      	mov	r1, r4
 801a608:	4628      	mov	r0, r5
 801a60a:	f000 fb75 	bl	801acf8 <_sbrk_r>
 801a60e:	1c43      	adds	r3, r0, #1
 801a610:	d00a      	beq.n	801a628 <sbrk_aligned+0x34>
 801a612:	1cc4      	adds	r4, r0, #3
 801a614:	f024 0403 	bic.w	r4, r4, #3
 801a618:	42a0      	cmp	r0, r4
 801a61a:	d007      	beq.n	801a62c <sbrk_aligned+0x38>
 801a61c:	1a21      	subs	r1, r4, r0
 801a61e:	4628      	mov	r0, r5
 801a620:	f000 fb6a 	bl	801acf8 <_sbrk_r>
 801a624:	3001      	adds	r0, #1
 801a626:	d101      	bne.n	801a62c <sbrk_aligned+0x38>
 801a628:	f04f 34ff 	mov.w	r4, #4294967295
 801a62c:	4620      	mov	r0, r4
 801a62e:	bd70      	pop	{r4, r5, r6, pc}
 801a630:	20004b28 	.word	0x20004b28

0801a634 <_malloc_r>:
 801a634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a638:	1ccd      	adds	r5, r1, #3
 801a63a:	f025 0503 	bic.w	r5, r5, #3
 801a63e:	3508      	adds	r5, #8
 801a640:	2d0c      	cmp	r5, #12
 801a642:	bf38      	it	cc
 801a644:	250c      	movcc	r5, #12
 801a646:	2d00      	cmp	r5, #0
 801a648:	4607      	mov	r7, r0
 801a64a:	db01      	blt.n	801a650 <_malloc_r+0x1c>
 801a64c:	42a9      	cmp	r1, r5
 801a64e:	d905      	bls.n	801a65c <_malloc_r+0x28>
 801a650:	230c      	movs	r3, #12
 801a652:	603b      	str	r3, [r7, #0]
 801a654:	2600      	movs	r6, #0
 801a656:	4630      	mov	r0, r6
 801a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a65c:	4e2e      	ldr	r6, [pc, #184]	; (801a718 <_malloc_r+0xe4>)
 801a65e:	f000 fe9b 	bl	801b398 <__malloc_lock>
 801a662:	6833      	ldr	r3, [r6, #0]
 801a664:	461c      	mov	r4, r3
 801a666:	bb34      	cbnz	r4, 801a6b6 <_malloc_r+0x82>
 801a668:	4629      	mov	r1, r5
 801a66a:	4638      	mov	r0, r7
 801a66c:	f7ff ffc2 	bl	801a5f4 <sbrk_aligned>
 801a670:	1c43      	adds	r3, r0, #1
 801a672:	4604      	mov	r4, r0
 801a674:	d14d      	bne.n	801a712 <_malloc_r+0xde>
 801a676:	6834      	ldr	r4, [r6, #0]
 801a678:	4626      	mov	r6, r4
 801a67a:	2e00      	cmp	r6, #0
 801a67c:	d140      	bne.n	801a700 <_malloc_r+0xcc>
 801a67e:	6823      	ldr	r3, [r4, #0]
 801a680:	4631      	mov	r1, r6
 801a682:	4638      	mov	r0, r7
 801a684:	eb04 0803 	add.w	r8, r4, r3
 801a688:	f000 fb36 	bl	801acf8 <_sbrk_r>
 801a68c:	4580      	cmp	r8, r0
 801a68e:	d13a      	bne.n	801a706 <_malloc_r+0xd2>
 801a690:	6821      	ldr	r1, [r4, #0]
 801a692:	3503      	adds	r5, #3
 801a694:	1a6d      	subs	r5, r5, r1
 801a696:	f025 0503 	bic.w	r5, r5, #3
 801a69a:	3508      	adds	r5, #8
 801a69c:	2d0c      	cmp	r5, #12
 801a69e:	bf38      	it	cc
 801a6a0:	250c      	movcc	r5, #12
 801a6a2:	4629      	mov	r1, r5
 801a6a4:	4638      	mov	r0, r7
 801a6a6:	f7ff ffa5 	bl	801a5f4 <sbrk_aligned>
 801a6aa:	3001      	adds	r0, #1
 801a6ac:	d02b      	beq.n	801a706 <_malloc_r+0xd2>
 801a6ae:	6823      	ldr	r3, [r4, #0]
 801a6b0:	442b      	add	r3, r5
 801a6b2:	6023      	str	r3, [r4, #0]
 801a6b4:	e00e      	b.n	801a6d4 <_malloc_r+0xa0>
 801a6b6:	6822      	ldr	r2, [r4, #0]
 801a6b8:	1b52      	subs	r2, r2, r5
 801a6ba:	d41e      	bmi.n	801a6fa <_malloc_r+0xc6>
 801a6bc:	2a0b      	cmp	r2, #11
 801a6be:	d916      	bls.n	801a6ee <_malloc_r+0xba>
 801a6c0:	1961      	adds	r1, r4, r5
 801a6c2:	42a3      	cmp	r3, r4
 801a6c4:	6025      	str	r5, [r4, #0]
 801a6c6:	bf18      	it	ne
 801a6c8:	6059      	strne	r1, [r3, #4]
 801a6ca:	6863      	ldr	r3, [r4, #4]
 801a6cc:	bf08      	it	eq
 801a6ce:	6031      	streq	r1, [r6, #0]
 801a6d0:	5162      	str	r2, [r4, r5]
 801a6d2:	604b      	str	r3, [r1, #4]
 801a6d4:	4638      	mov	r0, r7
 801a6d6:	f104 060b 	add.w	r6, r4, #11
 801a6da:	f000 fe63 	bl	801b3a4 <__malloc_unlock>
 801a6de:	f026 0607 	bic.w	r6, r6, #7
 801a6e2:	1d23      	adds	r3, r4, #4
 801a6e4:	1af2      	subs	r2, r6, r3
 801a6e6:	d0b6      	beq.n	801a656 <_malloc_r+0x22>
 801a6e8:	1b9b      	subs	r3, r3, r6
 801a6ea:	50a3      	str	r3, [r4, r2]
 801a6ec:	e7b3      	b.n	801a656 <_malloc_r+0x22>
 801a6ee:	6862      	ldr	r2, [r4, #4]
 801a6f0:	42a3      	cmp	r3, r4
 801a6f2:	bf0c      	ite	eq
 801a6f4:	6032      	streq	r2, [r6, #0]
 801a6f6:	605a      	strne	r2, [r3, #4]
 801a6f8:	e7ec      	b.n	801a6d4 <_malloc_r+0xa0>
 801a6fa:	4623      	mov	r3, r4
 801a6fc:	6864      	ldr	r4, [r4, #4]
 801a6fe:	e7b2      	b.n	801a666 <_malloc_r+0x32>
 801a700:	4634      	mov	r4, r6
 801a702:	6876      	ldr	r6, [r6, #4]
 801a704:	e7b9      	b.n	801a67a <_malloc_r+0x46>
 801a706:	230c      	movs	r3, #12
 801a708:	603b      	str	r3, [r7, #0]
 801a70a:	4638      	mov	r0, r7
 801a70c:	f000 fe4a 	bl	801b3a4 <__malloc_unlock>
 801a710:	e7a1      	b.n	801a656 <_malloc_r+0x22>
 801a712:	6025      	str	r5, [r4, #0]
 801a714:	e7de      	b.n	801a6d4 <_malloc_r+0xa0>
 801a716:	bf00      	nop
 801a718:	20004b24 	.word	0x20004b24

0801a71c <__sfputc_r>:
 801a71c:	6893      	ldr	r3, [r2, #8]
 801a71e:	3b01      	subs	r3, #1
 801a720:	2b00      	cmp	r3, #0
 801a722:	b410      	push	{r4}
 801a724:	6093      	str	r3, [r2, #8]
 801a726:	da08      	bge.n	801a73a <__sfputc_r+0x1e>
 801a728:	6994      	ldr	r4, [r2, #24]
 801a72a:	42a3      	cmp	r3, r4
 801a72c:	db01      	blt.n	801a732 <__sfputc_r+0x16>
 801a72e:	290a      	cmp	r1, #10
 801a730:	d103      	bne.n	801a73a <__sfputc_r+0x1e>
 801a732:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a736:	f000 bb53 	b.w	801ade0 <__swbuf_r>
 801a73a:	6813      	ldr	r3, [r2, #0]
 801a73c:	1c58      	adds	r0, r3, #1
 801a73e:	6010      	str	r0, [r2, #0]
 801a740:	7019      	strb	r1, [r3, #0]
 801a742:	4608      	mov	r0, r1
 801a744:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a748:	4770      	bx	lr

0801a74a <__sfputs_r>:
 801a74a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a74c:	4606      	mov	r6, r0
 801a74e:	460f      	mov	r7, r1
 801a750:	4614      	mov	r4, r2
 801a752:	18d5      	adds	r5, r2, r3
 801a754:	42ac      	cmp	r4, r5
 801a756:	d101      	bne.n	801a75c <__sfputs_r+0x12>
 801a758:	2000      	movs	r0, #0
 801a75a:	e007      	b.n	801a76c <__sfputs_r+0x22>
 801a75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a760:	463a      	mov	r2, r7
 801a762:	4630      	mov	r0, r6
 801a764:	f7ff ffda 	bl	801a71c <__sfputc_r>
 801a768:	1c43      	adds	r3, r0, #1
 801a76a:	d1f3      	bne.n	801a754 <__sfputs_r+0xa>
 801a76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a770 <_vfiprintf_r>:
 801a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a774:	460d      	mov	r5, r1
 801a776:	b09d      	sub	sp, #116	; 0x74
 801a778:	4614      	mov	r4, r2
 801a77a:	4698      	mov	r8, r3
 801a77c:	4606      	mov	r6, r0
 801a77e:	b118      	cbz	r0, 801a788 <_vfiprintf_r+0x18>
 801a780:	6983      	ldr	r3, [r0, #24]
 801a782:	b90b      	cbnz	r3, 801a788 <_vfiprintf_r+0x18>
 801a784:	f000 fd06 	bl	801b194 <__sinit>
 801a788:	4b89      	ldr	r3, [pc, #548]	; (801a9b0 <_vfiprintf_r+0x240>)
 801a78a:	429d      	cmp	r5, r3
 801a78c:	d11b      	bne.n	801a7c6 <_vfiprintf_r+0x56>
 801a78e:	6875      	ldr	r5, [r6, #4]
 801a790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a792:	07d9      	lsls	r1, r3, #31
 801a794:	d405      	bmi.n	801a7a2 <_vfiprintf_r+0x32>
 801a796:	89ab      	ldrh	r3, [r5, #12]
 801a798:	059a      	lsls	r2, r3, #22
 801a79a:	d402      	bmi.n	801a7a2 <_vfiprintf_r+0x32>
 801a79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a79e:	f7ff fe84 	bl	801a4aa <__retarget_lock_acquire_recursive>
 801a7a2:	89ab      	ldrh	r3, [r5, #12]
 801a7a4:	071b      	lsls	r3, r3, #28
 801a7a6:	d501      	bpl.n	801a7ac <_vfiprintf_r+0x3c>
 801a7a8:	692b      	ldr	r3, [r5, #16]
 801a7aa:	b9eb      	cbnz	r3, 801a7e8 <_vfiprintf_r+0x78>
 801a7ac:	4629      	mov	r1, r5
 801a7ae:	4630      	mov	r0, r6
 801a7b0:	f000 fb68 	bl	801ae84 <__swsetup_r>
 801a7b4:	b1c0      	cbz	r0, 801a7e8 <_vfiprintf_r+0x78>
 801a7b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7b8:	07dc      	lsls	r4, r3, #31
 801a7ba:	d50e      	bpl.n	801a7da <_vfiprintf_r+0x6a>
 801a7bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a7c0:	b01d      	add	sp, #116	; 0x74
 801a7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c6:	4b7b      	ldr	r3, [pc, #492]	; (801a9b4 <_vfiprintf_r+0x244>)
 801a7c8:	429d      	cmp	r5, r3
 801a7ca:	d101      	bne.n	801a7d0 <_vfiprintf_r+0x60>
 801a7cc:	68b5      	ldr	r5, [r6, #8]
 801a7ce:	e7df      	b.n	801a790 <_vfiprintf_r+0x20>
 801a7d0:	4b79      	ldr	r3, [pc, #484]	; (801a9b8 <_vfiprintf_r+0x248>)
 801a7d2:	429d      	cmp	r5, r3
 801a7d4:	bf08      	it	eq
 801a7d6:	68f5      	ldreq	r5, [r6, #12]
 801a7d8:	e7da      	b.n	801a790 <_vfiprintf_r+0x20>
 801a7da:	89ab      	ldrh	r3, [r5, #12]
 801a7dc:	0598      	lsls	r0, r3, #22
 801a7de:	d4ed      	bmi.n	801a7bc <_vfiprintf_r+0x4c>
 801a7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7e2:	f7ff fe63 	bl	801a4ac <__retarget_lock_release_recursive>
 801a7e6:	e7e9      	b.n	801a7bc <_vfiprintf_r+0x4c>
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	9309      	str	r3, [sp, #36]	; 0x24
 801a7ec:	2320      	movs	r3, #32
 801a7ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a7f6:	2330      	movs	r3, #48	; 0x30
 801a7f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a9bc <_vfiprintf_r+0x24c>
 801a7fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a800:	f04f 0901 	mov.w	r9, #1
 801a804:	4623      	mov	r3, r4
 801a806:	469a      	mov	sl, r3
 801a808:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a80c:	b10a      	cbz	r2, 801a812 <_vfiprintf_r+0xa2>
 801a80e:	2a25      	cmp	r2, #37	; 0x25
 801a810:	d1f9      	bne.n	801a806 <_vfiprintf_r+0x96>
 801a812:	ebba 0b04 	subs.w	fp, sl, r4
 801a816:	d00b      	beq.n	801a830 <_vfiprintf_r+0xc0>
 801a818:	465b      	mov	r3, fp
 801a81a:	4622      	mov	r2, r4
 801a81c:	4629      	mov	r1, r5
 801a81e:	4630      	mov	r0, r6
 801a820:	f7ff ff93 	bl	801a74a <__sfputs_r>
 801a824:	3001      	adds	r0, #1
 801a826:	f000 80aa 	beq.w	801a97e <_vfiprintf_r+0x20e>
 801a82a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a82c:	445a      	add	r2, fp
 801a82e:	9209      	str	r2, [sp, #36]	; 0x24
 801a830:	f89a 3000 	ldrb.w	r3, [sl]
 801a834:	2b00      	cmp	r3, #0
 801a836:	f000 80a2 	beq.w	801a97e <_vfiprintf_r+0x20e>
 801a83a:	2300      	movs	r3, #0
 801a83c:	f04f 32ff 	mov.w	r2, #4294967295
 801a840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a844:	f10a 0a01 	add.w	sl, sl, #1
 801a848:	9304      	str	r3, [sp, #16]
 801a84a:	9307      	str	r3, [sp, #28]
 801a84c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a850:	931a      	str	r3, [sp, #104]	; 0x68
 801a852:	4654      	mov	r4, sl
 801a854:	2205      	movs	r2, #5
 801a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a85a:	4858      	ldr	r0, [pc, #352]	; (801a9bc <_vfiprintf_r+0x24c>)
 801a85c:	f7e5 fcb8 	bl	80001d0 <memchr>
 801a860:	9a04      	ldr	r2, [sp, #16]
 801a862:	b9d8      	cbnz	r0, 801a89c <_vfiprintf_r+0x12c>
 801a864:	06d1      	lsls	r1, r2, #27
 801a866:	bf44      	itt	mi
 801a868:	2320      	movmi	r3, #32
 801a86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a86e:	0713      	lsls	r3, r2, #28
 801a870:	bf44      	itt	mi
 801a872:	232b      	movmi	r3, #43	; 0x2b
 801a874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a878:	f89a 3000 	ldrb.w	r3, [sl]
 801a87c:	2b2a      	cmp	r3, #42	; 0x2a
 801a87e:	d015      	beq.n	801a8ac <_vfiprintf_r+0x13c>
 801a880:	9a07      	ldr	r2, [sp, #28]
 801a882:	4654      	mov	r4, sl
 801a884:	2000      	movs	r0, #0
 801a886:	f04f 0c0a 	mov.w	ip, #10
 801a88a:	4621      	mov	r1, r4
 801a88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a890:	3b30      	subs	r3, #48	; 0x30
 801a892:	2b09      	cmp	r3, #9
 801a894:	d94e      	bls.n	801a934 <_vfiprintf_r+0x1c4>
 801a896:	b1b0      	cbz	r0, 801a8c6 <_vfiprintf_r+0x156>
 801a898:	9207      	str	r2, [sp, #28]
 801a89a:	e014      	b.n	801a8c6 <_vfiprintf_r+0x156>
 801a89c:	eba0 0308 	sub.w	r3, r0, r8
 801a8a0:	fa09 f303 	lsl.w	r3, r9, r3
 801a8a4:	4313      	orrs	r3, r2
 801a8a6:	9304      	str	r3, [sp, #16]
 801a8a8:	46a2      	mov	sl, r4
 801a8aa:	e7d2      	b.n	801a852 <_vfiprintf_r+0xe2>
 801a8ac:	9b03      	ldr	r3, [sp, #12]
 801a8ae:	1d19      	adds	r1, r3, #4
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	9103      	str	r1, [sp, #12]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	bfbb      	ittet	lt
 801a8b8:	425b      	neglt	r3, r3
 801a8ba:	f042 0202 	orrlt.w	r2, r2, #2
 801a8be:	9307      	strge	r3, [sp, #28]
 801a8c0:	9307      	strlt	r3, [sp, #28]
 801a8c2:	bfb8      	it	lt
 801a8c4:	9204      	strlt	r2, [sp, #16]
 801a8c6:	7823      	ldrb	r3, [r4, #0]
 801a8c8:	2b2e      	cmp	r3, #46	; 0x2e
 801a8ca:	d10c      	bne.n	801a8e6 <_vfiprintf_r+0x176>
 801a8cc:	7863      	ldrb	r3, [r4, #1]
 801a8ce:	2b2a      	cmp	r3, #42	; 0x2a
 801a8d0:	d135      	bne.n	801a93e <_vfiprintf_r+0x1ce>
 801a8d2:	9b03      	ldr	r3, [sp, #12]
 801a8d4:	1d1a      	adds	r2, r3, #4
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	9203      	str	r2, [sp, #12]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	bfb8      	it	lt
 801a8de:	f04f 33ff 	movlt.w	r3, #4294967295
 801a8e2:	3402      	adds	r4, #2
 801a8e4:	9305      	str	r3, [sp, #20]
 801a8e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a9cc <_vfiprintf_r+0x25c>
 801a8ea:	7821      	ldrb	r1, [r4, #0]
 801a8ec:	2203      	movs	r2, #3
 801a8ee:	4650      	mov	r0, sl
 801a8f0:	f7e5 fc6e 	bl	80001d0 <memchr>
 801a8f4:	b140      	cbz	r0, 801a908 <_vfiprintf_r+0x198>
 801a8f6:	2340      	movs	r3, #64	; 0x40
 801a8f8:	eba0 000a 	sub.w	r0, r0, sl
 801a8fc:	fa03 f000 	lsl.w	r0, r3, r0
 801a900:	9b04      	ldr	r3, [sp, #16]
 801a902:	4303      	orrs	r3, r0
 801a904:	3401      	adds	r4, #1
 801a906:	9304      	str	r3, [sp, #16]
 801a908:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a90c:	482c      	ldr	r0, [pc, #176]	; (801a9c0 <_vfiprintf_r+0x250>)
 801a90e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a912:	2206      	movs	r2, #6
 801a914:	f7e5 fc5c 	bl	80001d0 <memchr>
 801a918:	2800      	cmp	r0, #0
 801a91a:	d03f      	beq.n	801a99c <_vfiprintf_r+0x22c>
 801a91c:	4b29      	ldr	r3, [pc, #164]	; (801a9c4 <_vfiprintf_r+0x254>)
 801a91e:	bb1b      	cbnz	r3, 801a968 <_vfiprintf_r+0x1f8>
 801a920:	9b03      	ldr	r3, [sp, #12]
 801a922:	3307      	adds	r3, #7
 801a924:	f023 0307 	bic.w	r3, r3, #7
 801a928:	3308      	adds	r3, #8
 801a92a:	9303      	str	r3, [sp, #12]
 801a92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a92e:	443b      	add	r3, r7
 801a930:	9309      	str	r3, [sp, #36]	; 0x24
 801a932:	e767      	b.n	801a804 <_vfiprintf_r+0x94>
 801a934:	fb0c 3202 	mla	r2, ip, r2, r3
 801a938:	460c      	mov	r4, r1
 801a93a:	2001      	movs	r0, #1
 801a93c:	e7a5      	b.n	801a88a <_vfiprintf_r+0x11a>
 801a93e:	2300      	movs	r3, #0
 801a940:	3401      	adds	r4, #1
 801a942:	9305      	str	r3, [sp, #20]
 801a944:	4619      	mov	r1, r3
 801a946:	f04f 0c0a 	mov.w	ip, #10
 801a94a:	4620      	mov	r0, r4
 801a94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a950:	3a30      	subs	r2, #48	; 0x30
 801a952:	2a09      	cmp	r2, #9
 801a954:	d903      	bls.n	801a95e <_vfiprintf_r+0x1ee>
 801a956:	2b00      	cmp	r3, #0
 801a958:	d0c5      	beq.n	801a8e6 <_vfiprintf_r+0x176>
 801a95a:	9105      	str	r1, [sp, #20]
 801a95c:	e7c3      	b.n	801a8e6 <_vfiprintf_r+0x176>
 801a95e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a962:	4604      	mov	r4, r0
 801a964:	2301      	movs	r3, #1
 801a966:	e7f0      	b.n	801a94a <_vfiprintf_r+0x1da>
 801a968:	ab03      	add	r3, sp, #12
 801a96a:	9300      	str	r3, [sp, #0]
 801a96c:	462a      	mov	r2, r5
 801a96e:	4b16      	ldr	r3, [pc, #88]	; (801a9c8 <_vfiprintf_r+0x258>)
 801a970:	a904      	add	r1, sp, #16
 801a972:	4630      	mov	r0, r6
 801a974:	f3af 8000 	nop.w
 801a978:	4607      	mov	r7, r0
 801a97a:	1c78      	adds	r0, r7, #1
 801a97c:	d1d6      	bne.n	801a92c <_vfiprintf_r+0x1bc>
 801a97e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a980:	07d9      	lsls	r1, r3, #31
 801a982:	d405      	bmi.n	801a990 <_vfiprintf_r+0x220>
 801a984:	89ab      	ldrh	r3, [r5, #12]
 801a986:	059a      	lsls	r2, r3, #22
 801a988:	d402      	bmi.n	801a990 <_vfiprintf_r+0x220>
 801a98a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a98c:	f7ff fd8e 	bl	801a4ac <__retarget_lock_release_recursive>
 801a990:	89ab      	ldrh	r3, [r5, #12]
 801a992:	065b      	lsls	r3, r3, #25
 801a994:	f53f af12 	bmi.w	801a7bc <_vfiprintf_r+0x4c>
 801a998:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a99a:	e711      	b.n	801a7c0 <_vfiprintf_r+0x50>
 801a99c:	ab03      	add	r3, sp, #12
 801a99e:	9300      	str	r3, [sp, #0]
 801a9a0:	462a      	mov	r2, r5
 801a9a2:	4b09      	ldr	r3, [pc, #36]	; (801a9c8 <_vfiprintf_r+0x258>)
 801a9a4:	a904      	add	r1, sp, #16
 801a9a6:	4630      	mov	r0, r6
 801a9a8:	f000 f880 	bl	801aaac <_printf_i>
 801a9ac:	e7e4      	b.n	801a978 <_vfiprintf_r+0x208>
 801a9ae:	bf00      	nop
 801a9b0:	0801da54 	.word	0x0801da54
 801a9b4:	0801da74 	.word	0x0801da74
 801a9b8:	0801da34 	.word	0x0801da34
 801a9bc:	0801da00 	.word	0x0801da00
 801a9c0:	0801da0a 	.word	0x0801da0a
 801a9c4:	00000000 	.word	0x00000000
 801a9c8:	0801a74b 	.word	0x0801a74b
 801a9cc:	0801da06 	.word	0x0801da06

0801a9d0 <_printf_common>:
 801a9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9d4:	4616      	mov	r6, r2
 801a9d6:	4699      	mov	r9, r3
 801a9d8:	688a      	ldr	r2, [r1, #8]
 801a9da:	690b      	ldr	r3, [r1, #16]
 801a9dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a9e0:	4293      	cmp	r3, r2
 801a9e2:	bfb8      	it	lt
 801a9e4:	4613      	movlt	r3, r2
 801a9e6:	6033      	str	r3, [r6, #0]
 801a9e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a9ec:	4607      	mov	r7, r0
 801a9ee:	460c      	mov	r4, r1
 801a9f0:	b10a      	cbz	r2, 801a9f6 <_printf_common+0x26>
 801a9f2:	3301      	adds	r3, #1
 801a9f4:	6033      	str	r3, [r6, #0]
 801a9f6:	6823      	ldr	r3, [r4, #0]
 801a9f8:	0699      	lsls	r1, r3, #26
 801a9fa:	bf42      	ittt	mi
 801a9fc:	6833      	ldrmi	r3, [r6, #0]
 801a9fe:	3302      	addmi	r3, #2
 801aa00:	6033      	strmi	r3, [r6, #0]
 801aa02:	6825      	ldr	r5, [r4, #0]
 801aa04:	f015 0506 	ands.w	r5, r5, #6
 801aa08:	d106      	bne.n	801aa18 <_printf_common+0x48>
 801aa0a:	f104 0a19 	add.w	sl, r4, #25
 801aa0e:	68e3      	ldr	r3, [r4, #12]
 801aa10:	6832      	ldr	r2, [r6, #0]
 801aa12:	1a9b      	subs	r3, r3, r2
 801aa14:	42ab      	cmp	r3, r5
 801aa16:	dc26      	bgt.n	801aa66 <_printf_common+0x96>
 801aa18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aa1c:	1e13      	subs	r3, r2, #0
 801aa1e:	6822      	ldr	r2, [r4, #0]
 801aa20:	bf18      	it	ne
 801aa22:	2301      	movne	r3, #1
 801aa24:	0692      	lsls	r2, r2, #26
 801aa26:	d42b      	bmi.n	801aa80 <_printf_common+0xb0>
 801aa28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aa2c:	4649      	mov	r1, r9
 801aa2e:	4638      	mov	r0, r7
 801aa30:	47c0      	blx	r8
 801aa32:	3001      	adds	r0, #1
 801aa34:	d01e      	beq.n	801aa74 <_printf_common+0xa4>
 801aa36:	6823      	ldr	r3, [r4, #0]
 801aa38:	68e5      	ldr	r5, [r4, #12]
 801aa3a:	6832      	ldr	r2, [r6, #0]
 801aa3c:	f003 0306 	and.w	r3, r3, #6
 801aa40:	2b04      	cmp	r3, #4
 801aa42:	bf08      	it	eq
 801aa44:	1aad      	subeq	r5, r5, r2
 801aa46:	68a3      	ldr	r3, [r4, #8]
 801aa48:	6922      	ldr	r2, [r4, #16]
 801aa4a:	bf0c      	ite	eq
 801aa4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aa50:	2500      	movne	r5, #0
 801aa52:	4293      	cmp	r3, r2
 801aa54:	bfc4      	itt	gt
 801aa56:	1a9b      	subgt	r3, r3, r2
 801aa58:	18ed      	addgt	r5, r5, r3
 801aa5a:	2600      	movs	r6, #0
 801aa5c:	341a      	adds	r4, #26
 801aa5e:	42b5      	cmp	r5, r6
 801aa60:	d11a      	bne.n	801aa98 <_printf_common+0xc8>
 801aa62:	2000      	movs	r0, #0
 801aa64:	e008      	b.n	801aa78 <_printf_common+0xa8>
 801aa66:	2301      	movs	r3, #1
 801aa68:	4652      	mov	r2, sl
 801aa6a:	4649      	mov	r1, r9
 801aa6c:	4638      	mov	r0, r7
 801aa6e:	47c0      	blx	r8
 801aa70:	3001      	adds	r0, #1
 801aa72:	d103      	bne.n	801aa7c <_printf_common+0xac>
 801aa74:	f04f 30ff 	mov.w	r0, #4294967295
 801aa78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa7c:	3501      	adds	r5, #1
 801aa7e:	e7c6      	b.n	801aa0e <_printf_common+0x3e>
 801aa80:	18e1      	adds	r1, r4, r3
 801aa82:	1c5a      	adds	r2, r3, #1
 801aa84:	2030      	movs	r0, #48	; 0x30
 801aa86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aa8a:	4422      	add	r2, r4
 801aa8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aa90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aa94:	3302      	adds	r3, #2
 801aa96:	e7c7      	b.n	801aa28 <_printf_common+0x58>
 801aa98:	2301      	movs	r3, #1
 801aa9a:	4622      	mov	r2, r4
 801aa9c:	4649      	mov	r1, r9
 801aa9e:	4638      	mov	r0, r7
 801aaa0:	47c0      	blx	r8
 801aaa2:	3001      	adds	r0, #1
 801aaa4:	d0e6      	beq.n	801aa74 <_printf_common+0xa4>
 801aaa6:	3601      	adds	r6, #1
 801aaa8:	e7d9      	b.n	801aa5e <_printf_common+0x8e>
	...

0801aaac <_printf_i>:
 801aaac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aab0:	7e0f      	ldrb	r7, [r1, #24]
 801aab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aab4:	2f78      	cmp	r7, #120	; 0x78
 801aab6:	4691      	mov	r9, r2
 801aab8:	4680      	mov	r8, r0
 801aaba:	460c      	mov	r4, r1
 801aabc:	469a      	mov	sl, r3
 801aabe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aac2:	d807      	bhi.n	801aad4 <_printf_i+0x28>
 801aac4:	2f62      	cmp	r7, #98	; 0x62
 801aac6:	d80a      	bhi.n	801aade <_printf_i+0x32>
 801aac8:	2f00      	cmp	r7, #0
 801aaca:	f000 80d8 	beq.w	801ac7e <_printf_i+0x1d2>
 801aace:	2f58      	cmp	r7, #88	; 0x58
 801aad0:	f000 80a3 	beq.w	801ac1a <_printf_i+0x16e>
 801aad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aadc:	e03a      	b.n	801ab54 <_printf_i+0xa8>
 801aade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aae2:	2b15      	cmp	r3, #21
 801aae4:	d8f6      	bhi.n	801aad4 <_printf_i+0x28>
 801aae6:	a101      	add	r1, pc, #4	; (adr r1, 801aaec <_printf_i+0x40>)
 801aae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aaec:	0801ab45 	.word	0x0801ab45
 801aaf0:	0801ab59 	.word	0x0801ab59
 801aaf4:	0801aad5 	.word	0x0801aad5
 801aaf8:	0801aad5 	.word	0x0801aad5
 801aafc:	0801aad5 	.word	0x0801aad5
 801ab00:	0801aad5 	.word	0x0801aad5
 801ab04:	0801ab59 	.word	0x0801ab59
 801ab08:	0801aad5 	.word	0x0801aad5
 801ab0c:	0801aad5 	.word	0x0801aad5
 801ab10:	0801aad5 	.word	0x0801aad5
 801ab14:	0801aad5 	.word	0x0801aad5
 801ab18:	0801ac65 	.word	0x0801ac65
 801ab1c:	0801ab89 	.word	0x0801ab89
 801ab20:	0801ac47 	.word	0x0801ac47
 801ab24:	0801aad5 	.word	0x0801aad5
 801ab28:	0801aad5 	.word	0x0801aad5
 801ab2c:	0801ac87 	.word	0x0801ac87
 801ab30:	0801aad5 	.word	0x0801aad5
 801ab34:	0801ab89 	.word	0x0801ab89
 801ab38:	0801aad5 	.word	0x0801aad5
 801ab3c:	0801aad5 	.word	0x0801aad5
 801ab40:	0801ac4f 	.word	0x0801ac4f
 801ab44:	682b      	ldr	r3, [r5, #0]
 801ab46:	1d1a      	adds	r2, r3, #4
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	602a      	str	r2, [r5, #0]
 801ab4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ab50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ab54:	2301      	movs	r3, #1
 801ab56:	e0a3      	b.n	801aca0 <_printf_i+0x1f4>
 801ab58:	6820      	ldr	r0, [r4, #0]
 801ab5a:	6829      	ldr	r1, [r5, #0]
 801ab5c:	0606      	lsls	r6, r0, #24
 801ab5e:	f101 0304 	add.w	r3, r1, #4
 801ab62:	d50a      	bpl.n	801ab7a <_printf_i+0xce>
 801ab64:	680e      	ldr	r6, [r1, #0]
 801ab66:	602b      	str	r3, [r5, #0]
 801ab68:	2e00      	cmp	r6, #0
 801ab6a:	da03      	bge.n	801ab74 <_printf_i+0xc8>
 801ab6c:	232d      	movs	r3, #45	; 0x2d
 801ab6e:	4276      	negs	r6, r6
 801ab70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab74:	485e      	ldr	r0, [pc, #376]	; (801acf0 <_printf_i+0x244>)
 801ab76:	230a      	movs	r3, #10
 801ab78:	e019      	b.n	801abae <_printf_i+0x102>
 801ab7a:	680e      	ldr	r6, [r1, #0]
 801ab7c:	602b      	str	r3, [r5, #0]
 801ab7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ab82:	bf18      	it	ne
 801ab84:	b236      	sxthne	r6, r6
 801ab86:	e7ef      	b.n	801ab68 <_printf_i+0xbc>
 801ab88:	682b      	ldr	r3, [r5, #0]
 801ab8a:	6820      	ldr	r0, [r4, #0]
 801ab8c:	1d19      	adds	r1, r3, #4
 801ab8e:	6029      	str	r1, [r5, #0]
 801ab90:	0601      	lsls	r1, r0, #24
 801ab92:	d501      	bpl.n	801ab98 <_printf_i+0xec>
 801ab94:	681e      	ldr	r6, [r3, #0]
 801ab96:	e002      	b.n	801ab9e <_printf_i+0xf2>
 801ab98:	0646      	lsls	r6, r0, #25
 801ab9a:	d5fb      	bpl.n	801ab94 <_printf_i+0xe8>
 801ab9c:	881e      	ldrh	r6, [r3, #0]
 801ab9e:	4854      	ldr	r0, [pc, #336]	; (801acf0 <_printf_i+0x244>)
 801aba0:	2f6f      	cmp	r7, #111	; 0x6f
 801aba2:	bf0c      	ite	eq
 801aba4:	2308      	moveq	r3, #8
 801aba6:	230a      	movne	r3, #10
 801aba8:	2100      	movs	r1, #0
 801abaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801abae:	6865      	ldr	r5, [r4, #4]
 801abb0:	60a5      	str	r5, [r4, #8]
 801abb2:	2d00      	cmp	r5, #0
 801abb4:	bfa2      	ittt	ge
 801abb6:	6821      	ldrge	r1, [r4, #0]
 801abb8:	f021 0104 	bicge.w	r1, r1, #4
 801abbc:	6021      	strge	r1, [r4, #0]
 801abbe:	b90e      	cbnz	r6, 801abc4 <_printf_i+0x118>
 801abc0:	2d00      	cmp	r5, #0
 801abc2:	d04d      	beq.n	801ac60 <_printf_i+0x1b4>
 801abc4:	4615      	mov	r5, r2
 801abc6:	fbb6 f1f3 	udiv	r1, r6, r3
 801abca:	fb03 6711 	mls	r7, r3, r1, r6
 801abce:	5dc7      	ldrb	r7, [r0, r7]
 801abd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801abd4:	4637      	mov	r7, r6
 801abd6:	42bb      	cmp	r3, r7
 801abd8:	460e      	mov	r6, r1
 801abda:	d9f4      	bls.n	801abc6 <_printf_i+0x11a>
 801abdc:	2b08      	cmp	r3, #8
 801abde:	d10b      	bne.n	801abf8 <_printf_i+0x14c>
 801abe0:	6823      	ldr	r3, [r4, #0]
 801abe2:	07de      	lsls	r6, r3, #31
 801abe4:	d508      	bpl.n	801abf8 <_printf_i+0x14c>
 801abe6:	6923      	ldr	r3, [r4, #16]
 801abe8:	6861      	ldr	r1, [r4, #4]
 801abea:	4299      	cmp	r1, r3
 801abec:	bfde      	ittt	le
 801abee:	2330      	movle	r3, #48	; 0x30
 801abf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801abf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801abf8:	1b52      	subs	r2, r2, r5
 801abfa:	6122      	str	r2, [r4, #16]
 801abfc:	f8cd a000 	str.w	sl, [sp]
 801ac00:	464b      	mov	r3, r9
 801ac02:	aa03      	add	r2, sp, #12
 801ac04:	4621      	mov	r1, r4
 801ac06:	4640      	mov	r0, r8
 801ac08:	f7ff fee2 	bl	801a9d0 <_printf_common>
 801ac0c:	3001      	adds	r0, #1
 801ac0e:	d14c      	bne.n	801acaa <_printf_i+0x1fe>
 801ac10:	f04f 30ff 	mov.w	r0, #4294967295
 801ac14:	b004      	add	sp, #16
 801ac16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac1a:	4835      	ldr	r0, [pc, #212]	; (801acf0 <_printf_i+0x244>)
 801ac1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ac20:	6829      	ldr	r1, [r5, #0]
 801ac22:	6823      	ldr	r3, [r4, #0]
 801ac24:	f851 6b04 	ldr.w	r6, [r1], #4
 801ac28:	6029      	str	r1, [r5, #0]
 801ac2a:	061d      	lsls	r5, r3, #24
 801ac2c:	d514      	bpl.n	801ac58 <_printf_i+0x1ac>
 801ac2e:	07df      	lsls	r7, r3, #31
 801ac30:	bf44      	itt	mi
 801ac32:	f043 0320 	orrmi.w	r3, r3, #32
 801ac36:	6023      	strmi	r3, [r4, #0]
 801ac38:	b91e      	cbnz	r6, 801ac42 <_printf_i+0x196>
 801ac3a:	6823      	ldr	r3, [r4, #0]
 801ac3c:	f023 0320 	bic.w	r3, r3, #32
 801ac40:	6023      	str	r3, [r4, #0]
 801ac42:	2310      	movs	r3, #16
 801ac44:	e7b0      	b.n	801aba8 <_printf_i+0xfc>
 801ac46:	6823      	ldr	r3, [r4, #0]
 801ac48:	f043 0320 	orr.w	r3, r3, #32
 801ac4c:	6023      	str	r3, [r4, #0]
 801ac4e:	2378      	movs	r3, #120	; 0x78
 801ac50:	4828      	ldr	r0, [pc, #160]	; (801acf4 <_printf_i+0x248>)
 801ac52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ac56:	e7e3      	b.n	801ac20 <_printf_i+0x174>
 801ac58:	0659      	lsls	r1, r3, #25
 801ac5a:	bf48      	it	mi
 801ac5c:	b2b6      	uxthmi	r6, r6
 801ac5e:	e7e6      	b.n	801ac2e <_printf_i+0x182>
 801ac60:	4615      	mov	r5, r2
 801ac62:	e7bb      	b.n	801abdc <_printf_i+0x130>
 801ac64:	682b      	ldr	r3, [r5, #0]
 801ac66:	6826      	ldr	r6, [r4, #0]
 801ac68:	6961      	ldr	r1, [r4, #20]
 801ac6a:	1d18      	adds	r0, r3, #4
 801ac6c:	6028      	str	r0, [r5, #0]
 801ac6e:	0635      	lsls	r5, r6, #24
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	d501      	bpl.n	801ac78 <_printf_i+0x1cc>
 801ac74:	6019      	str	r1, [r3, #0]
 801ac76:	e002      	b.n	801ac7e <_printf_i+0x1d2>
 801ac78:	0670      	lsls	r0, r6, #25
 801ac7a:	d5fb      	bpl.n	801ac74 <_printf_i+0x1c8>
 801ac7c:	8019      	strh	r1, [r3, #0]
 801ac7e:	2300      	movs	r3, #0
 801ac80:	6123      	str	r3, [r4, #16]
 801ac82:	4615      	mov	r5, r2
 801ac84:	e7ba      	b.n	801abfc <_printf_i+0x150>
 801ac86:	682b      	ldr	r3, [r5, #0]
 801ac88:	1d1a      	adds	r2, r3, #4
 801ac8a:	602a      	str	r2, [r5, #0]
 801ac8c:	681d      	ldr	r5, [r3, #0]
 801ac8e:	6862      	ldr	r2, [r4, #4]
 801ac90:	2100      	movs	r1, #0
 801ac92:	4628      	mov	r0, r5
 801ac94:	f7e5 fa9c 	bl	80001d0 <memchr>
 801ac98:	b108      	cbz	r0, 801ac9e <_printf_i+0x1f2>
 801ac9a:	1b40      	subs	r0, r0, r5
 801ac9c:	6060      	str	r0, [r4, #4]
 801ac9e:	6863      	ldr	r3, [r4, #4]
 801aca0:	6123      	str	r3, [r4, #16]
 801aca2:	2300      	movs	r3, #0
 801aca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aca8:	e7a8      	b.n	801abfc <_printf_i+0x150>
 801acaa:	6923      	ldr	r3, [r4, #16]
 801acac:	462a      	mov	r2, r5
 801acae:	4649      	mov	r1, r9
 801acb0:	4640      	mov	r0, r8
 801acb2:	47d0      	blx	sl
 801acb4:	3001      	adds	r0, #1
 801acb6:	d0ab      	beq.n	801ac10 <_printf_i+0x164>
 801acb8:	6823      	ldr	r3, [r4, #0]
 801acba:	079b      	lsls	r3, r3, #30
 801acbc:	d413      	bmi.n	801ace6 <_printf_i+0x23a>
 801acbe:	68e0      	ldr	r0, [r4, #12]
 801acc0:	9b03      	ldr	r3, [sp, #12]
 801acc2:	4298      	cmp	r0, r3
 801acc4:	bfb8      	it	lt
 801acc6:	4618      	movlt	r0, r3
 801acc8:	e7a4      	b.n	801ac14 <_printf_i+0x168>
 801acca:	2301      	movs	r3, #1
 801accc:	4632      	mov	r2, r6
 801acce:	4649      	mov	r1, r9
 801acd0:	4640      	mov	r0, r8
 801acd2:	47d0      	blx	sl
 801acd4:	3001      	adds	r0, #1
 801acd6:	d09b      	beq.n	801ac10 <_printf_i+0x164>
 801acd8:	3501      	adds	r5, #1
 801acda:	68e3      	ldr	r3, [r4, #12]
 801acdc:	9903      	ldr	r1, [sp, #12]
 801acde:	1a5b      	subs	r3, r3, r1
 801ace0:	42ab      	cmp	r3, r5
 801ace2:	dcf2      	bgt.n	801acca <_printf_i+0x21e>
 801ace4:	e7eb      	b.n	801acbe <_printf_i+0x212>
 801ace6:	2500      	movs	r5, #0
 801ace8:	f104 0619 	add.w	r6, r4, #25
 801acec:	e7f5      	b.n	801acda <_printf_i+0x22e>
 801acee:	bf00      	nop
 801acf0:	0801da11 	.word	0x0801da11
 801acf4:	0801da22 	.word	0x0801da22

0801acf8 <_sbrk_r>:
 801acf8:	b538      	push	{r3, r4, r5, lr}
 801acfa:	4d06      	ldr	r5, [pc, #24]	; (801ad14 <_sbrk_r+0x1c>)
 801acfc:	2300      	movs	r3, #0
 801acfe:	4604      	mov	r4, r0
 801ad00:	4608      	mov	r0, r1
 801ad02:	602b      	str	r3, [r5, #0]
 801ad04:	f7ea fb14 	bl	8005330 <_sbrk>
 801ad08:	1c43      	adds	r3, r0, #1
 801ad0a:	d102      	bne.n	801ad12 <_sbrk_r+0x1a>
 801ad0c:	682b      	ldr	r3, [r5, #0]
 801ad0e:	b103      	cbz	r3, 801ad12 <_sbrk_r+0x1a>
 801ad10:	6023      	str	r3, [r4, #0]
 801ad12:	bd38      	pop	{r3, r4, r5, pc}
 801ad14:	20004b2c 	.word	0x20004b2c

0801ad18 <_raise_r>:
 801ad18:	291f      	cmp	r1, #31
 801ad1a:	b538      	push	{r3, r4, r5, lr}
 801ad1c:	4604      	mov	r4, r0
 801ad1e:	460d      	mov	r5, r1
 801ad20:	d904      	bls.n	801ad2c <_raise_r+0x14>
 801ad22:	2316      	movs	r3, #22
 801ad24:	6003      	str	r3, [r0, #0]
 801ad26:	f04f 30ff 	mov.w	r0, #4294967295
 801ad2a:	bd38      	pop	{r3, r4, r5, pc}
 801ad2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ad2e:	b112      	cbz	r2, 801ad36 <_raise_r+0x1e>
 801ad30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ad34:	b94b      	cbnz	r3, 801ad4a <_raise_r+0x32>
 801ad36:	4620      	mov	r0, r4
 801ad38:	f000 f830 	bl	801ad9c <_getpid_r>
 801ad3c:	462a      	mov	r2, r5
 801ad3e:	4601      	mov	r1, r0
 801ad40:	4620      	mov	r0, r4
 801ad42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad46:	f000 b817 	b.w	801ad78 <_kill_r>
 801ad4a:	2b01      	cmp	r3, #1
 801ad4c:	d00a      	beq.n	801ad64 <_raise_r+0x4c>
 801ad4e:	1c59      	adds	r1, r3, #1
 801ad50:	d103      	bne.n	801ad5a <_raise_r+0x42>
 801ad52:	2316      	movs	r3, #22
 801ad54:	6003      	str	r3, [r0, #0]
 801ad56:	2001      	movs	r0, #1
 801ad58:	e7e7      	b.n	801ad2a <_raise_r+0x12>
 801ad5a:	2400      	movs	r4, #0
 801ad5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ad60:	4628      	mov	r0, r5
 801ad62:	4798      	blx	r3
 801ad64:	2000      	movs	r0, #0
 801ad66:	e7e0      	b.n	801ad2a <_raise_r+0x12>

0801ad68 <raise>:
 801ad68:	4b02      	ldr	r3, [pc, #8]	; (801ad74 <raise+0xc>)
 801ad6a:	4601      	mov	r1, r0
 801ad6c:	6818      	ldr	r0, [r3, #0]
 801ad6e:	f7ff bfd3 	b.w	801ad18 <_raise_r>
 801ad72:	bf00      	nop
 801ad74:	20000258 	.word	0x20000258

0801ad78 <_kill_r>:
 801ad78:	b538      	push	{r3, r4, r5, lr}
 801ad7a:	4d07      	ldr	r5, [pc, #28]	; (801ad98 <_kill_r+0x20>)
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	4604      	mov	r4, r0
 801ad80:	4608      	mov	r0, r1
 801ad82:	4611      	mov	r1, r2
 801ad84:	602b      	str	r3, [r5, #0]
 801ad86:	f7ea fa4b 	bl	8005220 <_kill>
 801ad8a:	1c43      	adds	r3, r0, #1
 801ad8c:	d102      	bne.n	801ad94 <_kill_r+0x1c>
 801ad8e:	682b      	ldr	r3, [r5, #0]
 801ad90:	b103      	cbz	r3, 801ad94 <_kill_r+0x1c>
 801ad92:	6023      	str	r3, [r4, #0]
 801ad94:	bd38      	pop	{r3, r4, r5, pc}
 801ad96:	bf00      	nop
 801ad98:	20004b2c 	.word	0x20004b2c

0801ad9c <_getpid_r>:
 801ad9c:	f7ea ba38 	b.w	8005210 <_getpid>

0801ada0 <_vsiprintf_r>:
 801ada0:	b500      	push	{lr}
 801ada2:	b09b      	sub	sp, #108	; 0x6c
 801ada4:	9100      	str	r1, [sp, #0]
 801ada6:	9104      	str	r1, [sp, #16]
 801ada8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801adac:	9105      	str	r1, [sp, #20]
 801adae:	9102      	str	r1, [sp, #8]
 801adb0:	4905      	ldr	r1, [pc, #20]	; (801adc8 <_vsiprintf_r+0x28>)
 801adb2:	9103      	str	r1, [sp, #12]
 801adb4:	4669      	mov	r1, sp
 801adb6:	f000 fb85 	bl	801b4c4 <_svfiprintf_r>
 801adba:	9b00      	ldr	r3, [sp, #0]
 801adbc:	2200      	movs	r2, #0
 801adbe:	701a      	strb	r2, [r3, #0]
 801adc0:	b01b      	add	sp, #108	; 0x6c
 801adc2:	f85d fb04 	ldr.w	pc, [sp], #4
 801adc6:	bf00      	nop
 801adc8:	ffff0208 	.word	0xffff0208

0801adcc <vsiprintf>:
 801adcc:	4613      	mov	r3, r2
 801adce:	460a      	mov	r2, r1
 801add0:	4601      	mov	r1, r0
 801add2:	4802      	ldr	r0, [pc, #8]	; (801addc <vsiprintf+0x10>)
 801add4:	6800      	ldr	r0, [r0, #0]
 801add6:	f7ff bfe3 	b.w	801ada0 <_vsiprintf_r>
 801adda:	bf00      	nop
 801addc:	20000258 	.word	0x20000258

0801ade0 <__swbuf_r>:
 801ade0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ade2:	460e      	mov	r6, r1
 801ade4:	4614      	mov	r4, r2
 801ade6:	4605      	mov	r5, r0
 801ade8:	b118      	cbz	r0, 801adf2 <__swbuf_r+0x12>
 801adea:	6983      	ldr	r3, [r0, #24]
 801adec:	b90b      	cbnz	r3, 801adf2 <__swbuf_r+0x12>
 801adee:	f000 f9d1 	bl	801b194 <__sinit>
 801adf2:	4b21      	ldr	r3, [pc, #132]	; (801ae78 <__swbuf_r+0x98>)
 801adf4:	429c      	cmp	r4, r3
 801adf6:	d12b      	bne.n	801ae50 <__swbuf_r+0x70>
 801adf8:	686c      	ldr	r4, [r5, #4]
 801adfa:	69a3      	ldr	r3, [r4, #24]
 801adfc:	60a3      	str	r3, [r4, #8]
 801adfe:	89a3      	ldrh	r3, [r4, #12]
 801ae00:	071a      	lsls	r2, r3, #28
 801ae02:	d52f      	bpl.n	801ae64 <__swbuf_r+0x84>
 801ae04:	6923      	ldr	r3, [r4, #16]
 801ae06:	b36b      	cbz	r3, 801ae64 <__swbuf_r+0x84>
 801ae08:	6923      	ldr	r3, [r4, #16]
 801ae0a:	6820      	ldr	r0, [r4, #0]
 801ae0c:	1ac0      	subs	r0, r0, r3
 801ae0e:	6963      	ldr	r3, [r4, #20]
 801ae10:	b2f6      	uxtb	r6, r6
 801ae12:	4283      	cmp	r3, r0
 801ae14:	4637      	mov	r7, r6
 801ae16:	dc04      	bgt.n	801ae22 <__swbuf_r+0x42>
 801ae18:	4621      	mov	r1, r4
 801ae1a:	4628      	mov	r0, r5
 801ae1c:	f000 f926 	bl	801b06c <_fflush_r>
 801ae20:	bb30      	cbnz	r0, 801ae70 <__swbuf_r+0x90>
 801ae22:	68a3      	ldr	r3, [r4, #8]
 801ae24:	3b01      	subs	r3, #1
 801ae26:	60a3      	str	r3, [r4, #8]
 801ae28:	6823      	ldr	r3, [r4, #0]
 801ae2a:	1c5a      	adds	r2, r3, #1
 801ae2c:	6022      	str	r2, [r4, #0]
 801ae2e:	701e      	strb	r6, [r3, #0]
 801ae30:	6963      	ldr	r3, [r4, #20]
 801ae32:	3001      	adds	r0, #1
 801ae34:	4283      	cmp	r3, r0
 801ae36:	d004      	beq.n	801ae42 <__swbuf_r+0x62>
 801ae38:	89a3      	ldrh	r3, [r4, #12]
 801ae3a:	07db      	lsls	r3, r3, #31
 801ae3c:	d506      	bpl.n	801ae4c <__swbuf_r+0x6c>
 801ae3e:	2e0a      	cmp	r6, #10
 801ae40:	d104      	bne.n	801ae4c <__swbuf_r+0x6c>
 801ae42:	4621      	mov	r1, r4
 801ae44:	4628      	mov	r0, r5
 801ae46:	f000 f911 	bl	801b06c <_fflush_r>
 801ae4a:	b988      	cbnz	r0, 801ae70 <__swbuf_r+0x90>
 801ae4c:	4638      	mov	r0, r7
 801ae4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae50:	4b0a      	ldr	r3, [pc, #40]	; (801ae7c <__swbuf_r+0x9c>)
 801ae52:	429c      	cmp	r4, r3
 801ae54:	d101      	bne.n	801ae5a <__swbuf_r+0x7a>
 801ae56:	68ac      	ldr	r4, [r5, #8]
 801ae58:	e7cf      	b.n	801adfa <__swbuf_r+0x1a>
 801ae5a:	4b09      	ldr	r3, [pc, #36]	; (801ae80 <__swbuf_r+0xa0>)
 801ae5c:	429c      	cmp	r4, r3
 801ae5e:	bf08      	it	eq
 801ae60:	68ec      	ldreq	r4, [r5, #12]
 801ae62:	e7ca      	b.n	801adfa <__swbuf_r+0x1a>
 801ae64:	4621      	mov	r1, r4
 801ae66:	4628      	mov	r0, r5
 801ae68:	f000 f80c 	bl	801ae84 <__swsetup_r>
 801ae6c:	2800      	cmp	r0, #0
 801ae6e:	d0cb      	beq.n	801ae08 <__swbuf_r+0x28>
 801ae70:	f04f 37ff 	mov.w	r7, #4294967295
 801ae74:	e7ea      	b.n	801ae4c <__swbuf_r+0x6c>
 801ae76:	bf00      	nop
 801ae78:	0801da54 	.word	0x0801da54
 801ae7c:	0801da74 	.word	0x0801da74
 801ae80:	0801da34 	.word	0x0801da34

0801ae84 <__swsetup_r>:
 801ae84:	4b32      	ldr	r3, [pc, #200]	; (801af50 <__swsetup_r+0xcc>)
 801ae86:	b570      	push	{r4, r5, r6, lr}
 801ae88:	681d      	ldr	r5, [r3, #0]
 801ae8a:	4606      	mov	r6, r0
 801ae8c:	460c      	mov	r4, r1
 801ae8e:	b125      	cbz	r5, 801ae9a <__swsetup_r+0x16>
 801ae90:	69ab      	ldr	r3, [r5, #24]
 801ae92:	b913      	cbnz	r3, 801ae9a <__swsetup_r+0x16>
 801ae94:	4628      	mov	r0, r5
 801ae96:	f000 f97d 	bl	801b194 <__sinit>
 801ae9a:	4b2e      	ldr	r3, [pc, #184]	; (801af54 <__swsetup_r+0xd0>)
 801ae9c:	429c      	cmp	r4, r3
 801ae9e:	d10f      	bne.n	801aec0 <__swsetup_r+0x3c>
 801aea0:	686c      	ldr	r4, [r5, #4]
 801aea2:	89a3      	ldrh	r3, [r4, #12]
 801aea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aea8:	0719      	lsls	r1, r3, #28
 801aeaa:	d42c      	bmi.n	801af06 <__swsetup_r+0x82>
 801aeac:	06dd      	lsls	r5, r3, #27
 801aeae:	d411      	bmi.n	801aed4 <__swsetup_r+0x50>
 801aeb0:	2309      	movs	r3, #9
 801aeb2:	6033      	str	r3, [r6, #0]
 801aeb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801aeb8:	81a3      	strh	r3, [r4, #12]
 801aeba:	f04f 30ff 	mov.w	r0, #4294967295
 801aebe:	e03e      	b.n	801af3e <__swsetup_r+0xba>
 801aec0:	4b25      	ldr	r3, [pc, #148]	; (801af58 <__swsetup_r+0xd4>)
 801aec2:	429c      	cmp	r4, r3
 801aec4:	d101      	bne.n	801aeca <__swsetup_r+0x46>
 801aec6:	68ac      	ldr	r4, [r5, #8]
 801aec8:	e7eb      	b.n	801aea2 <__swsetup_r+0x1e>
 801aeca:	4b24      	ldr	r3, [pc, #144]	; (801af5c <__swsetup_r+0xd8>)
 801aecc:	429c      	cmp	r4, r3
 801aece:	bf08      	it	eq
 801aed0:	68ec      	ldreq	r4, [r5, #12]
 801aed2:	e7e6      	b.n	801aea2 <__swsetup_r+0x1e>
 801aed4:	0758      	lsls	r0, r3, #29
 801aed6:	d512      	bpl.n	801aefe <__swsetup_r+0x7a>
 801aed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aeda:	b141      	cbz	r1, 801aeee <__swsetup_r+0x6a>
 801aedc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aee0:	4299      	cmp	r1, r3
 801aee2:	d002      	beq.n	801aeea <__swsetup_r+0x66>
 801aee4:	4630      	mov	r0, r6
 801aee6:	f7ff fb39 	bl	801a55c <_free_r>
 801aeea:	2300      	movs	r3, #0
 801aeec:	6363      	str	r3, [r4, #52]	; 0x34
 801aeee:	89a3      	ldrh	r3, [r4, #12]
 801aef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aef4:	81a3      	strh	r3, [r4, #12]
 801aef6:	2300      	movs	r3, #0
 801aef8:	6063      	str	r3, [r4, #4]
 801aefa:	6923      	ldr	r3, [r4, #16]
 801aefc:	6023      	str	r3, [r4, #0]
 801aefe:	89a3      	ldrh	r3, [r4, #12]
 801af00:	f043 0308 	orr.w	r3, r3, #8
 801af04:	81a3      	strh	r3, [r4, #12]
 801af06:	6923      	ldr	r3, [r4, #16]
 801af08:	b94b      	cbnz	r3, 801af1e <__swsetup_r+0x9a>
 801af0a:	89a3      	ldrh	r3, [r4, #12]
 801af0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801af10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801af14:	d003      	beq.n	801af1e <__swsetup_r+0x9a>
 801af16:	4621      	mov	r1, r4
 801af18:	4630      	mov	r0, r6
 801af1a:	f000 f9fd 	bl	801b318 <__smakebuf_r>
 801af1e:	89a0      	ldrh	r0, [r4, #12]
 801af20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af24:	f010 0301 	ands.w	r3, r0, #1
 801af28:	d00a      	beq.n	801af40 <__swsetup_r+0xbc>
 801af2a:	2300      	movs	r3, #0
 801af2c:	60a3      	str	r3, [r4, #8]
 801af2e:	6963      	ldr	r3, [r4, #20]
 801af30:	425b      	negs	r3, r3
 801af32:	61a3      	str	r3, [r4, #24]
 801af34:	6923      	ldr	r3, [r4, #16]
 801af36:	b943      	cbnz	r3, 801af4a <__swsetup_r+0xc6>
 801af38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801af3c:	d1ba      	bne.n	801aeb4 <__swsetup_r+0x30>
 801af3e:	bd70      	pop	{r4, r5, r6, pc}
 801af40:	0781      	lsls	r1, r0, #30
 801af42:	bf58      	it	pl
 801af44:	6963      	ldrpl	r3, [r4, #20]
 801af46:	60a3      	str	r3, [r4, #8]
 801af48:	e7f4      	b.n	801af34 <__swsetup_r+0xb0>
 801af4a:	2000      	movs	r0, #0
 801af4c:	e7f7      	b.n	801af3e <__swsetup_r+0xba>
 801af4e:	bf00      	nop
 801af50:	20000258 	.word	0x20000258
 801af54:	0801da54 	.word	0x0801da54
 801af58:	0801da74 	.word	0x0801da74
 801af5c:	0801da34 	.word	0x0801da34

0801af60 <__sflush_r>:
 801af60:	898a      	ldrh	r2, [r1, #12]
 801af62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af66:	4605      	mov	r5, r0
 801af68:	0710      	lsls	r0, r2, #28
 801af6a:	460c      	mov	r4, r1
 801af6c:	d458      	bmi.n	801b020 <__sflush_r+0xc0>
 801af6e:	684b      	ldr	r3, [r1, #4]
 801af70:	2b00      	cmp	r3, #0
 801af72:	dc05      	bgt.n	801af80 <__sflush_r+0x20>
 801af74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801af76:	2b00      	cmp	r3, #0
 801af78:	dc02      	bgt.n	801af80 <__sflush_r+0x20>
 801af7a:	2000      	movs	r0, #0
 801af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af82:	2e00      	cmp	r6, #0
 801af84:	d0f9      	beq.n	801af7a <__sflush_r+0x1a>
 801af86:	2300      	movs	r3, #0
 801af88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801af8c:	682f      	ldr	r7, [r5, #0]
 801af8e:	602b      	str	r3, [r5, #0]
 801af90:	d032      	beq.n	801aff8 <__sflush_r+0x98>
 801af92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801af94:	89a3      	ldrh	r3, [r4, #12]
 801af96:	075a      	lsls	r2, r3, #29
 801af98:	d505      	bpl.n	801afa6 <__sflush_r+0x46>
 801af9a:	6863      	ldr	r3, [r4, #4]
 801af9c:	1ac0      	subs	r0, r0, r3
 801af9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801afa0:	b10b      	cbz	r3, 801afa6 <__sflush_r+0x46>
 801afa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801afa4:	1ac0      	subs	r0, r0, r3
 801afa6:	2300      	movs	r3, #0
 801afa8:	4602      	mov	r2, r0
 801afaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801afac:	6a21      	ldr	r1, [r4, #32]
 801afae:	4628      	mov	r0, r5
 801afb0:	47b0      	blx	r6
 801afb2:	1c43      	adds	r3, r0, #1
 801afb4:	89a3      	ldrh	r3, [r4, #12]
 801afb6:	d106      	bne.n	801afc6 <__sflush_r+0x66>
 801afb8:	6829      	ldr	r1, [r5, #0]
 801afba:	291d      	cmp	r1, #29
 801afbc:	d82c      	bhi.n	801b018 <__sflush_r+0xb8>
 801afbe:	4a2a      	ldr	r2, [pc, #168]	; (801b068 <__sflush_r+0x108>)
 801afc0:	40ca      	lsrs	r2, r1
 801afc2:	07d6      	lsls	r6, r2, #31
 801afc4:	d528      	bpl.n	801b018 <__sflush_r+0xb8>
 801afc6:	2200      	movs	r2, #0
 801afc8:	6062      	str	r2, [r4, #4]
 801afca:	04d9      	lsls	r1, r3, #19
 801afcc:	6922      	ldr	r2, [r4, #16]
 801afce:	6022      	str	r2, [r4, #0]
 801afd0:	d504      	bpl.n	801afdc <__sflush_r+0x7c>
 801afd2:	1c42      	adds	r2, r0, #1
 801afd4:	d101      	bne.n	801afda <__sflush_r+0x7a>
 801afd6:	682b      	ldr	r3, [r5, #0]
 801afd8:	b903      	cbnz	r3, 801afdc <__sflush_r+0x7c>
 801afda:	6560      	str	r0, [r4, #84]	; 0x54
 801afdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afde:	602f      	str	r7, [r5, #0]
 801afe0:	2900      	cmp	r1, #0
 801afe2:	d0ca      	beq.n	801af7a <__sflush_r+0x1a>
 801afe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afe8:	4299      	cmp	r1, r3
 801afea:	d002      	beq.n	801aff2 <__sflush_r+0x92>
 801afec:	4628      	mov	r0, r5
 801afee:	f7ff fab5 	bl	801a55c <_free_r>
 801aff2:	2000      	movs	r0, #0
 801aff4:	6360      	str	r0, [r4, #52]	; 0x34
 801aff6:	e7c1      	b.n	801af7c <__sflush_r+0x1c>
 801aff8:	6a21      	ldr	r1, [r4, #32]
 801affa:	2301      	movs	r3, #1
 801affc:	4628      	mov	r0, r5
 801affe:	47b0      	blx	r6
 801b000:	1c41      	adds	r1, r0, #1
 801b002:	d1c7      	bne.n	801af94 <__sflush_r+0x34>
 801b004:	682b      	ldr	r3, [r5, #0]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d0c4      	beq.n	801af94 <__sflush_r+0x34>
 801b00a:	2b1d      	cmp	r3, #29
 801b00c:	d001      	beq.n	801b012 <__sflush_r+0xb2>
 801b00e:	2b16      	cmp	r3, #22
 801b010:	d101      	bne.n	801b016 <__sflush_r+0xb6>
 801b012:	602f      	str	r7, [r5, #0]
 801b014:	e7b1      	b.n	801af7a <__sflush_r+0x1a>
 801b016:	89a3      	ldrh	r3, [r4, #12]
 801b018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b01c:	81a3      	strh	r3, [r4, #12]
 801b01e:	e7ad      	b.n	801af7c <__sflush_r+0x1c>
 801b020:	690f      	ldr	r7, [r1, #16]
 801b022:	2f00      	cmp	r7, #0
 801b024:	d0a9      	beq.n	801af7a <__sflush_r+0x1a>
 801b026:	0793      	lsls	r3, r2, #30
 801b028:	680e      	ldr	r6, [r1, #0]
 801b02a:	bf08      	it	eq
 801b02c:	694b      	ldreq	r3, [r1, #20]
 801b02e:	600f      	str	r7, [r1, #0]
 801b030:	bf18      	it	ne
 801b032:	2300      	movne	r3, #0
 801b034:	eba6 0807 	sub.w	r8, r6, r7
 801b038:	608b      	str	r3, [r1, #8]
 801b03a:	f1b8 0f00 	cmp.w	r8, #0
 801b03e:	dd9c      	ble.n	801af7a <__sflush_r+0x1a>
 801b040:	6a21      	ldr	r1, [r4, #32]
 801b042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b044:	4643      	mov	r3, r8
 801b046:	463a      	mov	r2, r7
 801b048:	4628      	mov	r0, r5
 801b04a:	47b0      	blx	r6
 801b04c:	2800      	cmp	r0, #0
 801b04e:	dc06      	bgt.n	801b05e <__sflush_r+0xfe>
 801b050:	89a3      	ldrh	r3, [r4, #12]
 801b052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b056:	81a3      	strh	r3, [r4, #12]
 801b058:	f04f 30ff 	mov.w	r0, #4294967295
 801b05c:	e78e      	b.n	801af7c <__sflush_r+0x1c>
 801b05e:	4407      	add	r7, r0
 801b060:	eba8 0800 	sub.w	r8, r8, r0
 801b064:	e7e9      	b.n	801b03a <__sflush_r+0xda>
 801b066:	bf00      	nop
 801b068:	20400001 	.word	0x20400001

0801b06c <_fflush_r>:
 801b06c:	b538      	push	{r3, r4, r5, lr}
 801b06e:	690b      	ldr	r3, [r1, #16]
 801b070:	4605      	mov	r5, r0
 801b072:	460c      	mov	r4, r1
 801b074:	b913      	cbnz	r3, 801b07c <_fflush_r+0x10>
 801b076:	2500      	movs	r5, #0
 801b078:	4628      	mov	r0, r5
 801b07a:	bd38      	pop	{r3, r4, r5, pc}
 801b07c:	b118      	cbz	r0, 801b086 <_fflush_r+0x1a>
 801b07e:	6983      	ldr	r3, [r0, #24]
 801b080:	b90b      	cbnz	r3, 801b086 <_fflush_r+0x1a>
 801b082:	f000 f887 	bl	801b194 <__sinit>
 801b086:	4b14      	ldr	r3, [pc, #80]	; (801b0d8 <_fflush_r+0x6c>)
 801b088:	429c      	cmp	r4, r3
 801b08a:	d11b      	bne.n	801b0c4 <_fflush_r+0x58>
 801b08c:	686c      	ldr	r4, [r5, #4]
 801b08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d0ef      	beq.n	801b076 <_fflush_r+0xa>
 801b096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b098:	07d0      	lsls	r0, r2, #31
 801b09a:	d404      	bmi.n	801b0a6 <_fflush_r+0x3a>
 801b09c:	0599      	lsls	r1, r3, #22
 801b09e:	d402      	bmi.n	801b0a6 <_fflush_r+0x3a>
 801b0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b0a2:	f7ff fa02 	bl	801a4aa <__retarget_lock_acquire_recursive>
 801b0a6:	4628      	mov	r0, r5
 801b0a8:	4621      	mov	r1, r4
 801b0aa:	f7ff ff59 	bl	801af60 <__sflush_r>
 801b0ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b0b0:	07da      	lsls	r2, r3, #31
 801b0b2:	4605      	mov	r5, r0
 801b0b4:	d4e0      	bmi.n	801b078 <_fflush_r+0xc>
 801b0b6:	89a3      	ldrh	r3, [r4, #12]
 801b0b8:	059b      	lsls	r3, r3, #22
 801b0ba:	d4dd      	bmi.n	801b078 <_fflush_r+0xc>
 801b0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b0be:	f7ff f9f5 	bl	801a4ac <__retarget_lock_release_recursive>
 801b0c2:	e7d9      	b.n	801b078 <_fflush_r+0xc>
 801b0c4:	4b05      	ldr	r3, [pc, #20]	; (801b0dc <_fflush_r+0x70>)
 801b0c6:	429c      	cmp	r4, r3
 801b0c8:	d101      	bne.n	801b0ce <_fflush_r+0x62>
 801b0ca:	68ac      	ldr	r4, [r5, #8]
 801b0cc:	e7df      	b.n	801b08e <_fflush_r+0x22>
 801b0ce:	4b04      	ldr	r3, [pc, #16]	; (801b0e0 <_fflush_r+0x74>)
 801b0d0:	429c      	cmp	r4, r3
 801b0d2:	bf08      	it	eq
 801b0d4:	68ec      	ldreq	r4, [r5, #12]
 801b0d6:	e7da      	b.n	801b08e <_fflush_r+0x22>
 801b0d8:	0801da54 	.word	0x0801da54
 801b0dc:	0801da74 	.word	0x0801da74
 801b0e0:	0801da34 	.word	0x0801da34

0801b0e4 <std>:
 801b0e4:	2300      	movs	r3, #0
 801b0e6:	b510      	push	{r4, lr}
 801b0e8:	4604      	mov	r4, r0
 801b0ea:	e9c0 3300 	strd	r3, r3, [r0]
 801b0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b0f2:	6083      	str	r3, [r0, #8]
 801b0f4:	8181      	strh	r1, [r0, #12]
 801b0f6:	6643      	str	r3, [r0, #100]	; 0x64
 801b0f8:	81c2      	strh	r2, [r0, #14]
 801b0fa:	6183      	str	r3, [r0, #24]
 801b0fc:	4619      	mov	r1, r3
 801b0fe:	2208      	movs	r2, #8
 801b100:	305c      	adds	r0, #92	; 0x5c
 801b102:	f7ff fa0d 	bl	801a520 <memset>
 801b106:	4b05      	ldr	r3, [pc, #20]	; (801b11c <std+0x38>)
 801b108:	6263      	str	r3, [r4, #36]	; 0x24
 801b10a:	4b05      	ldr	r3, [pc, #20]	; (801b120 <std+0x3c>)
 801b10c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b10e:	4b05      	ldr	r3, [pc, #20]	; (801b124 <std+0x40>)
 801b110:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b112:	4b05      	ldr	r3, [pc, #20]	; (801b128 <std+0x44>)
 801b114:	6224      	str	r4, [r4, #32]
 801b116:	6323      	str	r3, [r4, #48]	; 0x30
 801b118:	bd10      	pop	{r4, pc}
 801b11a:	bf00      	nop
 801b11c:	0801b6c5 	.word	0x0801b6c5
 801b120:	0801b6e7 	.word	0x0801b6e7
 801b124:	0801b71f 	.word	0x0801b71f
 801b128:	0801b743 	.word	0x0801b743

0801b12c <_cleanup_r>:
 801b12c:	4901      	ldr	r1, [pc, #4]	; (801b134 <_cleanup_r+0x8>)
 801b12e:	f000 b8af 	b.w	801b290 <_fwalk_reent>
 801b132:	bf00      	nop
 801b134:	0801b06d 	.word	0x0801b06d

0801b138 <__sfmoreglue>:
 801b138:	b570      	push	{r4, r5, r6, lr}
 801b13a:	2268      	movs	r2, #104	; 0x68
 801b13c:	1e4d      	subs	r5, r1, #1
 801b13e:	4355      	muls	r5, r2
 801b140:	460e      	mov	r6, r1
 801b142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b146:	f7ff fa75 	bl	801a634 <_malloc_r>
 801b14a:	4604      	mov	r4, r0
 801b14c:	b140      	cbz	r0, 801b160 <__sfmoreglue+0x28>
 801b14e:	2100      	movs	r1, #0
 801b150:	e9c0 1600 	strd	r1, r6, [r0]
 801b154:	300c      	adds	r0, #12
 801b156:	60a0      	str	r0, [r4, #8]
 801b158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b15c:	f7ff f9e0 	bl	801a520 <memset>
 801b160:	4620      	mov	r0, r4
 801b162:	bd70      	pop	{r4, r5, r6, pc}

0801b164 <__sfp_lock_acquire>:
 801b164:	4801      	ldr	r0, [pc, #4]	; (801b16c <__sfp_lock_acquire+0x8>)
 801b166:	f7ff b9a0 	b.w	801a4aa <__retarget_lock_acquire_recursive>
 801b16a:	bf00      	nop
 801b16c:	20004b21 	.word	0x20004b21

0801b170 <__sfp_lock_release>:
 801b170:	4801      	ldr	r0, [pc, #4]	; (801b178 <__sfp_lock_release+0x8>)
 801b172:	f7ff b99b 	b.w	801a4ac <__retarget_lock_release_recursive>
 801b176:	bf00      	nop
 801b178:	20004b21 	.word	0x20004b21

0801b17c <__sinit_lock_acquire>:
 801b17c:	4801      	ldr	r0, [pc, #4]	; (801b184 <__sinit_lock_acquire+0x8>)
 801b17e:	f7ff b994 	b.w	801a4aa <__retarget_lock_acquire_recursive>
 801b182:	bf00      	nop
 801b184:	20004b22 	.word	0x20004b22

0801b188 <__sinit_lock_release>:
 801b188:	4801      	ldr	r0, [pc, #4]	; (801b190 <__sinit_lock_release+0x8>)
 801b18a:	f7ff b98f 	b.w	801a4ac <__retarget_lock_release_recursive>
 801b18e:	bf00      	nop
 801b190:	20004b22 	.word	0x20004b22

0801b194 <__sinit>:
 801b194:	b510      	push	{r4, lr}
 801b196:	4604      	mov	r4, r0
 801b198:	f7ff fff0 	bl	801b17c <__sinit_lock_acquire>
 801b19c:	69a3      	ldr	r3, [r4, #24]
 801b19e:	b11b      	cbz	r3, 801b1a8 <__sinit+0x14>
 801b1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1a4:	f7ff bff0 	b.w	801b188 <__sinit_lock_release>
 801b1a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b1ac:	6523      	str	r3, [r4, #80]	; 0x50
 801b1ae:	4b13      	ldr	r3, [pc, #76]	; (801b1fc <__sinit+0x68>)
 801b1b0:	4a13      	ldr	r2, [pc, #76]	; (801b200 <__sinit+0x6c>)
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	62a2      	str	r2, [r4, #40]	; 0x28
 801b1b6:	42a3      	cmp	r3, r4
 801b1b8:	bf04      	itt	eq
 801b1ba:	2301      	moveq	r3, #1
 801b1bc:	61a3      	streq	r3, [r4, #24]
 801b1be:	4620      	mov	r0, r4
 801b1c0:	f000 f820 	bl	801b204 <__sfp>
 801b1c4:	6060      	str	r0, [r4, #4]
 801b1c6:	4620      	mov	r0, r4
 801b1c8:	f000 f81c 	bl	801b204 <__sfp>
 801b1cc:	60a0      	str	r0, [r4, #8]
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	f000 f818 	bl	801b204 <__sfp>
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	60e0      	str	r0, [r4, #12]
 801b1d8:	2104      	movs	r1, #4
 801b1da:	6860      	ldr	r0, [r4, #4]
 801b1dc:	f7ff ff82 	bl	801b0e4 <std>
 801b1e0:	68a0      	ldr	r0, [r4, #8]
 801b1e2:	2201      	movs	r2, #1
 801b1e4:	2109      	movs	r1, #9
 801b1e6:	f7ff ff7d 	bl	801b0e4 <std>
 801b1ea:	68e0      	ldr	r0, [r4, #12]
 801b1ec:	2202      	movs	r2, #2
 801b1ee:	2112      	movs	r1, #18
 801b1f0:	f7ff ff78 	bl	801b0e4 <std>
 801b1f4:	2301      	movs	r3, #1
 801b1f6:	61a3      	str	r3, [r4, #24]
 801b1f8:	e7d2      	b.n	801b1a0 <__sinit+0xc>
 801b1fa:	bf00      	nop
 801b1fc:	0801d9fc 	.word	0x0801d9fc
 801b200:	0801b12d 	.word	0x0801b12d

0801b204 <__sfp>:
 801b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b206:	4607      	mov	r7, r0
 801b208:	f7ff ffac 	bl	801b164 <__sfp_lock_acquire>
 801b20c:	4b1e      	ldr	r3, [pc, #120]	; (801b288 <__sfp+0x84>)
 801b20e:	681e      	ldr	r6, [r3, #0]
 801b210:	69b3      	ldr	r3, [r6, #24]
 801b212:	b913      	cbnz	r3, 801b21a <__sfp+0x16>
 801b214:	4630      	mov	r0, r6
 801b216:	f7ff ffbd 	bl	801b194 <__sinit>
 801b21a:	3648      	adds	r6, #72	; 0x48
 801b21c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b220:	3b01      	subs	r3, #1
 801b222:	d503      	bpl.n	801b22c <__sfp+0x28>
 801b224:	6833      	ldr	r3, [r6, #0]
 801b226:	b30b      	cbz	r3, 801b26c <__sfp+0x68>
 801b228:	6836      	ldr	r6, [r6, #0]
 801b22a:	e7f7      	b.n	801b21c <__sfp+0x18>
 801b22c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b230:	b9d5      	cbnz	r5, 801b268 <__sfp+0x64>
 801b232:	4b16      	ldr	r3, [pc, #88]	; (801b28c <__sfp+0x88>)
 801b234:	60e3      	str	r3, [r4, #12]
 801b236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b23a:	6665      	str	r5, [r4, #100]	; 0x64
 801b23c:	f7ff f934 	bl	801a4a8 <__retarget_lock_init_recursive>
 801b240:	f7ff ff96 	bl	801b170 <__sfp_lock_release>
 801b244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b24c:	6025      	str	r5, [r4, #0]
 801b24e:	61a5      	str	r5, [r4, #24]
 801b250:	2208      	movs	r2, #8
 801b252:	4629      	mov	r1, r5
 801b254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b258:	f7ff f962 	bl	801a520 <memset>
 801b25c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b264:	4620      	mov	r0, r4
 801b266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b268:	3468      	adds	r4, #104	; 0x68
 801b26a:	e7d9      	b.n	801b220 <__sfp+0x1c>
 801b26c:	2104      	movs	r1, #4
 801b26e:	4638      	mov	r0, r7
 801b270:	f7ff ff62 	bl	801b138 <__sfmoreglue>
 801b274:	4604      	mov	r4, r0
 801b276:	6030      	str	r0, [r6, #0]
 801b278:	2800      	cmp	r0, #0
 801b27a:	d1d5      	bne.n	801b228 <__sfp+0x24>
 801b27c:	f7ff ff78 	bl	801b170 <__sfp_lock_release>
 801b280:	230c      	movs	r3, #12
 801b282:	603b      	str	r3, [r7, #0]
 801b284:	e7ee      	b.n	801b264 <__sfp+0x60>
 801b286:	bf00      	nop
 801b288:	0801d9fc 	.word	0x0801d9fc
 801b28c:	ffff0001 	.word	0xffff0001

0801b290 <_fwalk_reent>:
 801b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b294:	4606      	mov	r6, r0
 801b296:	4688      	mov	r8, r1
 801b298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b29c:	2700      	movs	r7, #0
 801b29e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b2a2:	f1b9 0901 	subs.w	r9, r9, #1
 801b2a6:	d505      	bpl.n	801b2b4 <_fwalk_reent+0x24>
 801b2a8:	6824      	ldr	r4, [r4, #0]
 801b2aa:	2c00      	cmp	r4, #0
 801b2ac:	d1f7      	bne.n	801b29e <_fwalk_reent+0xe>
 801b2ae:	4638      	mov	r0, r7
 801b2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2b4:	89ab      	ldrh	r3, [r5, #12]
 801b2b6:	2b01      	cmp	r3, #1
 801b2b8:	d907      	bls.n	801b2ca <_fwalk_reent+0x3a>
 801b2ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b2be:	3301      	adds	r3, #1
 801b2c0:	d003      	beq.n	801b2ca <_fwalk_reent+0x3a>
 801b2c2:	4629      	mov	r1, r5
 801b2c4:	4630      	mov	r0, r6
 801b2c6:	47c0      	blx	r8
 801b2c8:	4307      	orrs	r7, r0
 801b2ca:	3568      	adds	r5, #104	; 0x68
 801b2cc:	e7e9      	b.n	801b2a2 <_fwalk_reent+0x12>

0801b2ce <__swhatbuf_r>:
 801b2ce:	b570      	push	{r4, r5, r6, lr}
 801b2d0:	460e      	mov	r6, r1
 801b2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2d6:	2900      	cmp	r1, #0
 801b2d8:	b096      	sub	sp, #88	; 0x58
 801b2da:	4614      	mov	r4, r2
 801b2dc:	461d      	mov	r5, r3
 801b2de:	da08      	bge.n	801b2f2 <__swhatbuf_r+0x24>
 801b2e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b2e4:	2200      	movs	r2, #0
 801b2e6:	602a      	str	r2, [r5, #0]
 801b2e8:	061a      	lsls	r2, r3, #24
 801b2ea:	d410      	bmi.n	801b30e <__swhatbuf_r+0x40>
 801b2ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b2f0:	e00e      	b.n	801b310 <__swhatbuf_r+0x42>
 801b2f2:	466a      	mov	r2, sp
 801b2f4:	f000 fa4c 	bl	801b790 <_fstat_r>
 801b2f8:	2800      	cmp	r0, #0
 801b2fa:	dbf1      	blt.n	801b2e0 <__swhatbuf_r+0x12>
 801b2fc:	9a01      	ldr	r2, [sp, #4]
 801b2fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b302:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b306:	425a      	negs	r2, r3
 801b308:	415a      	adcs	r2, r3
 801b30a:	602a      	str	r2, [r5, #0]
 801b30c:	e7ee      	b.n	801b2ec <__swhatbuf_r+0x1e>
 801b30e:	2340      	movs	r3, #64	; 0x40
 801b310:	2000      	movs	r0, #0
 801b312:	6023      	str	r3, [r4, #0]
 801b314:	b016      	add	sp, #88	; 0x58
 801b316:	bd70      	pop	{r4, r5, r6, pc}

0801b318 <__smakebuf_r>:
 801b318:	898b      	ldrh	r3, [r1, #12]
 801b31a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b31c:	079d      	lsls	r5, r3, #30
 801b31e:	4606      	mov	r6, r0
 801b320:	460c      	mov	r4, r1
 801b322:	d507      	bpl.n	801b334 <__smakebuf_r+0x1c>
 801b324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b328:	6023      	str	r3, [r4, #0]
 801b32a:	6123      	str	r3, [r4, #16]
 801b32c:	2301      	movs	r3, #1
 801b32e:	6163      	str	r3, [r4, #20]
 801b330:	b002      	add	sp, #8
 801b332:	bd70      	pop	{r4, r5, r6, pc}
 801b334:	ab01      	add	r3, sp, #4
 801b336:	466a      	mov	r2, sp
 801b338:	f7ff ffc9 	bl	801b2ce <__swhatbuf_r>
 801b33c:	9900      	ldr	r1, [sp, #0]
 801b33e:	4605      	mov	r5, r0
 801b340:	4630      	mov	r0, r6
 801b342:	f7ff f977 	bl	801a634 <_malloc_r>
 801b346:	b948      	cbnz	r0, 801b35c <__smakebuf_r+0x44>
 801b348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b34c:	059a      	lsls	r2, r3, #22
 801b34e:	d4ef      	bmi.n	801b330 <__smakebuf_r+0x18>
 801b350:	f023 0303 	bic.w	r3, r3, #3
 801b354:	f043 0302 	orr.w	r3, r3, #2
 801b358:	81a3      	strh	r3, [r4, #12]
 801b35a:	e7e3      	b.n	801b324 <__smakebuf_r+0xc>
 801b35c:	4b0d      	ldr	r3, [pc, #52]	; (801b394 <__smakebuf_r+0x7c>)
 801b35e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b360:	89a3      	ldrh	r3, [r4, #12]
 801b362:	6020      	str	r0, [r4, #0]
 801b364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b368:	81a3      	strh	r3, [r4, #12]
 801b36a:	9b00      	ldr	r3, [sp, #0]
 801b36c:	6163      	str	r3, [r4, #20]
 801b36e:	9b01      	ldr	r3, [sp, #4]
 801b370:	6120      	str	r0, [r4, #16]
 801b372:	b15b      	cbz	r3, 801b38c <__smakebuf_r+0x74>
 801b374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b378:	4630      	mov	r0, r6
 801b37a:	f000 fa1b 	bl	801b7b4 <_isatty_r>
 801b37e:	b128      	cbz	r0, 801b38c <__smakebuf_r+0x74>
 801b380:	89a3      	ldrh	r3, [r4, #12]
 801b382:	f023 0303 	bic.w	r3, r3, #3
 801b386:	f043 0301 	orr.w	r3, r3, #1
 801b38a:	81a3      	strh	r3, [r4, #12]
 801b38c:	89a0      	ldrh	r0, [r4, #12]
 801b38e:	4305      	orrs	r5, r0
 801b390:	81a5      	strh	r5, [r4, #12]
 801b392:	e7cd      	b.n	801b330 <__smakebuf_r+0x18>
 801b394:	0801b12d 	.word	0x0801b12d

0801b398 <__malloc_lock>:
 801b398:	4801      	ldr	r0, [pc, #4]	; (801b3a0 <__malloc_lock+0x8>)
 801b39a:	f7ff b886 	b.w	801a4aa <__retarget_lock_acquire_recursive>
 801b39e:	bf00      	nop
 801b3a0:	20004b20 	.word	0x20004b20

0801b3a4 <__malloc_unlock>:
 801b3a4:	4801      	ldr	r0, [pc, #4]	; (801b3ac <__malloc_unlock+0x8>)
 801b3a6:	f7ff b881 	b.w	801a4ac <__retarget_lock_release_recursive>
 801b3aa:	bf00      	nop
 801b3ac:	20004b20 	.word	0x20004b20

0801b3b0 <_realloc_r>:
 801b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3b4:	4680      	mov	r8, r0
 801b3b6:	4614      	mov	r4, r2
 801b3b8:	460e      	mov	r6, r1
 801b3ba:	b921      	cbnz	r1, 801b3c6 <_realloc_r+0x16>
 801b3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b3c0:	4611      	mov	r1, r2
 801b3c2:	f7ff b937 	b.w	801a634 <_malloc_r>
 801b3c6:	b92a      	cbnz	r2, 801b3d4 <_realloc_r+0x24>
 801b3c8:	f7ff f8c8 	bl	801a55c <_free_r>
 801b3cc:	4625      	mov	r5, r4
 801b3ce:	4628      	mov	r0, r5
 801b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3d4:	f000 fa10 	bl	801b7f8 <_malloc_usable_size_r>
 801b3d8:	4284      	cmp	r4, r0
 801b3da:	4607      	mov	r7, r0
 801b3dc:	d802      	bhi.n	801b3e4 <_realloc_r+0x34>
 801b3de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b3e2:	d812      	bhi.n	801b40a <_realloc_r+0x5a>
 801b3e4:	4621      	mov	r1, r4
 801b3e6:	4640      	mov	r0, r8
 801b3e8:	f7ff f924 	bl	801a634 <_malloc_r>
 801b3ec:	4605      	mov	r5, r0
 801b3ee:	2800      	cmp	r0, #0
 801b3f0:	d0ed      	beq.n	801b3ce <_realloc_r+0x1e>
 801b3f2:	42bc      	cmp	r4, r7
 801b3f4:	4622      	mov	r2, r4
 801b3f6:	4631      	mov	r1, r6
 801b3f8:	bf28      	it	cs
 801b3fa:	463a      	movcs	r2, r7
 801b3fc:	f7ff f868 	bl	801a4d0 <memcpy>
 801b400:	4631      	mov	r1, r6
 801b402:	4640      	mov	r0, r8
 801b404:	f7ff f8aa 	bl	801a55c <_free_r>
 801b408:	e7e1      	b.n	801b3ce <_realloc_r+0x1e>
 801b40a:	4635      	mov	r5, r6
 801b40c:	e7df      	b.n	801b3ce <_realloc_r+0x1e>

0801b40e <__ssputs_r>:
 801b40e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b412:	688e      	ldr	r6, [r1, #8]
 801b414:	429e      	cmp	r6, r3
 801b416:	4682      	mov	sl, r0
 801b418:	460c      	mov	r4, r1
 801b41a:	4690      	mov	r8, r2
 801b41c:	461f      	mov	r7, r3
 801b41e:	d838      	bhi.n	801b492 <__ssputs_r+0x84>
 801b420:	898a      	ldrh	r2, [r1, #12]
 801b422:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b426:	d032      	beq.n	801b48e <__ssputs_r+0x80>
 801b428:	6825      	ldr	r5, [r4, #0]
 801b42a:	6909      	ldr	r1, [r1, #16]
 801b42c:	eba5 0901 	sub.w	r9, r5, r1
 801b430:	6965      	ldr	r5, [r4, #20]
 801b432:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b436:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b43a:	3301      	adds	r3, #1
 801b43c:	444b      	add	r3, r9
 801b43e:	106d      	asrs	r5, r5, #1
 801b440:	429d      	cmp	r5, r3
 801b442:	bf38      	it	cc
 801b444:	461d      	movcc	r5, r3
 801b446:	0553      	lsls	r3, r2, #21
 801b448:	d531      	bpl.n	801b4ae <__ssputs_r+0xa0>
 801b44a:	4629      	mov	r1, r5
 801b44c:	f7ff f8f2 	bl	801a634 <_malloc_r>
 801b450:	4606      	mov	r6, r0
 801b452:	b950      	cbnz	r0, 801b46a <__ssputs_r+0x5c>
 801b454:	230c      	movs	r3, #12
 801b456:	f8ca 3000 	str.w	r3, [sl]
 801b45a:	89a3      	ldrh	r3, [r4, #12]
 801b45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b460:	81a3      	strh	r3, [r4, #12]
 801b462:	f04f 30ff 	mov.w	r0, #4294967295
 801b466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b46a:	6921      	ldr	r1, [r4, #16]
 801b46c:	464a      	mov	r2, r9
 801b46e:	f7ff f82f 	bl	801a4d0 <memcpy>
 801b472:	89a3      	ldrh	r3, [r4, #12]
 801b474:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b47c:	81a3      	strh	r3, [r4, #12]
 801b47e:	6126      	str	r6, [r4, #16]
 801b480:	6165      	str	r5, [r4, #20]
 801b482:	444e      	add	r6, r9
 801b484:	eba5 0509 	sub.w	r5, r5, r9
 801b488:	6026      	str	r6, [r4, #0]
 801b48a:	60a5      	str	r5, [r4, #8]
 801b48c:	463e      	mov	r6, r7
 801b48e:	42be      	cmp	r6, r7
 801b490:	d900      	bls.n	801b494 <__ssputs_r+0x86>
 801b492:	463e      	mov	r6, r7
 801b494:	6820      	ldr	r0, [r4, #0]
 801b496:	4632      	mov	r2, r6
 801b498:	4641      	mov	r1, r8
 801b49a:	f7ff f827 	bl	801a4ec <memmove>
 801b49e:	68a3      	ldr	r3, [r4, #8]
 801b4a0:	1b9b      	subs	r3, r3, r6
 801b4a2:	60a3      	str	r3, [r4, #8]
 801b4a4:	6823      	ldr	r3, [r4, #0]
 801b4a6:	4433      	add	r3, r6
 801b4a8:	6023      	str	r3, [r4, #0]
 801b4aa:	2000      	movs	r0, #0
 801b4ac:	e7db      	b.n	801b466 <__ssputs_r+0x58>
 801b4ae:	462a      	mov	r2, r5
 801b4b0:	f7ff ff7e 	bl	801b3b0 <_realloc_r>
 801b4b4:	4606      	mov	r6, r0
 801b4b6:	2800      	cmp	r0, #0
 801b4b8:	d1e1      	bne.n	801b47e <__ssputs_r+0x70>
 801b4ba:	6921      	ldr	r1, [r4, #16]
 801b4bc:	4650      	mov	r0, sl
 801b4be:	f7ff f84d 	bl	801a55c <_free_r>
 801b4c2:	e7c7      	b.n	801b454 <__ssputs_r+0x46>

0801b4c4 <_svfiprintf_r>:
 801b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4c8:	4698      	mov	r8, r3
 801b4ca:	898b      	ldrh	r3, [r1, #12]
 801b4cc:	061b      	lsls	r3, r3, #24
 801b4ce:	b09d      	sub	sp, #116	; 0x74
 801b4d0:	4607      	mov	r7, r0
 801b4d2:	460d      	mov	r5, r1
 801b4d4:	4614      	mov	r4, r2
 801b4d6:	d50e      	bpl.n	801b4f6 <_svfiprintf_r+0x32>
 801b4d8:	690b      	ldr	r3, [r1, #16]
 801b4da:	b963      	cbnz	r3, 801b4f6 <_svfiprintf_r+0x32>
 801b4dc:	2140      	movs	r1, #64	; 0x40
 801b4de:	f7ff f8a9 	bl	801a634 <_malloc_r>
 801b4e2:	6028      	str	r0, [r5, #0]
 801b4e4:	6128      	str	r0, [r5, #16]
 801b4e6:	b920      	cbnz	r0, 801b4f2 <_svfiprintf_r+0x2e>
 801b4e8:	230c      	movs	r3, #12
 801b4ea:	603b      	str	r3, [r7, #0]
 801b4ec:	f04f 30ff 	mov.w	r0, #4294967295
 801b4f0:	e0d1      	b.n	801b696 <_svfiprintf_r+0x1d2>
 801b4f2:	2340      	movs	r3, #64	; 0x40
 801b4f4:	616b      	str	r3, [r5, #20]
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	9309      	str	r3, [sp, #36]	; 0x24
 801b4fa:	2320      	movs	r3, #32
 801b4fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b500:	f8cd 800c 	str.w	r8, [sp, #12]
 801b504:	2330      	movs	r3, #48	; 0x30
 801b506:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b6b0 <_svfiprintf_r+0x1ec>
 801b50a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b50e:	f04f 0901 	mov.w	r9, #1
 801b512:	4623      	mov	r3, r4
 801b514:	469a      	mov	sl, r3
 801b516:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b51a:	b10a      	cbz	r2, 801b520 <_svfiprintf_r+0x5c>
 801b51c:	2a25      	cmp	r2, #37	; 0x25
 801b51e:	d1f9      	bne.n	801b514 <_svfiprintf_r+0x50>
 801b520:	ebba 0b04 	subs.w	fp, sl, r4
 801b524:	d00b      	beq.n	801b53e <_svfiprintf_r+0x7a>
 801b526:	465b      	mov	r3, fp
 801b528:	4622      	mov	r2, r4
 801b52a:	4629      	mov	r1, r5
 801b52c:	4638      	mov	r0, r7
 801b52e:	f7ff ff6e 	bl	801b40e <__ssputs_r>
 801b532:	3001      	adds	r0, #1
 801b534:	f000 80aa 	beq.w	801b68c <_svfiprintf_r+0x1c8>
 801b538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b53a:	445a      	add	r2, fp
 801b53c:	9209      	str	r2, [sp, #36]	; 0x24
 801b53e:	f89a 3000 	ldrb.w	r3, [sl]
 801b542:	2b00      	cmp	r3, #0
 801b544:	f000 80a2 	beq.w	801b68c <_svfiprintf_r+0x1c8>
 801b548:	2300      	movs	r3, #0
 801b54a:	f04f 32ff 	mov.w	r2, #4294967295
 801b54e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b552:	f10a 0a01 	add.w	sl, sl, #1
 801b556:	9304      	str	r3, [sp, #16]
 801b558:	9307      	str	r3, [sp, #28]
 801b55a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b55e:	931a      	str	r3, [sp, #104]	; 0x68
 801b560:	4654      	mov	r4, sl
 801b562:	2205      	movs	r2, #5
 801b564:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b568:	4851      	ldr	r0, [pc, #324]	; (801b6b0 <_svfiprintf_r+0x1ec>)
 801b56a:	f7e4 fe31 	bl	80001d0 <memchr>
 801b56e:	9a04      	ldr	r2, [sp, #16]
 801b570:	b9d8      	cbnz	r0, 801b5aa <_svfiprintf_r+0xe6>
 801b572:	06d0      	lsls	r0, r2, #27
 801b574:	bf44      	itt	mi
 801b576:	2320      	movmi	r3, #32
 801b578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b57c:	0711      	lsls	r1, r2, #28
 801b57e:	bf44      	itt	mi
 801b580:	232b      	movmi	r3, #43	; 0x2b
 801b582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b586:	f89a 3000 	ldrb.w	r3, [sl]
 801b58a:	2b2a      	cmp	r3, #42	; 0x2a
 801b58c:	d015      	beq.n	801b5ba <_svfiprintf_r+0xf6>
 801b58e:	9a07      	ldr	r2, [sp, #28]
 801b590:	4654      	mov	r4, sl
 801b592:	2000      	movs	r0, #0
 801b594:	f04f 0c0a 	mov.w	ip, #10
 801b598:	4621      	mov	r1, r4
 801b59a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b59e:	3b30      	subs	r3, #48	; 0x30
 801b5a0:	2b09      	cmp	r3, #9
 801b5a2:	d94e      	bls.n	801b642 <_svfiprintf_r+0x17e>
 801b5a4:	b1b0      	cbz	r0, 801b5d4 <_svfiprintf_r+0x110>
 801b5a6:	9207      	str	r2, [sp, #28]
 801b5a8:	e014      	b.n	801b5d4 <_svfiprintf_r+0x110>
 801b5aa:	eba0 0308 	sub.w	r3, r0, r8
 801b5ae:	fa09 f303 	lsl.w	r3, r9, r3
 801b5b2:	4313      	orrs	r3, r2
 801b5b4:	9304      	str	r3, [sp, #16]
 801b5b6:	46a2      	mov	sl, r4
 801b5b8:	e7d2      	b.n	801b560 <_svfiprintf_r+0x9c>
 801b5ba:	9b03      	ldr	r3, [sp, #12]
 801b5bc:	1d19      	adds	r1, r3, #4
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	9103      	str	r1, [sp, #12]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	bfbb      	ittet	lt
 801b5c6:	425b      	neglt	r3, r3
 801b5c8:	f042 0202 	orrlt.w	r2, r2, #2
 801b5cc:	9307      	strge	r3, [sp, #28]
 801b5ce:	9307      	strlt	r3, [sp, #28]
 801b5d0:	bfb8      	it	lt
 801b5d2:	9204      	strlt	r2, [sp, #16]
 801b5d4:	7823      	ldrb	r3, [r4, #0]
 801b5d6:	2b2e      	cmp	r3, #46	; 0x2e
 801b5d8:	d10c      	bne.n	801b5f4 <_svfiprintf_r+0x130>
 801b5da:	7863      	ldrb	r3, [r4, #1]
 801b5dc:	2b2a      	cmp	r3, #42	; 0x2a
 801b5de:	d135      	bne.n	801b64c <_svfiprintf_r+0x188>
 801b5e0:	9b03      	ldr	r3, [sp, #12]
 801b5e2:	1d1a      	adds	r2, r3, #4
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	9203      	str	r2, [sp, #12]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	bfb8      	it	lt
 801b5ec:	f04f 33ff 	movlt.w	r3, #4294967295
 801b5f0:	3402      	adds	r4, #2
 801b5f2:	9305      	str	r3, [sp, #20]
 801b5f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b6c0 <_svfiprintf_r+0x1fc>
 801b5f8:	7821      	ldrb	r1, [r4, #0]
 801b5fa:	2203      	movs	r2, #3
 801b5fc:	4650      	mov	r0, sl
 801b5fe:	f7e4 fde7 	bl	80001d0 <memchr>
 801b602:	b140      	cbz	r0, 801b616 <_svfiprintf_r+0x152>
 801b604:	2340      	movs	r3, #64	; 0x40
 801b606:	eba0 000a 	sub.w	r0, r0, sl
 801b60a:	fa03 f000 	lsl.w	r0, r3, r0
 801b60e:	9b04      	ldr	r3, [sp, #16]
 801b610:	4303      	orrs	r3, r0
 801b612:	3401      	adds	r4, #1
 801b614:	9304      	str	r3, [sp, #16]
 801b616:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b61a:	4826      	ldr	r0, [pc, #152]	; (801b6b4 <_svfiprintf_r+0x1f0>)
 801b61c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b620:	2206      	movs	r2, #6
 801b622:	f7e4 fdd5 	bl	80001d0 <memchr>
 801b626:	2800      	cmp	r0, #0
 801b628:	d038      	beq.n	801b69c <_svfiprintf_r+0x1d8>
 801b62a:	4b23      	ldr	r3, [pc, #140]	; (801b6b8 <_svfiprintf_r+0x1f4>)
 801b62c:	bb1b      	cbnz	r3, 801b676 <_svfiprintf_r+0x1b2>
 801b62e:	9b03      	ldr	r3, [sp, #12]
 801b630:	3307      	adds	r3, #7
 801b632:	f023 0307 	bic.w	r3, r3, #7
 801b636:	3308      	adds	r3, #8
 801b638:	9303      	str	r3, [sp, #12]
 801b63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b63c:	4433      	add	r3, r6
 801b63e:	9309      	str	r3, [sp, #36]	; 0x24
 801b640:	e767      	b.n	801b512 <_svfiprintf_r+0x4e>
 801b642:	fb0c 3202 	mla	r2, ip, r2, r3
 801b646:	460c      	mov	r4, r1
 801b648:	2001      	movs	r0, #1
 801b64a:	e7a5      	b.n	801b598 <_svfiprintf_r+0xd4>
 801b64c:	2300      	movs	r3, #0
 801b64e:	3401      	adds	r4, #1
 801b650:	9305      	str	r3, [sp, #20]
 801b652:	4619      	mov	r1, r3
 801b654:	f04f 0c0a 	mov.w	ip, #10
 801b658:	4620      	mov	r0, r4
 801b65a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b65e:	3a30      	subs	r2, #48	; 0x30
 801b660:	2a09      	cmp	r2, #9
 801b662:	d903      	bls.n	801b66c <_svfiprintf_r+0x1a8>
 801b664:	2b00      	cmp	r3, #0
 801b666:	d0c5      	beq.n	801b5f4 <_svfiprintf_r+0x130>
 801b668:	9105      	str	r1, [sp, #20]
 801b66a:	e7c3      	b.n	801b5f4 <_svfiprintf_r+0x130>
 801b66c:	fb0c 2101 	mla	r1, ip, r1, r2
 801b670:	4604      	mov	r4, r0
 801b672:	2301      	movs	r3, #1
 801b674:	e7f0      	b.n	801b658 <_svfiprintf_r+0x194>
 801b676:	ab03      	add	r3, sp, #12
 801b678:	9300      	str	r3, [sp, #0]
 801b67a:	462a      	mov	r2, r5
 801b67c:	4b0f      	ldr	r3, [pc, #60]	; (801b6bc <_svfiprintf_r+0x1f8>)
 801b67e:	a904      	add	r1, sp, #16
 801b680:	4638      	mov	r0, r7
 801b682:	f3af 8000 	nop.w
 801b686:	1c42      	adds	r2, r0, #1
 801b688:	4606      	mov	r6, r0
 801b68a:	d1d6      	bne.n	801b63a <_svfiprintf_r+0x176>
 801b68c:	89ab      	ldrh	r3, [r5, #12]
 801b68e:	065b      	lsls	r3, r3, #25
 801b690:	f53f af2c 	bmi.w	801b4ec <_svfiprintf_r+0x28>
 801b694:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b696:	b01d      	add	sp, #116	; 0x74
 801b698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b69c:	ab03      	add	r3, sp, #12
 801b69e:	9300      	str	r3, [sp, #0]
 801b6a0:	462a      	mov	r2, r5
 801b6a2:	4b06      	ldr	r3, [pc, #24]	; (801b6bc <_svfiprintf_r+0x1f8>)
 801b6a4:	a904      	add	r1, sp, #16
 801b6a6:	4638      	mov	r0, r7
 801b6a8:	f7ff fa00 	bl	801aaac <_printf_i>
 801b6ac:	e7eb      	b.n	801b686 <_svfiprintf_r+0x1c2>
 801b6ae:	bf00      	nop
 801b6b0:	0801da00 	.word	0x0801da00
 801b6b4:	0801da0a 	.word	0x0801da0a
 801b6b8:	00000000 	.word	0x00000000
 801b6bc:	0801b40f 	.word	0x0801b40f
 801b6c0:	0801da06 	.word	0x0801da06

0801b6c4 <__sread>:
 801b6c4:	b510      	push	{r4, lr}
 801b6c6:	460c      	mov	r4, r1
 801b6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6cc:	f000 f89c 	bl	801b808 <_read_r>
 801b6d0:	2800      	cmp	r0, #0
 801b6d2:	bfab      	itete	ge
 801b6d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b6d6:	89a3      	ldrhlt	r3, [r4, #12]
 801b6d8:	181b      	addge	r3, r3, r0
 801b6da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b6de:	bfac      	ite	ge
 801b6e0:	6563      	strge	r3, [r4, #84]	; 0x54
 801b6e2:	81a3      	strhlt	r3, [r4, #12]
 801b6e4:	bd10      	pop	{r4, pc}

0801b6e6 <__swrite>:
 801b6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6ea:	461f      	mov	r7, r3
 801b6ec:	898b      	ldrh	r3, [r1, #12]
 801b6ee:	05db      	lsls	r3, r3, #23
 801b6f0:	4605      	mov	r5, r0
 801b6f2:	460c      	mov	r4, r1
 801b6f4:	4616      	mov	r6, r2
 801b6f6:	d505      	bpl.n	801b704 <__swrite+0x1e>
 801b6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6fc:	2302      	movs	r3, #2
 801b6fe:	2200      	movs	r2, #0
 801b700:	f000 f868 	bl	801b7d4 <_lseek_r>
 801b704:	89a3      	ldrh	r3, [r4, #12]
 801b706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b70a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b70e:	81a3      	strh	r3, [r4, #12]
 801b710:	4632      	mov	r2, r6
 801b712:	463b      	mov	r3, r7
 801b714:	4628      	mov	r0, r5
 801b716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b71a:	f000 b817 	b.w	801b74c <_write_r>

0801b71e <__sseek>:
 801b71e:	b510      	push	{r4, lr}
 801b720:	460c      	mov	r4, r1
 801b722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b726:	f000 f855 	bl	801b7d4 <_lseek_r>
 801b72a:	1c43      	adds	r3, r0, #1
 801b72c:	89a3      	ldrh	r3, [r4, #12]
 801b72e:	bf15      	itete	ne
 801b730:	6560      	strne	r0, [r4, #84]	; 0x54
 801b732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b73a:	81a3      	strheq	r3, [r4, #12]
 801b73c:	bf18      	it	ne
 801b73e:	81a3      	strhne	r3, [r4, #12]
 801b740:	bd10      	pop	{r4, pc}

0801b742 <__sclose>:
 801b742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b746:	f000 b813 	b.w	801b770 <_close_r>
	...

0801b74c <_write_r>:
 801b74c:	b538      	push	{r3, r4, r5, lr}
 801b74e:	4d07      	ldr	r5, [pc, #28]	; (801b76c <_write_r+0x20>)
 801b750:	4604      	mov	r4, r0
 801b752:	4608      	mov	r0, r1
 801b754:	4611      	mov	r1, r2
 801b756:	2200      	movs	r2, #0
 801b758:	602a      	str	r2, [r5, #0]
 801b75a:	461a      	mov	r2, r3
 801b75c:	f7e9 fd97 	bl	800528e <_write>
 801b760:	1c43      	adds	r3, r0, #1
 801b762:	d102      	bne.n	801b76a <_write_r+0x1e>
 801b764:	682b      	ldr	r3, [r5, #0]
 801b766:	b103      	cbz	r3, 801b76a <_write_r+0x1e>
 801b768:	6023      	str	r3, [r4, #0]
 801b76a:	bd38      	pop	{r3, r4, r5, pc}
 801b76c:	20004b2c 	.word	0x20004b2c

0801b770 <_close_r>:
 801b770:	b538      	push	{r3, r4, r5, lr}
 801b772:	4d06      	ldr	r5, [pc, #24]	; (801b78c <_close_r+0x1c>)
 801b774:	2300      	movs	r3, #0
 801b776:	4604      	mov	r4, r0
 801b778:	4608      	mov	r0, r1
 801b77a:	602b      	str	r3, [r5, #0]
 801b77c:	f7e9 fda3 	bl	80052c6 <_close>
 801b780:	1c43      	adds	r3, r0, #1
 801b782:	d102      	bne.n	801b78a <_close_r+0x1a>
 801b784:	682b      	ldr	r3, [r5, #0]
 801b786:	b103      	cbz	r3, 801b78a <_close_r+0x1a>
 801b788:	6023      	str	r3, [r4, #0]
 801b78a:	bd38      	pop	{r3, r4, r5, pc}
 801b78c:	20004b2c 	.word	0x20004b2c

0801b790 <_fstat_r>:
 801b790:	b538      	push	{r3, r4, r5, lr}
 801b792:	4d07      	ldr	r5, [pc, #28]	; (801b7b0 <_fstat_r+0x20>)
 801b794:	2300      	movs	r3, #0
 801b796:	4604      	mov	r4, r0
 801b798:	4608      	mov	r0, r1
 801b79a:	4611      	mov	r1, r2
 801b79c:	602b      	str	r3, [r5, #0]
 801b79e:	f7e9 fd9e 	bl	80052de <_fstat>
 801b7a2:	1c43      	adds	r3, r0, #1
 801b7a4:	d102      	bne.n	801b7ac <_fstat_r+0x1c>
 801b7a6:	682b      	ldr	r3, [r5, #0]
 801b7a8:	b103      	cbz	r3, 801b7ac <_fstat_r+0x1c>
 801b7aa:	6023      	str	r3, [r4, #0]
 801b7ac:	bd38      	pop	{r3, r4, r5, pc}
 801b7ae:	bf00      	nop
 801b7b0:	20004b2c 	.word	0x20004b2c

0801b7b4 <_isatty_r>:
 801b7b4:	b538      	push	{r3, r4, r5, lr}
 801b7b6:	4d06      	ldr	r5, [pc, #24]	; (801b7d0 <_isatty_r+0x1c>)
 801b7b8:	2300      	movs	r3, #0
 801b7ba:	4604      	mov	r4, r0
 801b7bc:	4608      	mov	r0, r1
 801b7be:	602b      	str	r3, [r5, #0]
 801b7c0:	f7e9 fd9d 	bl	80052fe <_isatty>
 801b7c4:	1c43      	adds	r3, r0, #1
 801b7c6:	d102      	bne.n	801b7ce <_isatty_r+0x1a>
 801b7c8:	682b      	ldr	r3, [r5, #0]
 801b7ca:	b103      	cbz	r3, 801b7ce <_isatty_r+0x1a>
 801b7cc:	6023      	str	r3, [r4, #0]
 801b7ce:	bd38      	pop	{r3, r4, r5, pc}
 801b7d0:	20004b2c 	.word	0x20004b2c

0801b7d4 <_lseek_r>:
 801b7d4:	b538      	push	{r3, r4, r5, lr}
 801b7d6:	4d07      	ldr	r5, [pc, #28]	; (801b7f4 <_lseek_r+0x20>)
 801b7d8:	4604      	mov	r4, r0
 801b7da:	4608      	mov	r0, r1
 801b7dc:	4611      	mov	r1, r2
 801b7de:	2200      	movs	r2, #0
 801b7e0:	602a      	str	r2, [r5, #0]
 801b7e2:	461a      	mov	r2, r3
 801b7e4:	f7e9 fd96 	bl	8005314 <_lseek>
 801b7e8:	1c43      	adds	r3, r0, #1
 801b7ea:	d102      	bne.n	801b7f2 <_lseek_r+0x1e>
 801b7ec:	682b      	ldr	r3, [r5, #0]
 801b7ee:	b103      	cbz	r3, 801b7f2 <_lseek_r+0x1e>
 801b7f0:	6023      	str	r3, [r4, #0]
 801b7f2:	bd38      	pop	{r3, r4, r5, pc}
 801b7f4:	20004b2c 	.word	0x20004b2c

0801b7f8 <_malloc_usable_size_r>:
 801b7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7fc:	1f18      	subs	r0, r3, #4
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	bfbc      	itt	lt
 801b802:	580b      	ldrlt	r3, [r1, r0]
 801b804:	18c0      	addlt	r0, r0, r3
 801b806:	4770      	bx	lr

0801b808 <_read_r>:
 801b808:	b538      	push	{r3, r4, r5, lr}
 801b80a:	4d07      	ldr	r5, [pc, #28]	; (801b828 <_read_r+0x20>)
 801b80c:	4604      	mov	r4, r0
 801b80e:	4608      	mov	r0, r1
 801b810:	4611      	mov	r1, r2
 801b812:	2200      	movs	r2, #0
 801b814:	602a      	str	r2, [r5, #0]
 801b816:	461a      	mov	r2, r3
 801b818:	f7e9 fd1c 	bl	8005254 <_read>
 801b81c:	1c43      	adds	r3, r0, #1
 801b81e:	d102      	bne.n	801b826 <_read_r+0x1e>
 801b820:	682b      	ldr	r3, [r5, #0]
 801b822:	b103      	cbz	r3, 801b826 <_read_r+0x1e>
 801b824:	6023      	str	r3, [r4, #0]
 801b826:	bd38      	pop	{r3, r4, r5, pc}
 801b828:	20004b2c 	.word	0x20004b2c

0801b82c <_init>:
 801b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b82e:	bf00      	nop
 801b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b832:	bc08      	pop	{r3}
 801b834:	469e      	mov	lr, r3
 801b836:	4770      	bx	lr

0801b838 <_fini>:
 801b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b83a:	bf00      	nop
 801b83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b83e:	bc08      	pop	{r3}
 801b840:	469e      	mov	lr, r3
 801b842:	4770      	bx	lr
